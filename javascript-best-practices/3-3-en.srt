1
00:00:00,000 --> 00:00:02,040


2
00:00:02,040 --> 00:00:04,450
Hey guys, welcome
back to section three

3
00:00:04,450 --> 00:00:07,230
of level three,
JavaScript Best Practices.

4
00:00:07,230 --> 00:00:10,410
And what would a best practices
course be without a section

5
00:00:10,410 --> 00:00:12,540
on what not to do.

6
00:00:12,540 --> 00:00:17,250
And that is the section,
stuff that's sometimes sucks.

7
00:00:17,250 --> 00:00:19,150
And the first kind
of sucky thing

8
00:00:19,150 --> 00:00:22,120
that we're going to look
at is the with statement.

9
00:00:22,120 --> 00:00:25,550
JavaScript's with keyword
is sort of unreliable.

10
00:00:25,550 --> 00:00:27,390
And it's often
very expensive too,

11
00:00:27,390 --> 00:00:30,560
so it is generally
avoided in practice.

12
00:00:30,560 --> 00:00:32,140
Let's take a look
at what it does

13
00:00:32,140 --> 00:00:34,800
and how to avoid it's pitfalls.

14
00:00:34,800 --> 00:00:37,280
Here we've got a drawbridge
object with some properties.

15
00:00:37,280 --> 00:00:39,810
It's got soldiers, and
there's eight of them there.

16
00:00:39,810 --> 00:00:41,470
It's got a capacity
of 20, meaning

17
00:00:41,470 --> 00:00:43,447
20 people can go on this object.

18
00:00:43,447 --> 00:00:45,780
It's also got an open method,
which will of course alert

19
00:00:45,780 --> 00:00:48,570
a message that opens
the drawbridge.

20
00:00:48,570 --> 00:00:50,620
Now if I were to
use a with block

21
00:00:50,620 --> 00:00:53,490
on this a drawbridge
object what it will do

22
00:00:53,490 --> 00:00:57,300
is take the entire encapsulated
environment of the parameter

23
00:00:57,300 --> 00:00:59,880
object-- in this
case the drawbridge--

24
00:00:59,880 --> 00:01:03,580
and use it to build
a new local scope

25
00:01:03,580 --> 00:01:06,080
within its bracketed
block, which

26
00:01:06,080 --> 00:01:09,160
is kind of processing expensive.

27
00:01:09,160 --> 00:01:10,970
You can think of
that with keyword

28
00:01:10,970 --> 00:01:13,960
as asking the interpreter
to do operations

29
00:01:13,960 --> 00:01:17,370
with the name of
this data container

30
00:01:17,370 --> 00:01:22,910
as the header syntax on
each piece of data, sort of.

31
00:01:22,910 --> 00:01:25,040
Right now, inside
this block, because I

32
00:01:25,040 --> 00:01:29,930
am with-ing on the drawbridge
I can call the open method.

33
00:01:29,930 --> 00:01:33,170
And no object name is necessary
when everything in the object

34
00:01:33,170 --> 00:01:36,400
is already treated as
being local to that scope,

35
00:01:36,400 --> 00:01:38,000
that block.

36
00:01:38,000 --> 00:01:41,450
And I get my alerted message
that the drawbridge has opened.

37
00:01:41,450 --> 00:01:43,400
Err, bang.

38
00:01:43,400 --> 00:01:45,570
Now you might think
wow, cool, yay,

39
00:01:45,570 --> 00:01:47,232
I don't have to use
the object name.

40
00:01:47,232 --> 00:01:48,410
That's so great.

41
00:01:48,410 --> 00:01:49,470
Not great.

42
00:01:49,470 --> 00:01:54,370
What happens when I try to build
a new property close right here

43
00:01:54,370 --> 00:01:55,750
inside that with?

44
00:01:55,750 --> 00:01:58,080
I'm building an
anonymous function there.

45
00:01:58,080 --> 00:01:59,830
And I've got the
close mechanism,

46
00:01:59,830 --> 00:02:02,760
it's going to go, yun, yun,
yun, yun, yun, yun, clack.

47
00:02:02,760 --> 00:02:06,710
Building new properties
in the object on the fly

48
00:02:06,710 --> 00:02:09,160
is not going to work
like you might expect to,

49
00:02:09,160 --> 00:02:12,530
since we seem to be in
the scope of that object.

50
00:02:12,530 --> 00:02:14,840
No, let's see what happens.

51
00:02:14,840 --> 00:02:16,820
Turns out that if
we actually want

52
00:02:16,820 --> 00:02:19,030
to build some property
on the fly like that,

53
00:02:19,030 --> 00:02:21,880
it's not considered as a
new property on the object.

54
00:02:21,880 --> 00:02:25,330
It's, in fact, considered as
some new random global variable

55
00:02:25,330 --> 00:02:27,950
to be created, yay.

56
00:02:27,950 --> 00:02:30,790
The thing about that is,
though, that any new variables

57
00:02:30,790 --> 00:02:33,950
are, of course, added to
the surrounding scope, which

58
00:02:33,950 --> 00:02:36,260
is slightly counter intuitive
and certainly not what

59
00:02:36,260 --> 00:02:37,190
we were looking for.

60
00:02:37,190 --> 00:02:40,490
So beware of that.

61
00:02:40,490 --> 00:02:44,050
Thus, if we actually did want
to add that to the object scope,

62
00:02:44,050 --> 00:02:47,140
we've still got to do that
either right upon construction,

63
00:02:47,140 --> 00:02:49,670
or with a declaration, or
with some on the fly daughter

64
00:02:49,670 --> 00:02:51,450
bracket syntax.

65
00:02:51,450 --> 00:02:53,280
Now with has sort of
an admirable goal.

66
00:02:53,280 --> 00:02:55,231
It's trying to limit redundancy.

67
00:02:55,231 --> 00:02:56,730
Because you know,
nested objects are

68
00:02:56,730 --> 00:02:58,350
very frequent in JavaScript.

69
00:02:58,350 --> 00:03:02,440
And with is trying,
trying, to help

70
00:03:02,440 --> 00:03:05,180
avoid all of that deep
access repeatedly,

71
00:03:05,180 --> 00:03:08,960
and typing all of that access
over and over again, right?

72
00:03:08,960 --> 00:03:11,380
We're going to scoot our
drawbridge object a little bit

73
00:03:11,380 --> 00:03:14,450
further inside of some
other objects here,

74
00:03:14,450 --> 00:03:18,430
and see how with is
sometimes used poorly

75
00:03:18,430 --> 00:03:21,247
to handle these
nested scenarios.

76
00:03:21,247 --> 00:03:22,830
You can see that our
drawbridge is now

77
00:03:22,830 --> 00:03:24,810
contained within a keep, right?

78
00:03:24,810 --> 00:03:26,490
And they keep has
soldiers of its own,

79
00:03:26,490 --> 00:03:27,780
and a capacity of its own.

80
00:03:27,780 --> 00:03:31,030
And the keep itself is contained
within a castle object, which

81
00:03:31,030 --> 00:03:33,960
has soldiers of its own,
and capacity of its own.

82
00:03:33,960 --> 00:03:35,974
Drawbridge is way down in there.

83
00:03:35,974 --> 00:03:38,390
Now over here on the right
we're going to write some code.

84
00:03:38,390 --> 00:03:40,650
We going to establish a
reinforcements variable,

85
00:03:40,650 --> 00:03:41,870
that's 12 guys.

86
00:03:41,870 --> 00:03:46,410
These are some guys they need to
be reinforcing the drawbridge.

87
00:03:46,410 --> 00:03:50,530
So we're going to right if the
castle.keep.drawbridge.capacity

88
00:03:50,530 --> 00:03:55,040
is greater than or equal to the
 castle.keep.drawbridge.soldiers+reinforcements--

89
00:03:55,040 --> 00:03:56,987
which is awful and
terrible, right?--

90
00:03:56,987 --> 00:03:59,070
then what we're going to
do is we're going to call

91
00:03:59,070 --> 00:04:00,630
castle.keep.drawbridge.open.

92
00:04:00,630 --> 00:04:03,810
Obviously, you can see that this
is really irritating to type,

93
00:04:03,810 --> 00:04:08,240
and keep typing
forever on, right?

94
00:04:08,240 --> 00:04:09,290
Which is awful.

95
00:04:09,290 --> 00:04:12,580
So if we need access to
the drawbridge object

96
00:04:12,580 --> 00:04:14,090
from the global
scope, it's going

97
00:04:14,090 --> 00:04:16,890
to be very redundant to try
to keep getting to that.

98
00:04:16,890 --> 00:04:20,149
With is trying to
avoid all of that.

99
00:04:20,149 --> 00:04:24,550
So what some people might do
here is put all of this code

100
00:04:24,550 --> 00:04:27,010
inside of with block,
and make the reference

101
00:04:27,010 --> 00:04:31,090
object be
castle.keep.drawbridge.

102
00:04:31,090 --> 00:04:32,090
Let's check it out.

103
00:04:32,090 --> 00:04:35,420
So all of those
castle.keep.drawbridges

104
00:04:35,420 --> 00:04:36,040
go away.

105
00:04:36,040 --> 00:04:39,766


106
00:04:39,766 --> 00:04:42,200
Now this is much more
terse and legible, right?

107
00:04:42,200 --> 00:04:47,060
It makes a lot of sense to
use with, every day, all day.

108
00:04:47,060 --> 00:04:49,520
Problem here is that
with will always

109
00:04:49,520 --> 00:04:52,810
make it unclear which properties
or variables are actually

110
00:04:52,810 --> 00:04:54,660
modified elsewhere.

111
00:04:54,660 --> 00:04:58,320
If we can't read a program,
right, and be confident

112
00:04:58,320 --> 00:05:02,820
that we know what's going on
inside of any block of code,

113
00:05:02,820 --> 00:05:05,270
then we are never really
sure the program is working

114
00:05:05,270 --> 00:05:09,120
like we intend, or like
we desire for it to.

115
00:05:09,120 --> 00:05:11,160
If you've got a developer
gal coming in here

116
00:05:11,160 --> 00:05:12,660
to look at this
code, it's not going

117
00:05:12,660 --> 00:05:14,790
to be immediately
understandable to her

118
00:05:14,790 --> 00:05:17,730
where the soldiers
or the capacity

119
00:05:17,730 --> 00:05:19,800
was located in this case.

120
00:05:19,800 --> 00:05:23,040
We happen to know, the designers
of the code happen to know.

121
00:05:23,040 --> 00:05:26,060
But anybody that's trying
to maintain your code

122
00:05:26,060 --> 00:05:27,050
may not know.

123
00:05:27,050 --> 00:05:30,730
And that makes it very difficult
for large scale projects.

124
00:05:30,730 --> 00:05:32,740
In particular here,
check out that soldiers

125
00:05:32,740 --> 00:05:35,670
that's getting modified with
the plus equals reinforcements.

126
00:05:35,670 --> 00:05:38,520
We're actually not sure
where that soldiers variable

127
00:05:38,520 --> 00:05:39,560
is getting modified.

128
00:05:39,560 --> 00:05:41,720
What if the soldiers
property was not

129
00:05:41,720 --> 00:05:43,500
actually in the drawbridge?

130
00:05:43,500 --> 00:05:46,340
Maybe it gets added on the
fly, only in times of war,

131
00:05:46,340 --> 00:05:48,460
or something like that.

132
00:05:48,460 --> 00:05:50,740
So what we want to give you
here is this best practice

133
00:05:50,740 --> 00:05:53,970
of using variables
to cache your objects

134
00:05:53,970 --> 00:05:56,250
to avoid the with pitfalls.

135
00:05:56,250 --> 00:05:58,230
This is just like
the caching that you

136
00:05:58,230 --> 00:06:01,620
saw in the loop
optimization segment, right?

137
00:06:01,620 --> 00:06:04,420
It lets us avoid
a bunch of typing.

138
00:06:04,420 --> 00:06:06,510
But it's also very
clear in its indication.

139
00:06:06,510 --> 00:06:07,850
Let's take a look.

140
00:06:07,850 --> 00:06:10,320
So what we do here is we
show with block the door.

141
00:06:10,320 --> 00:06:12,460
Good bye with, peaces out.

142
00:06:12,460 --> 00:06:15,750
And now we're going to establish
a new variable called O.

143
00:06:15,750 --> 00:06:18,110
And we're going to be
assign to that variable

144
00:06:18,110 --> 00:06:21,380
the castle.keep.drawbridge
object.

145
00:06:21,380 --> 00:06:23,130
That means that
entire object is now

146
00:06:23,130 --> 00:06:27,392
contained within
the single letter O.

147
00:06:27,392 --> 00:06:28,850
So now we scoot
our code over here.

148
00:06:28,850 --> 00:06:33,450
And we drop in a bunch of
O dots where necessary.

149
00:06:33,450 --> 00:06:36,430
Now with all of
this cached clarity,

150
00:06:36,430 --> 00:06:39,320
the team members on
our very large project

151
00:06:39,320 --> 00:06:41,910
will be able to understand all
of our code's functionality

152
00:06:41,910 --> 00:06:45,980
more precisely, and understand
where stuff comes from

153
00:06:45,980 --> 00:06:49,230
and what you're referring
to in your code.

154
00:06:49,230 --> 00:06:52,340
Also, yay bonus,
no lengthy typing,

155
00:06:52,340 --> 00:06:56,040
no long nested object names
are needed in this case.

156
00:06:56,040 --> 00:06:58,180
Moral the story, cache
objects where possible

157
00:06:58,180 --> 00:07:02,180
and avoid the with statement.

158
00:07:02,180 --> 00:07:04,460
The second, somewhat
sucky thing,

159
00:07:04,460 --> 00:07:08,120
that we want to talk about
here is the eval statement.

160
00:07:08,120 --> 00:07:10,250
Now eval kind of
gets a little bit

161
00:07:10,250 --> 00:07:12,910
of a bad rap in the
JavaScript field,

162
00:07:12,910 --> 00:07:14,270
probably for good reason.

163
00:07:14,270 --> 00:07:17,060
Because it can very much
effect legibility in your code

164
00:07:17,060 --> 00:07:23,050
as well as significantly impact
your ability to debug and incur

165
00:07:23,050 --> 00:07:25,440
a bunch of performance
penalties for you,

166
00:07:25,440 --> 00:07:26,580
which are often terrible.

167
00:07:26,580 --> 00:07:30,002
So let's take a look at
why eval should be avoided.

168
00:07:30,002 --> 00:07:31,710
Take a look at this
function here, called

169
00:07:31,710 --> 00:07:33,230
assign regiment motto.

170
00:07:33,230 --> 00:07:35,230
It's going to take in the
number of the regiment

171
00:07:35,230 --> 00:07:38,260
as well as the motto
for that regiment.

172
00:07:38,260 --> 00:07:40,740
Not eval method is
going to take a string

173
00:07:40,740 --> 00:07:43,410
in as a parameter, any string.

174
00:07:43,410 --> 00:07:46,310
And it will start up
the JavaScript compiler

175
00:07:46,310 --> 00:07:49,610
and treat that string as
if it was some line of code

176
00:07:49,610 --> 00:07:53,470
to actually execute
in JavaScript.

177
00:07:53,470 --> 00:07:56,790
If we passed in the
regiment number two, as well

178
00:07:56,790 --> 00:07:59,610
as the best of the best,
which is their motto,

179
00:07:59,610 --> 00:08:03,980
into the assigned regiment motto
function, this is what happens.

180
00:08:03,980 --> 00:08:08,050
The eval method takes all
the pieces of that string

181
00:08:08,050 --> 00:08:11,230
and puts them together
into one string.

182
00:08:11,230 --> 00:08:14,630
So what we get out of that
is a regiment2 some object

183
00:08:14,630 --> 00:08:18,740
somewhere, dot motto,
referencing the motto property,

184
00:08:18,740 --> 00:08:21,160
becomes the string
the best of the best.

185
00:08:21,160 --> 00:08:23,490
This may seem
great but it really

186
00:08:23,490 --> 00:08:26,030
opens up a lot of
possibility for error.

187
00:08:26,030 --> 00:08:30,100
What if there was, for
example, an apostrophe existing

188
00:08:30,100 --> 00:08:31,690
in the motto?

189
00:08:31,690 --> 00:08:34,150
For example, what if the
first regiment's motto

190
00:08:34,150 --> 00:08:35,770
was the King's own?

191
00:08:35,770 --> 00:08:38,059
See that apostrophe in there?

192
00:08:38,059 --> 00:08:41,409
Well, what happens here is
that the resulting code, when

193
00:08:41,409 --> 00:08:43,630
it finally gets
eval-ed, will actually

194
00:08:43,630 --> 00:08:46,720
be invalid because of
that extra apostrophe.

195
00:08:46,720 --> 00:08:51,780
It's going to make the compiler
think the string is complete

196
00:08:51,780 --> 00:08:52,980
until it sees more stuff.

197
00:08:52,980 --> 00:08:55,480
And then it's going to mark
the code as invalid JavaScript.

198
00:08:55,480 --> 00:08:57,331
Whomp, whomp.

199
00:08:57,331 --> 00:08:58,830
Something else to
note here is there

200
00:08:58,830 --> 00:09:04,010
we may not have any idea at all
what broke our code, especially

201
00:09:04,010 --> 00:09:06,550
if the data that gets
passed in as motto

202
00:09:06,550 --> 00:09:08,930
is not something
we ever examine.

203
00:09:08,930 --> 00:09:10,810
Was it number that was busted?

204
00:09:10,810 --> 00:09:12,340
Was it motto that was busted?

205
00:09:12,340 --> 00:09:13,430
Was it something else?

206
00:09:13,430 --> 00:09:18,550
It gets really in the way
of us being able to debug.

207
00:09:18,550 --> 00:09:23,410
Eval can be useful in a
tiny fraction of the ways

208
00:09:23,410 --> 00:09:25,370
that it actually gets used.

209
00:09:25,370 --> 00:09:27,680
For example, we use it
here in our executor

210
00:09:27,680 --> 00:09:30,440
to evaluate your
code at Code School.

211
00:09:30,440 --> 00:09:35,960
But mostly, eval is like taking
a bazooka to a beehive, OK?

212
00:09:35,960 --> 00:09:37,350
It's bad news.

213
00:09:37,350 --> 00:09:38,990
You want to try not to do that.

214
00:09:38,990 --> 00:09:41,540
Though it may end your
existing problems,

215
00:09:41,540 --> 00:09:44,730
it's probably not the ideal
way to solve that problem.

216
00:09:44,730 --> 00:09:47,290
And furthermore you may
end up with more problems

217
00:09:47,290 --> 00:09:48,720
then you started with.

218
00:09:48,720 --> 00:09:50,770
But if eval is a
must for some reason,

219
00:09:50,770 --> 00:09:52,720
you want to eval as
little as possible.

220
00:09:52,720 --> 00:09:56,210
It might be useful for dynamic
code, or uncontrollable data.

221
00:09:56,210 --> 00:09:59,080
But it's still treating
the string as a program

222
00:09:59,080 --> 00:10:02,650
to very expensively compile.

223
00:10:02,650 --> 00:10:05,340
So in those cases where we
can't avoid an eval statement,

224
00:10:05,340 --> 00:10:08,310
for whatever reason,
and we usually can,

225
00:10:08,310 --> 00:10:11,620
we at least want to
minimize the operations

226
00:10:11,620 --> 00:10:13,700
that that eval statement
needs to engage

227
00:10:13,700 --> 00:10:17,230
in when it's a little,
mini program starts up.

228
00:10:17,230 --> 00:10:21,400
That's going to benefit us in
having added debug capability.

229
00:10:21,400 --> 00:10:26,280
You can see here that instead
of including the entire portion

230
00:10:26,280 --> 00:10:28,660
of the string
inside that string,

231
00:10:28,660 --> 00:10:32,020
we only eval the
regiment and its number,

232
00:10:32,020 --> 00:10:36,450
and know that the motto
will be available.

233
00:10:36,450 --> 00:10:39,120
Thus we can just take the motto
that we pass into our function

234
00:10:39,120 --> 00:10:41,070
and assign it to
that motto property

235
00:10:41,070 --> 00:10:45,290
once the regiment object
had been evaluated by eval.

236
00:10:45,290 --> 00:10:49,220
And now if I were to log out
console.log regiment2.motto you

237
00:10:49,220 --> 00:10:52,680
can see that I get, the King's
own, complete with apostrophe,

238
00:10:52,680 --> 00:10:54,890
no problem.

239
00:10:54,890 --> 00:10:56,920
And the best practice
we want to give you here

240
00:10:56,920 --> 00:10:59,490
is that for all those basic
mappings between objects

241
00:10:59,490 --> 00:11:03,010
and numbers, you want to instead
use your data structures.

242
00:11:03,010 --> 00:11:05,920
Eval is most often misused
with just that sort of mapping,

243
00:11:05,920 --> 00:11:08,540
trying to get objects
with numbers on them.

244
00:11:08,540 --> 00:11:10,580
So we want to make
sure that you try

245
00:11:10,580 --> 00:11:13,095
to use arrays, which
are much more efficient.

246
00:11:13,095 --> 00:11:14,651
Let's take a look.

247
00:11:14,651 --> 00:11:16,650
We'll start up a variable
here called regiments.

248
00:11:16,650 --> 00:11:18,930
And we'll put all of
the regiment objects

249
00:11:18,930 --> 00:11:20,660
inside that array.

250
00:11:20,660 --> 00:11:23,450
And then there's no need to
number the variable name,

251
00:11:23,450 --> 00:11:27,030
if your objects are
already in order.

252
00:11:27,030 --> 00:11:32,620
You want to build your own data
with all of its usage in mind.

253
00:11:32,620 --> 00:11:35,330
Inside our function now we can
just do regiments, and then

254
00:11:35,330 --> 00:11:39,090
call the index on
the number passed in,

255
00:11:39,090 --> 00:11:41,610
dot motto equals the motto.

256
00:11:41,610 --> 00:11:44,760
And instead of eval, we can
use that associative nature

257
00:11:44,760 --> 00:11:47,500
of the array to build all
the dynamic mapping that we

258
00:11:47,500 --> 00:11:49,040
could ever desire.

259
00:11:49,040 --> 00:11:50,870
Really cool,
referencing an array

260
00:11:50,870 --> 00:11:56,560
is much faster than parsing and
running an entire new program

261
00:11:56,560 --> 00:11:59,190
within your program.

262
00:11:59,190 --> 00:12:03,260
But, but, but what if I need
to read and write JSON data

263
00:12:03,260 --> 00:12:05,280
that's all stringy?

264
00:12:05,280 --> 00:12:06,110
Chill, homey.

265
00:12:06,110 --> 00:12:09,790
Using eval to parse
your JSON is typically

266
00:12:09,790 --> 00:12:13,290
regarded as very vulnerable,
often very unsafe, right?

267
00:12:13,290 --> 00:12:16,600
Because eval is going to
evaluate any script that gets

268
00:12:16,600 --> 00:12:17,250
passed in.

269
00:12:17,250 --> 00:12:19,060
Let's take a look.

270
00:12:19,060 --> 00:12:21,740
So here I've got some
string-ified JSON data

271
00:12:21,740 --> 00:12:25,360
being assigned to the
variable regiments, JSON.

272
00:12:25,360 --> 00:12:27,410
You can see inside this
string-ified JSON data

273
00:12:27,410 --> 00:12:30,860
that eventually it's going to
become an object that contains

274
00:12:30,860 --> 00:12:34,030
other objects, which are
the numbered regiments.

275
00:12:34,030 --> 00:12:36,780
If I wanted to eval
that and pass it back

276
00:12:36,780 --> 00:12:38,590
to a regiments value I could.

277
00:12:38,590 --> 00:12:42,170
But what if this data
came from somewhere

278
00:12:42,170 --> 00:12:45,004
else, as does a
lot of JSON data?

279
00:12:45,004 --> 00:12:47,170
Well that could be a potential
vulnerability, right?

280
00:12:47,170 --> 00:12:49,900
Because you have no idea what's
coming in terms of a script

281
00:12:49,900 --> 00:12:52,070
through code injection.

282
00:12:52,070 --> 00:12:53,120
Bad news.

283
00:12:53,120 --> 00:12:55,000
Avoid it.

284
00:12:55,000 --> 00:12:57,090
But what can I do
if I actually need

285
00:12:57,090 --> 00:13:00,160
to use JSON data that
has been string-ified

286
00:13:00,160 --> 00:13:01,380
and I need to parse it?

287
00:13:01,380 --> 00:13:05,070
Well, you can use
JSON.parse to insure

288
00:13:05,070 --> 00:13:08,300
only the JSON is accepted.

289
00:13:08,300 --> 00:13:11,520
JSON.parse will only
recognize JSON and now

290
00:13:11,520 --> 00:13:16,050
compile and scripts, avoiding
all those security issues

291
00:13:16,050 --> 00:13:18,420
from malicious incoming data.

292
00:13:18,420 --> 00:13:21,440
Additionally, there's going
to be some libraries that

293
00:13:21,440 --> 00:13:23,600
used to employee
eval under the hood,

294
00:13:23,600 --> 00:13:27,500
but now use JSON.parse
in all of those places,

295
00:13:27,500 --> 00:13:30,040
and that includes jquery.

296
00:13:30,040 --> 00:13:31,950
You can see here, that
if I call JSON.parse

297
00:13:31,950 --> 00:13:34,740
on regiments JSON
all of that code

298
00:13:34,740 --> 00:13:38,740
would become a very
nice regiments object.

299
00:13:38,740 --> 00:13:42,130
The moral of the eval story is
that there is usually always

300
00:13:42,130 --> 00:13:45,782
a way to circumvent
the use of eval

301
00:13:45,782 --> 00:13:47,490
through the proper
use of data structures

302
00:13:47,490 --> 00:13:49,600
or other methods
designed specifically

303
00:13:49,600 --> 00:13:52,350
to do what you're
trying to use eval for.

304
00:13:52,350 --> 00:13:54,760
So try to stay away from it.

305
00:13:54,760 --> 00:13:58,144
Next up, the third
slightly sucky something

306
00:13:58,144 --> 00:13:59,810
that we would like
to make you aware of,

307
00:13:59,810 --> 00:14:03,390
is leaving off your
brackets in your code.

308
00:14:03,390 --> 00:14:06,522
Just because we can
leave curly braces off

309
00:14:06,522 --> 00:14:07,980
of a single statement
block of code

310
00:14:07,980 --> 00:14:11,660
does not mean that we
should because it's cool.

311
00:14:11,660 --> 00:14:12,670
Check this out.

312
00:14:12,670 --> 00:14:15,890
In JavaScript I could
write if is King,

313
00:14:15,890 --> 00:14:19,080
then I could make
the weapon Excalibur.

314
00:14:19,080 --> 00:14:21,922
Else I could make the
weapon the long sword.

315
00:14:21,922 --> 00:14:23,630
Notice I've got no
brackets on this code,

316
00:14:23,630 --> 00:14:25,740
because it is true that
when a condition or a loop

317
00:14:25,740 --> 00:14:27,950
has only one
statement to execute,

318
00:14:27,950 --> 00:14:30,640
the brackets are not necessary.

319
00:14:30,640 --> 00:14:35,370
But using curly braces is
not just about excellent code

320
00:14:35,370 --> 00:14:38,540
organization or excellent
code legibility,

321
00:14:38,540 --> 00:14:40,280
although it is
about those things.

322
00:14:40,280 --> 00:14:44,150
It is also about being a
very good team player, right?

323
00:14:44,150 --> 00:14:46,850
It's about having very
good code citizenship.

324
00:14:46,850 --> 00:14:49,580
And here's why.

325
00:14:49,580 --> 00:14:52,550
But what if new code
needs to be added, man?

326
00:14:52,550 --> 00:14:55,250
If you require bracket
analysis in order

327
00:14:55,250 --> 00:14:57,210
to ensure that every
new bit of code

328
00:14:57,210 --> 00:15:00,320
is properly scoped
to the right block,

329
00:15:00,320 --> 00:15:03,840
you'll be very unpopular.

330
00:15:03,840 --> 00:15:05,250
So say there's a new guy, right?

331
00:15:05,250 --> 00:15:09,920
And he's coming in to work on my
terribly unbracketed code here.

332
00:15:09,920 --> 00:15:12,306
And he needs to add some
functionality that's

333
00:15:12,306 --> 00:15:12,930
been requested.

334
00:15:12,930 --> 00:15:14,920
So he puts these
two extra statements

335
00:15:14,920 --> 00:15:17,480
into both the if block
and the else block.

336
00:15:17,480 --> 00:15:21,690
Turns out though that this else
is now going to cause an error.

337
00:15:21,690 --> 00:15:24,190
That's because it looks
for a preceding if block

338
00:15:24,190 --> 00:15:25,910
and doesn't find one.

339
00:15:25,910 --> 00:15:26,410
What?

340
00:15:26,410 --> 00:15:27,560
I see an if block there.

341
00:15:27,560 --> 00:15:30,020
Oh guess what,
since there are no

342
00:15:30,020 --> 00:15:32,220
brackets around those
extra two statements

343
00:15:32,220 --> 00:15:35,920
that else block doesn't know
which if it's associated with.

344
00:15:35,920 --> 00:15:38,210
That's because
those two statements

345
00:15:38,210 --> 00:15:42,770
he added in the if block are not
actually part of the if block.

346
00:15:42,770 --> 00:15:45,760


347
00:15:45,760 --> 00:15:48,020
But even though we
found that error

348
00:15:48,020 --> 00:15:50,850
through the else erroring
out, missing brackets

349
00:15:50,850 --> 00:15:52,300
don't always generate errors.

350
00:15:52,300 --> 00:15:55,140
Sometimes we get perfectly
valid JavaScript,

351
00:15:55,140 --> 00:15:57,280
especially in the example
of conditional blocks.

352
00:15:57,280 --> 00:16:00,540
And then we get a whole bunch
of undesired executions.

353
00:16:00,540 --> 00:16:01,560
Let's take a look.

354
00:16:01,560 --> 00:16:03,500
So we'll get rid of
our else block here.

355
00:16:03,500 --> 00:16:06,660
And now you can see we've just
got the if is King portion.

356
00:16:06,660 --> 00:16:10,640
Now even if it is King
is false, right, well we

357
00:16:10,640 --> 00:16:12,570
will skip the weapon
equals Excalibur.

358
00:16:12,570 --> 00:16:16,260
But we will get the
alert to be called.

359
00:16:16,260 --> 00:16:18,980
We will also get
a call to remove

360
00:16:18,980 --> 00:16:22,594
from armory the sword Excalibur.

361
00:16:22,594 --> 00:16:24,760
That's because without the
else to trigger an error,

362
00:16:24,760 --> 00:16:28,560
the JS interpreter just sees
this code written like this.

363
00:16:28,560 --> 00:16:31,710
If is King, assign
Excalibur to the weapon,

364
00:16:31,710 --> 00:16:33,980
and then who cares if
it was is King or not,

365
00:16:33,980 --> 00:16:36,250
do these two steps,
alert this message

366
00:16:36,250 --> 00:16:38,845
and remove from
armory Excalibur.

367
00:16:38,845 --> 00:16:41,350


368
00:16:41,350 --> 00:16:45,180
So undesired executions
often suck, right?

369
00:16:45,180 --> 00:16:48,740
So please, be cool,
bracket your code.

370
00:16:48,740 --> 00:16:50,460
It's better for organization.

371
00:16:50,460 --> 00:16:52,280
People can read
your code better.

372
00:16:52,280 --> 00:16:54,640
And it will often prevent
errors you did not

373
00:16:54,640 --> 00:16:56,420
know we're going to happen.

374
00:16:56,420 --> 00:17:00,890
Brackets are a two character--
tap, tap-- sacrifice

375
00:17:00,890 --> 00:17:04,500
that is going to help
you in the long run.

376
00:17:04,500 --> 00:17:07,000
We're going to give you some
challenges now about stuff that

377
00:17:07,000 --> 00:17:07,579
sucks.

378
00:17:07,579 --> 00:17:10,879
And we'll see you back
in the next section.

379
00:17:10,879 --> 00:17:12,776