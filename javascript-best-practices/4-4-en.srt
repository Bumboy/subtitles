1
00:00:00,000 --> 00:00:01,999


2
00:00:01,999 --> 00:00:02,540
Welcome back.

3
00:00:02,540 --> 00:00:05,390
Hope you enjoyed working
with your global imports

4
00:00:05,390 --> 00:00:06,930
in your anonymous closures.

5
00:00:06,930 --> 00:00:08,310
In this section,
we'll be talking

6
00:00:08,310 --> 00:00:11,170
about how to augment
your modules.

7
00:00:11,170 --> 00:00:12,810
So yeah, modules
often need to have

8
00:00:12,810 --> 00:00:15,470
additions to their
existing properties.

9
00:00:15,470 --> 00:00:19,050
If you've ever worked in some
large code base of document,

10
00:00:19,050 --> 00:00:21,170
you're going to know
the value of splitting

11
00:00:21,170 --> 00:00:24,050
functionality
between many files.

12
00:00:24,050 --> 00:00:26,960
So here, in our armory.js
file is all that code

13
00:00:26,960 --> 00:00:29,420
that we built in the
last two sections

14
00:00:29,420 --> 00:00:31,190
where the armory module is.

15
00:00:31,190 --> 00:00:33,860
Over here, we'll have
a global kingdom.js

16
00:00:33,860 --> 00:00:36,250
where all of the behavior
globally for the kingdom

17
00:00:36,250 --> 00:00:36,750
is kept.

18
00:00:36,750 --> 00:00:40,070
And there, you can see our
global variable wartime

19
00:00:40,070 --> 00:00:43,370
with the truth value
signaling we are at war.

20
00:00:43,370 --> 00:00:45,930
Now, providing extra
properties for existing models

21
00:00:45,930 --> 00:00:48,690
can be done through a
process called augmentation.

22
00:00:48,690 --> 00:00:51,080
In a separate file,
we'll keep a function,

23
00:00:51,080 --> 00:00:55,180
which will add values or
functionality to our existing

24
00:00:55,180 --> 00:00:56,230
armory.

25
00:00:56,230 --> 00:00:59,400
Here, we have the
warchest.js file.

26
00:00:59,400 --> 00:01:01,440
That's going to
be augmenter file.

27
00:01:01,440 --> 00:01:03,380
It's going to add
functionality to the armory

28
00:01:03,380 --> 00:01:05,720
in the event of war.

29
00:01:05,720 --> 00:01:09,540
Now, augmentation is almost
done like a re-creation

30
00:01:09,540 --> 00:01:11,530
of the existing namespace.

31
00:01:11,530 --> 00:01:12,970
You can see here
that we're going

32
00:01:12,970 --> 00:01:15,930
to be using the same sort of
immediately invoked function

33
00:01:15,930 --> 00:01:18,240
expression that's going
to return something

34
00:01:18,240 --> 00:01:21,910
to the armory existing
global namespace.

35
00:01:21,910 --> 00:01:25,880
That's why there's no of VAR key
word on that armory variable.

36
00:01:25,880 --> 00:01:28,030
Inside of our
function, now, we're

37
00:01:28,030 --> 00:01:31,730
going to pass the old namespace.

38
00:01:31,730 --> 00:01:32,490
Right?

39
00:01:32,490 --> 00:01:35,800
And since it is our old
namespace and existing

40
00:01:35,800 --> 00:01:37,870
as a global, we're going
to go ahead and need

41
00:01:37,870 --> 00:01:40,640
to use our import knowledge.

42
00:01:40,640 --> 00:01:43,840
And we'll import that
old namespace as a local

43
00:01:43,840 --> 00:01:45,680
in order to make
some modifications

44
00:01:45,680 --> 00:01:49,010
to a temporary object
that it creates.

45
00:01:49,010 --> 00:01:51,250
Of course, in order
to augment our module

46
00:01:51,250 --> 00:01:53,710
and return a new module with
all the old stuff in it,

47
00:01:53,710 --> 00:01:55,730
we're going to need to
pass in the old module.

48
00:01:55,730 --> 00:01:59,240
And there it is, armory.

49
00:01:59,240 --> 00:02:03,730
Notice the result of this
immediately invoked function

50
00:02:03,730 --> 00:02:06,960
expression that
uses the old module

51
00:02:06,960 --> 00:02:09,919
will be eventually
an object that gets

52
00:02:09,919 --> 00:02:15,240
returned and stored back in
the old armory namespace.

53
00:02:15,240 --> 00:02:18,160
So what's the stuff that we want
to close up and add in here?

54
00:02:18,160 --> 00:02:19,770
Well we got some
local variables here

55
00:02:19,770 --> 00:02:22,190
called oil barrels of
which there are 1,000.

56
00:02:22,190 --> 00:02:25,070
We've also got some
catapults to add to our war

57
00:02:25,070 --> 00:02:28,600
chest-- stone sling, rock
reign, and the giant's arm.

58
00:02:28,600 --> 00:02:31,440
We've also got a new method
called Assign Catapult.

59
00:02:31,440 --> 00:02:33,450
That's going to take in
some regiment number,

60
00:02:33,450 --> 00:02:34,980
and it's going to
hook a regiment up

61
00:02:34,980 --> 00:02:36,670
with a sweet catapult
and, of course,

62
00:02:36,670 --> 00:02:39,350
some oil barrels to
toss at some orcs.

63
00:02:39,350 --> 00:02:42,360
Notice here that our public
functionality, namely

64
00:02:42,360 --> 00:02:44,810
the Assign Catapult
method, is being

65
00:02:44,810 --> 00:02:49,580
added as a property on the
old namespace object, which

66
00:02:49,580 --> 00:02:52,550
is local to this function.

67
00:02:52,550 --> 00:02:55,950
So once we've added all
of our new private values

68
00:02:55,950 --> 00:02:58,140
and all of our new
public functionality

69
00:02:58,140 --> 00:03:00,550
on the existing
object, then we'll

70
00:03:00,550 --> 00:03:03,710
return the modified module.

71
00:03:03,710 --> 00:03:08,070
Because now, old ns has an extra
public property, as well as

72
00:03:08,070 --> 00:03:12,640
these new closures-- oil
barrels and catapults.

73
00:03:12,640 --> 00:03:14,751
Now, augmentation is super cool.

74
00:03:14,751 --> 00:03:15,250
It's great.

75
00:03:15,250 --> 00:03:15,750
Right?

76
00:03:15,750 --> 00:03:18,150
It adds functionality
whenever you need it.

77
00:03:18,150 --> 00:03:20,360
And it's especially great
for public functionality,

78
00:03:20,360 --> 00:03:23,530
but we want you to be
aware of one thing.

79
00:03:23,530 --> 00:03:26,540
And that's that
previous private data

80
00:03:26,540 --> 00:03:29,130
from your old file
and your old function

81
00:03:29,130 --> 00:03:31,700
that you used to build
your original namespace,

82
00:03:31,700 --> 00:03:34,830
all of that private
closure data will not

83
00:03:34,830 --> 00:03:39,900
be accessible to any of your
new properties in your new file.

84
00:03:39,900 --> 00:03:42,240
The augmented properties
will have access

85
00:03:42,240 --> 00:03:44,150
to their new private state.

86
00:03:44,150 --> 00:03:46,090
And all those public
methods over here

87
00:03:46,090 --> 00:03:50,500
will also have access to
the private data right here.

88
00:03:50,500 --> 00:03:53,710
But none of these
public or private values

89
00:03:53,710 --> 00:03:57,830
will have access to the closed
data from the previous file.

90
00:03:57,830 --> 00:04:00,150
Taking a look, remember
that closures are always

91
00:04:00,150 --> 00:04:05,440
produced by the function itself
and never the returned object.

92
00:04:05,440 --> 00:04:08,930
So if we build a new function
expression in our war chest

93
00:04:08,930 --> 00:04:12,040
file, right, it's not going
to recreate all those closure

94
00:04:12,040 --> 00:04:14,210
references back to
the old function that

95
00:04:14,210 --> 00:04:16,480
was made in the previous file.

96
00:04:16,480 --> 00:04:18,060
Very important to note.

97
00:04:18,060 --> 00:04:20,760
That means that any new
properties, not going

98
00:04:20,760 --> 00:04:24,780
to have any access to all that
old private data that we made.

99
00:04:24,780 --> 00:04:26,180
They will still be there.

100
00:04:26,180 --> 00:04:28,060
The earlier public
properties that we

101
00:04:28,060 --> 00:04:30,530
had produced in the previous
function, all the references

102
00:04:30,530 --> 00:04:33,380
to the closures will
still be there for that.

103
00:04:33,380 --> 00:04:36,150
But any new properties
will not have access

104
00:04:36,150 --> 00:04:40,800
to the old closed data,
only to its new closed data.

105
00:04:40,800 --> 00:04:43,300
So the best practice here
with regard to augmentation

106
00:04:43,300 --> 00:04:47,380
is to group your file content
around your needed data.

107
00:04:47,380 --> 00:04:51,330
Any cross file private state
build that you could manage

108
00:04:51,330 --> 00:04:53,440
won't even have the
level of privacy

109
00:04:53,440 --> 00:04:55,150
of just a single closure.

110
00:04:55,150 --> 00:04:57,370
And often, it leads
to hard to manage code

111
00:04:57,370 --> 00:04:59,920
figuring out how the modules
are augmenting each other

112
00:04:59,920 --> 00:05:01,470
or referencing each other.

113
00:05:01,470 --> 00:05:04,680
So the best practice is just
to keep your file grouped

114
00:05:04,680 --> 00:05:07,810
around data that's
related to each other

115
00:05:07,810 --> 00:05:09,170
and that need each other.

116
00:05:09,170 --> 00:05:12,390
You can see here, though,
in our cool warchest.js file

117
00:05:12,390 --> 00:05:14,910
that Assign Catapult
doesn't need

118
00:05:14,910 --> 00:05:17,210
any access to the
old private data.

119
00:05:17,210 --> 00:05:18,990
So we don't have any
broken references,

120
00:05:18,990 --> 00:05:24,480
and our file is grouped
very well for augmentation.

121
00:05:24,480 --> 00:05:27,620
So now we will send you over
to work on your augmentation

122
00:05:27,620 --> 00:05:29,300
skills in the challenges.

123
00:05:29,300 --> 00:05:30,930
And that, ladies
and gentlemen, is

124
00:05:30,930 --> 00:05:32,860
the end of JavaScript
Best Practices.

125
00:05:32,860 --> 00:05:35,234
Thanks so much for hanging
with us here at Code School,

126
00:05:35,234 --> 00:05:36,400
and we'll see you real soon.

127
00:05:36,400 --> 00:05:40,590


128
00:05:40,590 --> 00:05:43,810
Sorry had to belch.

129
00:05:43,810 --> 00:05:44,600
Course code.

130
00:05:44,600 --> 00:05:46,620
What's code?

131
00:05:46,620 --> 00:05:47,680
Cood.

132
00:05:47,680 --> 00:05:49,610
I'm going to reveal
your code now.

133
00:05:49,610 --> 00:05:53,250


134
00:05:53,250 --> 00:05:54,800
Ah!

135
00:05:54,800 --> 00:06:01,185