1
00:00:00,000 --> 00:00:01,860


2
00:00:01,860 --> 00:00:02,360
Hey, guys.

3
00:00:02,360 --> 00:00:04,864
Welcome back to the last
section of a level two.

4
00:00:04,864 --> 00:00:06,280
In this section,
we'll be learning

5
00:00:06,280 --> 00:00:11,230
about how to build a generalized
speed class that will average

6
00:00:11,230 --> 00:00:14,740
that times that your
code takes to run.

7
00:00:14,740 --> 00:00:17,910
So, in our last section, we
looked at a quick and dirty way

8
00:00:17,910 --> 00:00:20,790
of finding how long
your code actually

9
00:00:20,790 --> 00:00:23,810
takes to run inside the
console using console.time.

10
00:00:23,810 --> 00:00:25,320
In this section,
we will actually

11
00:00:25,320 --> 00:00:27,750
be averaging multiple
times together

12
00:00:27,750 --> 00:00:29,980
to get a really accurate
assessment of how

13
00:00:29,980 --> 00:00:31,910
your code is performing.

14
00:00:31,910 --> 00:00:35,537
Now, to get accurate average
measurements for your code,

15
00:00:35,537 --> 00:00:37,620
we're going to need to be
able to retrieve and use

16
00:00:37,620 --> 00:00:40,470
actual numerical time data.

17
00:00:40,470 --> 00:00:43,387
This is data that we can
actually manipulate, right?

18
00:00:43,387 --> 00:00:44,970
So, first thing we're
going to do here

19
00:00:44,970 --> 00:00:47,210
is examine the
JavaScript Date object,

20
00:00:47,210 --> 00:00:50,640
which will provide us
with that numerical data.

21
00:00:50,640 --> 00:00:53,650
If we establish a variable
here called rightNow

22
00:00:53,650 --> 00:00:56,690
and we set it equal
to a new Date object,

23
00:00:56,690 --> 00:00:59,200
you can see that if we logged
out that rightNow variable,

24
00:00:59,200 --> 00:01:02,590
we get a whole bunch of
date information back.

25
00:01:02,590 --> 00:01:06,190
You can see it was Monday,
April 10, 2014, when

26
00:01:06,190 --> 00:01:11,190
we called this console.log--
gives you a time value as well

27
00:01:11,190 --> 00:01:12,780
as a time zone.

28
00:01:12,780 --> 00:01:14,470
Now, the new Date
object is immediately

29
00:01:14,470 --> 00:01:16,780
going to capture the
current date and time,

30
00:01:16,780 --> 00:01:19,810
and that's going to be measured
in milliseconds since 12

31
00:01:19,810 --> 00:01:23,561
o'clock AM on January 1, 1970.

32
00:01:23,561 --> 00:01:25,060
Apparently, that's
when they thought

33
00:01:25,060 --> 00:01:26,700
computers should use time.

34
00:01:26,700 --> 00:01:28,937
1970-- that's when time
began for computers.

35
00:01:28,937 --> 00:01:31,800


36
00:01:31,800 --> 00:01:34,690
Now, the cool thing
about numerical date data

37
00:01:34,690 --> 00:01:38,520
is that if we put a unary plus
operator in front of our Date

38
00:01:38,520 --> 00:01:40,960
object variable,
it's going to ask it

39
00:01:40,960 --> 00:01:44,660
for the specific
value in milliseconds.

40
00:01:44,660 --> 00:01:47,440
That means that this
line of console.log

41
00:01:47,440 --> 00:01:50,260
is the same exact thing
as declaring a new Number

42
00:01:50,260 --> 00:01:53,776
object on the date variable.

43
00:01:53,776 --> 00:01:55,150
Now, when we get
that logged out,

44
00:01:55,150 --> 00:01:59,800
we see that we get something
like one trillion milliseconds.

45
00:01:59,800 --> 00:02:01,640
So, there's a few
of those in there.

46
00:02:01,640 --> 00:02:05,150
Now, since we know we already
want an actual number and not

47
00:02:05,150 --> 00:02:06,770
all of that
interesting date data,

48
00:02:06,770 --> 00:02:09,240
we can go ahead and
assign the variable

49
00:02:09,240 --> 00:02:13,070
to be the numerical version
of our new Date object

50
00:02:13,070 --> 00:02:16,600
just by moving that plus over
to be in front of the call

51
00:02:16,600 --> 00:02:17,760
to new Date.

52
00:02:17,760 --> 00:02:20,800


53
00:02:20,800 --> 00:02:24,110
So moving forward, we can
even declare an end time--

54
00:02:24,110 --> 00:02:26,610
a new time-- on
a new Date object

55
00:02:26,610 --> 00:02:29,690
using that same plus
new date syntax.

56
00:02:29,690 --> 00:02:33,000
We're going to get a millisecond
value for that particular time,

57
00:02:33,000 --> 00:02:35,000
and now, you can probably
see what's coming

58
00:02:35,000 --> 00:02:37,860
and how we're going to use this.

59
00:02:37,860 --> 00:02:40,940
We'll declare a new
variable called elapsedTime,

60
00:02:40,940 --> 00:02:44,795
and we set it equal to
endTime minus rightNow.

61
00:02:44,795 --> 00:02:45,920
And what does that give us?

62
00:02:45,920 --> 00:02:47,710
That gives us the
amount of time that

63
00:02:47,710 --> 00:02:50,120
elapsed between when we
first declared our first Date

64
00:02:50,120 --> 00:02:53,760
object and our
final Date object.

65
00:02:53,760 --> 00:02:54,260
Cool.

66
00:02:54,260 --> 00:02:57,740
So now, we know how to generate
Date objects that will hand us

67
00:02:57,740 --> 00:03:00,220
data that we can
manipulate for time,

68
00:03:00,220 --> 00:03:03,270
and that will let us see
how much time has passed

69
00:03:03,270 --> 00:03:05,430
between two events in code.

70
00:03:05,430 --> 00:03:09,220
So now, with that, we can begin
to create our very first speed

71
00:03:09,220 --> 00:03:10,120
test class.

72
00:03:10,120 --> 00:03:11,430
Let's take a look at that.

73
00:03:11,430 --> 00:03:14,630
So, the first thing we'll do
is we'll establish a SpeedTest

74
00:03:14,630 --> 00:03:17,970
constructor function,
and inside the parameters

75
00:03:17,970 --> 00:03:20,560
of that function, we will
have three parameters,

76
00:03:20,560 --> 00:03:23,990
testImplement, and that will
be the specific code that we

77
00:03:23,990 --> 00:03:26,640
want to test for
performance speed.

78
00:03:26,640 --> 00:03:30,220
We're going to encapsulate it
in its own function later on

79
00:03:30,220 --> 00:03:32,300
and pass it in as an expression.

80
00:03:32,300 --> 00:03:34,507
The second parameter
is called testParams,

81
00:03:34,507 --> 00:03:36,090
and that's going to
represent whatever

82
00:03:36,090 --> 00:03:38,790
parameters our
test code actually

83
00:03:38,790 --> 00:03:41,400
needs in order to
work correctly.

84
00:03:41,400 --> 00:03:42,940
This might be an
array of values,

85
00:03:42,940 --> 00:03:46,290
or it might be a single
value that testImplement

86
00:03:46,290 --> 00:03:49,200
will need in order to work.

87
00:03:49,200 --> 00:03:51,210
Finally, the last
parameter is the amount

88
00:03:51,210 --> 00:03:53,280
of repetitions because why?

89
00:03:53,280 --> 00:03:56,140
The higher the repetitions
that we use, the more reliable

90
00:03:56,140 --> 00:03:59,140
our average is
actually going to be.

91
00:03:59,140 --> 00:04:02,430
So now, let's flesh out
what each individual speed

92
00:04:02,430 --> 00:04:05,530
test object will
actually look like.

93
00:04:05,530 --> 00:04:07,710
Here, you can see we've
got testImplement going

94
00:04:07,710 --> 00:04:10,730
in a testImplement
property of a new object.

95
00:04:10,730 --> 00:04:12,500
Same thing for testParams.

96
00:04:12,500 --> 00:04:15,360
But then here, in our
repetitions property

97
00:04:15,360 --> 00:04:17,930
of our speed test
object, we're going

98
00:04:17,930 --> 00:04:20,950
to allow the repetitions
to be optional,

99
00:04:20,950 --> 00:04:24,040
and we're going to use our
logical assignment best

100
00:04:24,040 --> 00:04:25,430
practice to do that.

101
00:04:25,430 --> 00:04:28,900
You can see that if the
speed test constructor gets

102
00:04:28,900 --> 00:04:30,800
past some repetitions,
we're going

103
00:04:30,800 --> 00:04:32,570
to go ahead and take
those repetitions

104
00:04:32,570 --> 00:04:34,250
and assign it to the property.

105
00:04:34,250 --> 00:04:37,970
However, if whatever user
is using the speed test

106
00:04:37,970 --> 00:04:39,904
doesn't pass in any
repetitions, we're

107
00:04:39,904 --> 00:04:41,320
going to go ahead
and just default

108
00:04:41,320 --> 00:04:44,340
that to be 10,000 total
repetitions so that we

109
00:04:44,340 --> 00:04:46,350
get a good, reliable estimate.

110
00:04:46,350 --> 00:04:48,630
And finally, we'll set
up an average property

111
00:04:48,630 --> 00:04:52,800
and assign it to zero at first,
before we have calculated it.

112
00:04:52,800 --> 00:04:53,300
All right.

113
00:04:53,300 --> 00:04:55,590
So that's our SpeedTest
constructor function.

114
00:04:55,590 --> 00:04:57,610
What we're going to
do is size that down.

115
00:04:57,610 --> 00:04:59,040
Scoot it over here.

116
00:04:59,040 --> 00:05:02,600
And now, we need a method
inside of our speed test object,

117
00:05:02,600 --> 00:05:05,180
but we're not going to add that
to the constructor function

118
00:05:05,180 --> 00:05:08,330
because we want every
single speed test object

119
00:05:08,330 --> 00:05:10,600
to have this method
or access to it.

120
00:05:10,600 --> 00:05:14,080
So, we are going to give that
to the speed test prototype.

121
00:05:14,080 --> 00:05:17,060
We're going to use our
best practice of adding

122
00:05:17,060 --> 00:05:20,170
very commonly used
methods to the prototype.

123
00:05:20,170 --> 00:05:23,160
So here we go-- building
the speed test prototype.

124
00:05:23,160 --> 00:05:26,130
You can see on the inside here,
we've got an inherited method

125
00:05:26,130 --> 00:05:27,850
called startTest,
and we're going

126
00:05:27,850 --> 00:05:32,620
to use that to begin to start
the process of calculating

127
00:05:32,620 --> 00:05:36,740
an average speed for some
sort of test implementation.

128
00:05:36,740 --> 00:05:39,420
First thing we're going to
do inside our start test

129
00:05:39,420 --> 00:05:43,350
inherited method is
establish these variables.

130
00:05:43,350 --> 00:05:46,700
The first two will be our
actual, numerical Date objects.

131
00:05:46,700 --> 00:05:50,560
They will start our
clock and stop our clock.

132
00:05:50,560 --> 00:05:53,060
Notice also that we have
declared those variables

133
00:05:53,060 --> 00:05:57,450
using a comma separation
instead of using multiple var

134
00:05:57,450 --> 00:05:58,960
keyword look-ups.

135
00:05:58,960 --> 00:06:00,950
Yeah, that's our best practice.

136
00:06:00,950 --> 00:06:03,400
That last variable,
sumTimes, is going

137
00:06:03,400 --> 00:06:06,690
to be the variable that sums
up all of the times for all

138
00:06:06,690 --> 00:06:09,020
of the repetitions that we do.

139
00:06:09,020 --> 00:06:11,100
Next, we'll loop
over the full amount

140
00:06:11,100 --> 00:06:12,630
of requested repetitions.

141
00:06:12,630 --> 00:06:16,950
Notice that we have used our
best practice of no repetitive

142
00:06:16,950 --> 00:06:18,780
property access at depth.

143
00:06:18,780 --> 00:06:20,640
We have cached that
value, and we'll

144
00:06:20,640 --> 00:06:23,490
use that value in
our loop parameters.

145
00:06:23,490 --> 00:06:26,000
Here's where we actually
use our beginTime variable.

146
00:06:26,000 --> 00:06:26,750
Notice what we do.

147
00:06:26,750 --> 00:06:29,270
We establish a new
Date object, but we

148
00:06:29,270 --> 00:06:32,880
want the numerical version
of it so we can do math

149
00:06:32,880 --> 00:06:35,340
on that numerical
data, so we put

150
00:06:35,340 --> 00:06:39,920
that plus unary operator in the
front of our new Date object.

151
00:06:39,920 --> 00:06:42,730
Next, this is where
we run the actual code

152
00:06:42,730 --> 00:06:46,250
for this particular
repetition inside of the loop.

153
00:06:46,250 --> 00:06:48,300
Notice that we
pass the testParams

154
00:06:48,300 --> 00:06:51,970
into the testImplement function.

155
00:06:51,970 --> 00:06:55,960
Then, of course, we need another
numerical Date object in order

156
00:06:55,960 --> 00:06:58,680
to stop the clock.

157
00:06:58,680 --> 00:07:00,607
Finally, we'll do
endTime minus beginTime,

158
00:07:00,607 --> 00:07:02,940
which will, of course, give
us the differential in terms

159
00:07:02,940 --> 00:07:03,600
of time.

160
00:07:03,600 --> 00:07:05,840
It will tell us
the elapsed time.

161
00:07:05,840 --> 00:07:09,250
And we'll add that into
the sum of all times

162
00:07:09,250 --> 00:07:11,790
for all repetitions.

163
00:07:11,790 --> 00:07:13,354
And, of course,
taking the average

164
00:07:13,354 --> 00:07:15,520
is just going to be the sum
of all the times divided

165
00:07:15,520 --> 00:07:18,030
by the amount of
repetitions that we used.

166
00:07:18,030 --> 00:07:21,280
Finally, we'll return a message
that says the average execution

167
00:07:21,280 --> 00:07:22,990
across however
many repetitions we

168
00:07:22,990 --> 00:07:27,090
used was this amount of time.

169
00:07:27,090 --> 00:07:27,590
Cool.

170
00:07:27,590 --> 00:07:31,244
So let's test an implementation
using our new speed test class.

171
00:07:31,244 --> 00:07:32,660
The first thing
we're going to do,

172
00:07:32,660 --> 00:07:35,810
though, is we're going to build
some code that lacks some best

173
00:07:35,810 --> 00:07:38,450
practices and then
test that speed.

174
00:07:38,450 --> 00:07:39,720
Let's see what happens.

175
00:07:39,720 --> 00:07:41,890
We'll scoot our
prototype down over here,

176
00:07:41,890 --> 00:07:43,880
underneath our
constructor, and then we'll

177
00:07:43,880 --> 00:07:46,070
give ourselves some
data to start off with.

178
00:07:46,070 --> 00:07:49,750
You can see we've got our
variable, FirstRegimentNewbs.

179
00:07:49,750 --> 00:07:53,200
That's an array list
of four guys that

180
00:07:53,200 --> 00:07:55,550
are new to the first
regiment and need

181
00:07:55,550 --> 00:07:58,840
to be added to the list
of first regiment knights.

182
00:07:58,840 --> 00:08:00,340
You can see there,
the next variable

183
00:08:00,340 --> 00:08:02,170
is the
FirstRegimentKnights list,

184
00:08:02,170 --> 00:08:05,520
which has tons of knight
objects inside it.

185
00:08:05,520 --> 00:08:07,440
And here comes the
code we want to test.

186
00:08:07,440 --> 00:08:10,390
We want to loop over all of
the existing newbies, right?

187
00:08:10,390 --> 00:08:12,250
And notice, no
best practice here.

188
00:08:12,250 --> 00:08:14,770
We're just going to use
that repetitive access

189
00:08:14,770 --> 00:08:16,080
at depth that kind of sucks.

190
00:08:16,080 --> 00:08:18,490
We're going to do that
and see what happens.

191
00:08:18,490 --> 00:08:20,060
Additionally, inside
the loop, we're

192
00:08:20,060 --> 00:08:23,560
going to establish a new
variable every single time,

193
00:08:23,560 --> 00:08:27,880
and that's going to be a
new Knight object using

194
00:08:27,880 --> 00:08:30,380
the name inside the
newb list and whichever

195
00:08:30,380 --> 00:08:32,700
regiment he needs to be
assigned to, which, of course,

196
00:08:32,700 --> 00:08:35,140
each time here is
the first regiment.

197
00:08:35,140 --> 00:08:38,450
Following that, once we've got
a new knight inside our new guy

198
00:08:38,450 --> 00:08:41,490
object, we're going to push
that to the FirstRegimentKnights

199
00:08:41,490 --> 00:08:42,490
list.

200
00:08:42,490 --> 00:08:44,420
That's our simple
method for adding

201
00:08:44,420 --> 00:08:48,120
all of the new guys as
brand new knight objects

202
00:08:48,120 --> 00:08:50,030
to the knight list.

203
00:08:50,030 --> 00:08:51,654
Now, in order to
test this block,

204
00:08:51,654 --> 00:08:53,320
we've got to be able
to pass all of it--

205
00:08:53,320 --> 00:08:56,710
the whole block-- into
the SpeedTest constructor

206
00:08:56,710 --> 00:08:59,450
as its own function, right?

207
00:08:59,450 --> 00:09:02,190
We're going to create an
entirely new SpeedTest

208
00:09:02,190 --> 00:09:06,140
object from the constructor
and make that a new object in

209
00:09:06,140 --> 00:09:11,080
[? NoBPTest, ?] but we need
our code to be its own function

210
00:09:11,080 --> 00:09:12,550
expression so that
we can pass it

211
00:09:12,550 --> 00:09:14,920
in to the SpeedTest constructor.

212
00:09:14,920 --> 00:09:17,120
So we'll scoot our
FOR loop down here.

213
00:09:17,120 --> 00:09:19,913
We will make a new
variable called NoBP

214
00:09:19,913 --> 00:09:24,850
and wrap it in an anonymous
function, its own little module

215
00:09:24,850 --> 00:09:26,730
here, and we're going
to assign that function

216
00:09:26,730 --> 00:09:28,810
expression to a variable.

217
00:09:28,810 --> 00:09:31,960
Now, once that code is inside
that anonymous function,

218
00:09:31,960 --> 00:09:33,830
we can very easily
pass it around

219
00:09:33,830 --> 00:09:36,460
to whatever other function
we would like to pass it to.

220
00:09:36,460 --> 00:09:39,060
So you can see inside
of the SpeedTest call,

221
00:09:39,060 --> 00:09:42,010
we've now got NoBP
as the implementation

222
00:09:42,010 --> 00:09:45,600
that we want to test for speed.

223
00:09:45,600 --> 00:09:47,940
Now, since our
SpeedTest constructor

224
00:09:47,940 --> 00:09:52,010
lumps all of our test
code's important parameters

225
00:09:52,010 --> 00:09:55,720
into one testParams
property, we need

226
00:09:55,720 --> 00:09:57,410
to modify our function
in order to be

227
00:09:57,410 --> 00:10:01,340
able to use just one
array of important stuff.

228
00:10:01,340 --> 00:10:04,280
So, we've got here inside
of our anonymous function

229
00:10:04,280 --> 00:10:08,960
a parameter called the list
of params, just one parameter

230
00:10:08,960 --> 00:10:10,085
array.

231
00:10:10,085 --> 00:10:11,710
We'll scoot our stuff
down here, and we

232
00:10:11,710 --> 00:10:14,390
will make that
parameter array become

233
00:10:14,390 --> 00:10:18,380
the lists for the tests--
lists for test variable.

234
00:10:18,380 --> 00:10:22,420
And inside that array,
we've got both of the arrays

235
00:10:22,420 --> 00:10:27,410
that our testable code will
need in order to operate.

236
00:10:27,410 --> 00:10:30,680
Now, that list, that
array of arrays,

237
00:10:30,680 --> 00:10:34,220
is going to be passed in to
our SpeedTest constructor

238
00:10:34,220 --> 00:10:38,810
to be all of the parameters we
need for our testable function.

239
00:10:38,810 --> 00:10:43,640
But we now need to modify all
of our internal variable names

240
00:10:43,640 --> 00:10:46,970
in our function to match that
parameter name we created

241
00:10:46,970 --> 00:10:50,140
that's just one array,
so let's check that out.

242
00:10:50,140 --> 00:10:55,260
Well, FirstRegimentNewbs is the
first index of our parameter

243
00:10:55,260 --> 00:10:58,040
array, so that's going
to become list of params

244
00:10:58,040 --> 00:11:01,260
on the zeroth index
for both of the times

245
00:11:01,260 --> 00:11:06,080
that we access the
FirstRegimentNewbs data.

246
00:11:06,080 --> 00:11:06,880
Scoot that over.

247
00:11:06,880 --> 00:11:09,710
And now, of course,
the first index

248
00:11:09,710 --> 00:11:12,590
of our new, single
parameter array

249
00:11:12,590 --> 00:11:16,420
is going to be the
FirstRegimentKnights array,

250
00:11:16,420 --> 00:11:18,970
and we'll scoot that over.

251
00:11:18,970 --> 00:11:21,782
Bring our SpeedTest up here,
and we're ready to roll.

252
00:11:21,782 --> 00:11:23,240
Let's see what
happens when we test

253
00:11:23,240 --> 00:11:27,670
the speed of our prepared,
albeit terrible, code sample.

254
00:11:27,670 --> 00:11:30,450
Oh, and one thing to note
here-- in creating our SpeedTest

255
00:11:30,450 --> 00:11:34,910
object, we opt to not pass
in any repetitions amount.

256
00:11:34,910 --> 00:11:36,780
So therefore, in our
logical assignment,

257
00:11:36,780 --> 00:11:40,210
in the construction, we're
going to actually get 10,000

258
00:11:40,210 --> 00:11:42,670
from our logical
assignment operator.

259
00:11:42,670 --> 00:11:43,170
Cool.

260
00:11:43,170 --> 00:11:47,430
So we'll have to start the test
by calling the startTest method

261
00:11:47,430 --> 00:11:50,060
on our new SpeedTest object.

262
00:11:50,060 --> 00:11:53,310
We get average execution
across 10,000 repetitions.

263
00:11:53,310 --> 00:11:55,610
It's 0.0041.

264
00:11:55,610 --> 00:11:58,080
Not terrible, but
we can do better.

265
00:11:58,080 --> 00:12:00,670
Notice, however, that we
have about 10 times the speed

266
00:12:00,670 --> 00:12:03,210
improvement already
over the estimations

267
00:12:03,210 --> 00:12:06,970
from console.time, a little
bit of an indicator about how

268
00:12:06,970 --> 00:12:11,339
much time it really takes to
establish a console.time timer.

269
00:12:11,339 --> 00:12:12,880
Now, what happens
if we actually want

270
00:12:12,880 --> 00:12:15,340
to specify how many
repetitions we're going to use?

271
00:12:15,340 --> 00:12:17,250
We want to be a little
bit more accurate,

272
00:12:17,250 --> 00:12:20,370
so we're going to pass
in 100,000 repetitions.

273
00:12:20,370 --> 00:12:25,380
We get the average
execution is now 0.00478,

274
00:12:25,380 --> 00:12:27,550
and our newer estimate
actually brings

275
00:12:27,550 --> 00:12:29,300
us ever closer to the truth.

276
00:12:29,300 --> 00:12:33,650
We can rely a little bit
more on that estimate.

277
00:12:33,650 --> 00:12:34,150
Cool.

278
00:12:34,150 --> 00:12:35,441
Now, here's where the money is.

279
00:12:35,441 --> 00:12:37,570
Let's go back and refactor
our code a little bit

280
00:12:37,570 --> 00:12:39,230
and put some best
practices in there,

281
00:12:39,230 --> 00:12:41,180
and see how much
our speed improves.

282
00:12:41,180 --> 00:12:44,110
First thing we'll do is
we'll cache that loop control

283
00:12:44,110 --> 00:12:46,982
variable, so we'll scoot
our i plus plus over here.

284
00:12:46,982 --> 00:12:49,440
And now we're going to establish
that new x variable, where

285
00:12:49,440 --> 00:12:52,310
we cache the length of
the newbs array, which

286
00:12:52,310 --> 00:12:55,130
happens to be in
list of params zero.

287
00:12:55,130 --> 00:12:57,360
We'll loop over
that new variable.

288
00:12:57,360 --> 00:12:59,520
Next thing we're
going to do is get rid

289
00:12:59,520 --> 00:13:01,930
of that internal
variable declaration.

290
00:13:01,930 --> 00:13:04,830
Not only are we not going
to declare that variable,

291
00:13:04,830 --> 00:13:09,330
but we're going to get rid of
the interim storage entirely.

292
00:13:09,330 --> 00:13:13,010
We're just going to create
the new Knight object

293
00:13:13,010 --> 00:13:18,830
and instantly push that
into our new nice array--

294
00:13:18,830 --> 00:13:21,970
magical and efficient.

295
00:13:21,970 --> 00:13:24,930
Now, we probably need to change
the names of our test function

296
00:13:24,930 --> 00:13:28,000
and our SpeedTest object
because it no longer

297
00:13:28,000 --> 00:13:29,270
has no best practices.

298
00:13:29,270 --> 00:13:31,550
Now, it has some best practices.

299
00:13:31,550 --> 00:13:34,330
So, we'll call it BP and BPTest.

300
00:13:34,330 --> 00:13:36,920
And now, when we actually
call our startTest

301
00:13:36,920 --> 00:13:41,080
on our BPTest object
on 100,000 repetitions,

302
00:13:41,080 --> 00:13:46,600
we get 0.00274, which is a
significantly better execution,

303
00:13:46,600 --> 00:13:50,530
especially if this process
were replicated a few gazillion

304
00:13:50,530 --> 00:13:53,621
times up in a program.

305
00:13:53,621 --> 00:13:56,300
Now, the important thing
about a simple class like this

306
00:13:56,300 --> 00:13:58,880
is it's very reusable
for any particular code

307
00:13:58,880 --> 00:14:01,680
that you want to test
so long as you group

308
00:14:01,680 --> 00:14:05,490
the parameters for your testable
code into an organized list

309
00:14:05,490 --> 00:14:08,580
so they can be passed
into the function

310
00:14:08,580 --> 00:14:11,570
that you put your
testable code inside.

311
00:14:11,570 --> 00:14:15,144
And that is the end of
our performance level.

312
00:14:15,144 --> 00:14:16,810
We're going to give
you a few challenges

313
00:14:16,810 --> 00:14:20,180
to test your knowledge with
your new SpeedTest class,

314
00:14:20,180 --> 00:14:22,140
and we'll see you back
in the next level.

315
00:14:22,140 --> 00:14:24,730
See you soon.

316
00:14:24,730 --> 00:14:26,426
Protheth-eth-eth.

317
00:14:26,426 --> 00:14:26,925
Pro-theth.

318
00:14:26,925 --> 00:14:30,350


319
00:14:30,350 --> 00:14:31,330
Not suck this time.

320
00:14:31,330 --> 00:14:33,850
Suck less.

321
00:14:33,850 --> 00:14:36,250
Some people-- winter's coming.

322
00:14:36,250 --> 00:14:38,050
Suck is coming.

323
00:14:38,050 --> 00:14:40,767
[LAUGHTER]

324
00:14:40,767 --> 00:14:41,266

end