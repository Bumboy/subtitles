1
00:00:01,989 --> 00:00:02,530
Welcome back.

2
00:00:02,530 --> 00:00:04,720
Hope you enjoyed
working with namespaces.

3
00:00:04,720 --> 00:00:06,940
We're on, inside of
our module pattern,

4
00:00:06,940 --> 00:00:10,260
towards anonymous closures.

5
00:00:10,260 --> 00:00:12,420
So far, we have
only seen a module

6
00:00:12,420 --> 00:00:14,250
that has public properties.

7
00:00:14,250 --> 00:00:16,230
The thing with a
namespace, though,

8
00:00:16,230 --> 00:00:20,230
is that you really have to
hope that no one else ever uses

9
00:00:20,230 --> 00:00:23,020
the name you've created
for your namespace

10
00:00:23,020 --> 00:00:25,250
inside your application.

11
00:00:25,250 --> 00:00:28,140
Take a look at this
ARMORY object right here.

12
00:00:28,140 --> 00:00:32,110
The ARMORY namespace we can
infer because of the capitals.

13
00:00:32,110 --> 00:00:34,260
Now this namespace has a
bunch of public variables

14
00:00:34,260 --> 00:00:38,190
and methods, which can still
be accessed by any code that

15
00:00:38,190 --> 00:00:42,600
happens to know the name of
the space and its properties.

16
00:00:42,600 --> 00:00:44,170
What if we don't want that?

17
00:00:44,170 --> 00:00:47,880
What if we want some privacy to
our data inside our namespace?

18
00:00:47,880 --> 00:00:51,080
First, we need to decide which
properties should be public

19
00:00:51,080 --> 00:00:54,514
and which we don't want anybody
to see and should be private.

20
00:00:54,514 --> 00:00:57,180
So taking a look at these, we've
got a weaponList and an

21
00:00:57,180 --> 00:00:57,890
armorList.

22
00:00:57,890 --> 00:01:00,550
And since an accurate
list of weapons and armor

23
00:01:00,550 --> 00:01:02,310
is really, really
important, right,

24
00:01:02,310 --> 00:01:05,170
to accurate armory service-- I
mean, when you run your armory,

25
00:01:05,170 --> 00:01:06,700
I'm sure that that's
what you need--

26
00:01:06,700 --> 00:01:09,570
these arrays should
be very private.

27
00:01:09,570 --> 00:01:11,480
Rolling on down, you
see makeWeaponRequest

28
00:01:11,480 --> 00:01:12,438
and makeArmorRequest.

29
00:01:12,438 --> 00:01:15,790
Well that seems to be
something that should be public

30
00:01:15,790 --> 00:01:17,740
because the whole
reason an armory exists

31
00:01:17,740 --> 00:01:20,460
is because we want people to
be able to make requests to get

32
00:01:20,460 --> 00:01:23,150
weapons and armor out
of the armory, right?

33
00:01:23,150 --> 00:01:25,640
And then, finally, removeWeapon,
 replaceWeapon,

34
00:01:25,640 --> 00:01:28,020
removeArmor, replaceArmor.

35
00:01:28,020 --> 00:01:31,230
That's really messing with our
data, with our list, right?

36
00:01:31,230 --> 00:01:34,280
So we probably want these
to be private as well.

37
00:01:34,280 --> 00:01:36,890
Because making any
modifications to the master list

38
00:01:36,890 --> 00:01:40,850
should be a task that only the
module takes care of and only

39
00:01:40,850 --> 00:01:44,010
the module can call into being.

40
00:01:44,010 --> 00:01:48,310
This is an excellent case of how
public methods and values often

41
00:01:48,310 --> 00:01:50,240
and sometimes
should be triggering

42
00:01:50,240 --> 00:01:54,100
the use of private
methods and values.

43
00:01:54,100 --> 00:01:56,400
So in our case,
our public methods

44
00:01:56,400 --> 00:01:59,970
are going to signal the private
methods to safely modify

45
00:01:59,970 --> 00:02:01,390
the private data.

46
00:02:01,390 --> 00:02:03,140
Here you see each
request method,

47
00:02:03,140 --> 00:02:05,500
meaning makeWeaponRequest
and makeArmorRequest,

48
00:02:05,500 --> 00:02:07,930
each of those is going to make
some reference in its code

49
00:02:07,930 --> 00:02:10,120
to the remove/replaceWeapons.

50
00:02:10,120 --> 00:02:14,490
Those are going to have access
to the weapons and armor lists.

51
00:02:14,490 --> 00:02:17,280
That makes closure
very valuable.

52
00:02:17,280 --> 00:02:18,894
Let's see how.

53
00:02:18,894 --> 00:02:20,310
The closure feature
in JavaScript,

54
00:02:20,310 --> 00:02:23,500
which you may remember
from JavaScript Roadtrip,

55
00:02:23,500 --> 00:02:28,610
has a feature that will allow
us to privatize properties.

56
00:02:28,610 --> 00:02:30,910
As a first visual
step, check this out,

57
00:02:30,910 --> 00:02:34,240
we'll wrap the entire
set of properties

58
00:02:34,240 --> 00:02:38,250
in an anonymous immediately
invoked function expression.

59
00:02:38,250 --> 00:02:39,560
Stay with me on that.

60
00:02:39,560 --> 00:02:42,530
So what we got here is
function at the front,

61
00:02:42,530 --> 00:02:45,270
but notice it's wrapped
inside of a left parenthesis.

62
00:02:45,270 --> 00:02:48,470
And then at the back, we
close that left parenthesis

63
00:02:48,470 --> 00:02:50,170
with a right parenthesis.

64
00:02:50,170 --> 00:02:52,610
And then immediately
call the function

65
00:02:52,610 --> 00:02:57,550
by providing another
calling set of parentheses.

66
00:02:57,550 --> 00:03:00,580
This is an immediately
invoked function expression,

67
00:03:00,580 --> 00:03:04,630
which you probably saw or
remember from Roadtrip.

68
00:03:04,630 --> 00:03:08,450
Now, we will turn all of our
desired private properties

69
00:03:08,450 --> 00:03:10,490
of the old ARMORY
namespace, we're

70
00:03:10,490 --> 00:03:12,830
going to turn those
into local executable

71
00:03:12,830 --> 00:03:15,040
code inside our new function.

72
00:03:15,040 --> 00:03:15,840
Right?

73
00:03:15,840 --> 00:03:17,690
And those local
values and methods

74
00:03:17,690 --> 00:03:19,330
that now belong to
the function will

75
00:03:19,330 --> 00:03:21,880
be closed up into the
ARMORY's namespace

76
00:03:21,880 --> 00:03:24,390
once the ARMORY
object gets returned.

77
00:03:24,390 --> 00:03:28,070
Here, the list of data
become a local variables

78
00:03:28,070 --> 00:03:31,060
for the immediately invoked
function expression scope.

79
00:03:31,060 --> 00:03:33,230
That's going to
make them private.

80
00:03:33,230 --> 00:03:35,480
We'll do the same thing for
these function expressions

81
00:03:35,480 --> 00:03:37,780
down at the bottom: removeWeapon,
replaceWeapon,

82
00:03:37,780 --> 00:03:38,980
removeArmor, replaceArmor.

83
00:03:38,980 --> 00:03:40,830
We want all those to
be private so we're

84
00:03:40,830 --> 00:03:44,300
going to make those local
executable code as well.

85
00:03:44,300 --> 00:03:46,360
Again, these will belong
only to the function

86
00:03:46,360 --> 00:03:49,600
instead of directly
to the namespace.

87
00:03:49,600 --> 00:03:50,880
Stay with us.

88
00:03:50,880 --> 00:03:53,100
Next thing you should
probably do, although it's not

89
00:03:53,100 --> 00:03:55,150
really required, it's
just good habit,

90
00:03:55,150 --> 00:03:57,600
is to pull every
private value and method

91
00:03:57,600 --> 00:03:59,650
to the top of the function.

92
00:03:59,650 --> 00:04:01,810
That's going to help us
with code organization.

93
00:04:01,810 --> 00:04:05,180
And it's going to put all the
closure values near the top

94
00:04:05,180 --> 00:04:06,920
and near each other
for easy reference.

95
00:04:06,920 --> 00:04:09,900
So let's scoot those over.

96
00:04:09,900 --> 00:04:11,800
And here is where the money is.

97
00:04:11,800 --> 00:04:15,290
In order to make some of
the properties public, which

98
00:04:15,290 --> 00:04:17,120
is obviously our
remaining ones, we're

99
00:04:17,120 --> 00:04:21,480
going to return an object
that holds those properties.

100
00:04:21,480 --> 00:04:25,800
So let's add those public
properties to their own object

101
00:04:25,800 --> 00:04:27,700
and return it.

102
00:04:27,700 --> 00:04:31,550
And that becomes
the ARMORY namespace

103
00:04:31,550 --> 00:04:33,780
once the immediately
invoked function

104
00:04:33,780 --> 00:04:37,230
expression finishes and returns.

105
00:04:37,230 --> 00:04:40,050
What you can see is that
once the function completes

106
00:04:40,050 --> 00:04:43,440
and returns that object, it
will be immediately handed over

107
00:04:43,440 --> 00:04:46,520
to the ARMORY variable
and become the new ARMORY

108
00:04:46,520 --> 00:04:50,400
namespace, complete
with public properties,

109
00:04:50,400 --> 00:04:53,940
make weapon requests, and make
armor requestsm as well as all

110
00:04:53,940 --> 00:04:57,730
of that private data that
no one will ever see.

111
00:04:57,730 --> 00:05:00,720
What we want you to notice about
this really powerful element

112
00:05:00,720 --> 00:05:03,240
of the module pattern is
that the closure now produces

113
00:05:03,240 --> 00:05:06,150
all of your desired
private methods and values.

114
00:05:06,150 --> 00:05:08,090
All of the function's
local variables

115
00:05:08,090 --> 00:05:11,740
get pushed get bound down
into the returned object

116
00:05:11,740 --> 00:05:13,220
into that scope.

117
00:05:13,220 --> 00:05:17,250
But those properties are
never actual properties

118
00:05:17,250 --> 00:05:19,324
within the object itself.

119
00:05:19,324 --> 00:05:20,740
They're there,
though, and they're

120
00:05:20,740 --> 00:05:22,350
visible to enable
to be referenced

121
00:05:22,350 --> 00:05:27,580
by only the members of
the object's local scope.

122
00:05:27,580 --> 00:05:30,260
And with that, the
basics of our module

123
00:05:30,260 --> 00:05:31,560
are actually now complete.

124
00:05:31,560 --> 00:05:33,720
Our sensitive data is
private by closure.

125
00:05:33,720 --> 00:05:36,680
And our public properties
are accessible through only

126
00:05:36,680 --> 00:05:37,920
the namespace.

127
00:05:37,920 --> 00:05:41,100
So now, if we call
ARMORY.makeWeaponRequest

128
00:05:41,100 --> 00:05:44,240
on the weapon excalibur,
well the ARMORY namespace,

129
00:05:44,240 --> 00:05:46,500
which is that
small object there,

130
00:05:46,500 --> 00:05:51,120
calls its makeWeaponRequest
property method.

131
00:05:51,120 --> 00:05:54,900
Next, makeWeaponRequest
will call removeWeapon,

132
00:05:54,900 --> 00:05:59,490
which is invisible, in order
to try to get excalibur.

133
00:05:59,490 --> 00:06:01,400
Next, if some
conditions are met,

134
00:06:01,400 --> 00:06:04,126
namely if the weapon
exists in the weaponList

135
00:06:04,126 --> 00:06:06,250
and if it should be checked
out to the person who's

136
00:06:06,250 --> 00:06:10,550
making the request, then the
invisible removeWeapon method

137
00:06:10,550 --> 00:06:14,160
deletes and retrieves
the object from

138
00:06:14,160 --> 00:06:17,840
the invisible
closed-up weaponList.

139
00:06:17,840 --> 00:06:20,820
weaponList returns that
object to the removeWeapon

140
00:06:20,820 --> 00:06:22,440
function scope.

141
00:06:22,440 --> 00:06:26,190
Then, of course, removeWeapon
will return that object for use

142
00:06:26,190 --> 00:06:28,440
to the scope of
makeWeaponRequest.

143
00:06:28,440 --> 00:06:29,830
And then the ARMORY
namespace can

144
00:06:29,830 --> 00:06:31,570
decide what to do
with excalibur.

145
00:06:34,950 --> 00:06:37,030
Short and sweet, that's
anonymous closures.

146
00:06:37,030 --> 00:06:38,850
And now we will give
you some experience

147
00:06:38,850 --> 00:06:40,300
with those in the challenges.

148
00:06:40,300 --> 00:06:43,140
See you back for
the next section.

