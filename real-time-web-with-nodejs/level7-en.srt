1
00:00:00,800 --> 00:00:02,560
[SINGING] Your
online application's

2
00:00:02,560 --> 00:00:03,800
starting to fail.

3
00:00:03,800 --> 00:00:07,520
It's crawling on the network
just as fast as a snail.

4
00:00:07,520 --> 00:00:10,690
We need evented programming
starting from the top.

5
00:00:10,690 --> 00:00:15,646
Better write some code so
the world doesn't stop.

6
00:00:15,646 --> 00:00:19,290
With a non-blocking model,
we will be just fine.

7
00:00:19,290 --> 00:00:23,210
Built on Google
Chrome's V8 runtime.

8
00:00:23,210 --> 00:00:25,720
And all you need to do is
write some JavaScript code

9
00:00:25,720 --> 00:00:27,680
and use the Real
Time Web with Node.

10
00:00:32,564 --> 00:00:34,230
You're watching Real
Time Web with Node.

11
00:00:34,230 --> 00:00:36,900
And you've made it to
the final level, level 7,

12
00:00:36,900 --> 00:00:41,120
where we're going to be
talking about persisting data.

13
00:00:41,120 --> 00:00:48,850
So back in our chat app, if we
say, hello, anyone out there?

14
00:00:48,850 --> 00:00:52,430
[LAUGING]

15
00:00:52,430 --> 00:00:57,260
And then somebody else joins,
connects to the server--

16
00:00:57,260 --> 00:00:58,260
it's, of course, Spider.

17
00:00:58,260 --> 00:01:01,200
Who else would it be?

18
00:01:01,200 --> 00:01:04,060
They're not going to see any
of our previous messages.

19
00:01:04,060 --> 00:01:07,140
But that's typically not
how chat applications--

20
00:01:07,140 --> 00:01:08,480
how you want them to work.

21
00:01:08,480 --> 00:01:12,620
So let's figure out how we might
persist these messages as they

22
00:01:12,620 --> 00:01:14,240
come in so that
new people who join

23
00:01:14,240 --> 00:01:17,020
see the previous
couple messages.

24
00:01:17,020 --> 00:01:18,740
You'll notice,
here's our old code.

25
00:01:18,740 --> 00:01:19,720
We're on join.

26
00:01:19,720 --> 00:01:21,240
We're setting the nickname.

27
00:01:21,240 --> 00:01:23,240
We're broadcasting
who joined the chat.

28
00:01:23,240 --> 00:01:25,020
And then, on messages,
when a new message

29
00:01:25,020 --> 00:01:27,960
comes in on the server side,
we emit it to everybody else.

30
00:01:27,960 --> 00:01:30,000
And we also emit it back to us.

31
00:01:30,000 --> 00:01:32,220
So let's jump in here.

32
00:01:32,220 --> 00:01:35,350
What we might do to
store the messages

33
00:01:35,350 --> 00:01:38,560
is create a messages
array on the server side

34
00:01:38,560 --> 00:01:40,690
where we're going to
put all the messages.

35
00:01:40,690 --> 00:01:43,690
Then we'll create a
store messages function.

36
00:01:43,690 --> 00:01:45,460
This function takes
the name of the person

37
00:01:45,460 --> 00:01:48,280
who sent the message,
and what they sent,

38
00:01:48,280 --> 00:01:51,180
and then we'll simply push
onto the messages array

39
00:01:51,180 --> 00:01:55,720
an object with the name and
the data, which is the message.

40
00:01:55,720 --> 00:01:58,250
Then, if our messages is
greater than 10 in length,

41
00:01:58,250 --> 00:02:02,780
we'll go ahead and shift one
off, shift the first one off,

42
00:02:02,780 --> 00:02:05,720
so there will only ever
be 10 previous messages.

43
00:02:05,720 --> 00:02:07,900
Then, down below, in
the messages listener,

44
00:02:07,900 --> 00:02:10,280
after we get done
emitting the messages,

45
00:02:10,280 --> 00:02:13,990
let's store that message
that we just received.

46
00:02:13,990 --> 00:02:16,370
We're storing all the
messages as they get received.

47
00:02:16,370 --> 00:02:19,940
But we need to go back
into the join listener

48
00:02:19,940 --> 00:02:21,740
so that, when a
new client joins,

49
00:02:21,740 --> 00:02:24,520
we iterate through
each of the messages,

50
00:02:24,520 --> 00:02:28,510
like you see here, and emit to
that client that just joined,

51
00:02:28,510 --> 00:02:33,660
all the messages, so it'll
display them onto their screen.

52
00:02:33,660 --> 00:02:36,070
So if we jump back
into our browser,

53
00:02:36,070 --> 00:02:40,980
and we type a couple messages,
and we connect a new client,

54
00:02:40,980 --> 00:02:45,180
we can see that all the messages
are there, waiting for us.

55
00:02:45,180 --> 00:02:48,590
Now let's exit our server,
and restart it, and go back

56
00:02:48,590 --> 00:02:51,050
into our browser.

57
00:02:51,050 --> 00:02:53,800
As you can see, now that
we've restarted our server,

58
00:02:53,800 --> 00:02:56,020
our messages array
got blanked out.

59
00:02:56,020 --> 00:02:59,060
And our messages
aren't there anymore.

60
00:02:59,060 --> 00:03:03,090
So we need to think about how
we could persist those messages,

61
00:03:03,090 --> 00:03:05,080
even if our server restarts.

62
00:03:05,080 --> 00:03:08,260
One way to solve this problem is
to use a database of some sort.

63
00:03:08,260 --> 00:03:10,870
Luckily, node works great
with all sorts of databases,

64
00:03:10,870 --> 00:03:13,980
from Mongo, to Couch, to
Postgres, Memcached, Riak,

65
00:03:13,980 --> 00:03:17,030
Redis, they all
play well with Node.

66
00:03:17,030 --> 00:03:20,970
And they all have
non-blocking drivers.

67
00:03:20,970 --> 00:03:22,760
Lots of times, in
other languages

68
00:03:22,760 --> 00:03:24,790
that use these databases,
you'll find they

69
00:03:24,790 --> 00:03:26,800
have drivers that are blocking.

70
00:03:26,800 --> 00:03:29,840
That means, when you go
to submit a SQL request,

71
00:03:29,840 --> 00:03:32,445
well, your process kind
of just hangs there.

72
00:03:32,445 --> 00:03:34,600
It can't process anything
else while it's waiting

73
00:03:34,600 --> 00:03:35,940
for the database to return.

74
00:03:35,940 --> 00:03:37,420
Kind of crazy.

75
00:03:37,420 --> 00:03:39,180
Well, Node, of
course, everything

76
00:03:39,180 --> 00:03:41,180
we write is non-blocking.

77
00:03:41,180 --> 00:03:43,630
So that means you
could have two queries.

78
00:03:43,630 --> 00:03:46,340
And they both submit
queries to the databases.

79
00:03:46,340 --> 00:03:49,560
And you're process can
do other stuff while it's

80
00:03:49,560 --> 00:03:52,110
waiting for these two queries
to come back, and then

81
00:03:52,110 --> 00:03:55,470
call the callbacks,
and then do more stuff.

82
00:03:55,470 --> 00:03:57,330
Pretty neat.

83
00:03:57,330 --> 00:03:58,650
So let's jump in to redis.

84
00:03:58,650 --> 00:04:01,130
And luckily, Redis has all
sorts of data structures

85
00:04:01,130 --> 00:04:03,250
that we can store
inside of its database,

86
00:04:03,250 --> 00:04:06,390
from strings, to hashes, to
lists, to sets, to sorted sets.

87
00:04:06,390 --> 00:04:10,650
We're going to be using
strings, lists, and sets.

88
00:04:10,650 --> 00:04:13,205
Now, Redis has a
great home page.

89
00:04:13,205 --> 00:04:15,250
It makes it really
easy to start playing

90
00:04:15,250 --> 00:04:19,029
with the different components
and different data structures.

91
00:04:19,029 --> 00:04:20,850
So if we go into the
documentation here,

92
00:04:20,850 --> 00:04:23,500
the different commands, and
we look under strings, we

93
00:04:23,500 --> 00:04:25,940
can see that we can use GET.

94
00:04:25,940 --> 00:04:30,390
We can even start playing with
it right here in the browser.

95
00:04:30,390 --> 00:04:36,910
So we can say something like,
SET, new key, to set a value.

96
00:04:36,910 --> 00:04:38,400
We'll set the value dog.

97
00:04:38,400 --> 00:04:42,110
And then, if we GET new
key, we're getting back dog.

98
00:04:42,110 --> 00:04:43,810
So the new keys is our key.

99
00:04:43,810 --> 00:04:45,870
And then dog was our value.

100
00:04:45,870 --> 00:04:48,650
Now, let's jump into lists.

101
00:04:48,650 --> 00:04:52,380
We're going to be using
the LPUSH list command.

102
00:04:52,380 --> 00:04:54,320
We can check out the syntax.

103
00:04:54,320 --> 00:04:57,640
And then we can start pushing
things onto a new list.

104
00:04:57,640 --> 00:05:00,290
So let's give that a try.

105
00:05:00,290 --> 00:05:01,900
We'll push onto
our new list dog.

106
00:05:01,900 --> 00:05:05,890
We'll push onto
our new list cat.

107
00:05:05,890 --> 00:05:09,200
And then we'll use
the lLRANGE command

108
00:05:09,200 --> 00:05:12,960
to get back the values out
of it, from 0 to negative 1,

109
00:05:12,960 --> 00:05:16,040
giving us all the
values in the list.

110
00:05:16,040 --> 00:05:18,220
To connect our Node
application with Redis,

111
00:05:18,220 --> 00:05:21,530
we're going to be using
the Node Redis library.

112
00:05:21,530 --> 00:05:23,660
This is where you could
find it on GitHub.

113
00:05:23,660 --> 00:05:27,890
To install it, we call
just npm install redis,

114
00:05:27,890 --> 00:05:30,220
dash dash save, so
that we can install it

115
00:05:30,220 --> 00:05:32,340
and add it to our package.json.

116
00:05:32,340 --> 00:05:36,820
Then, inside of our code,
we simply require redis.

117
00:05:36,820 --> 00:05:39,160
Then we can create
a redis client

118
00:05:39,160 --> 00:05:41,530
by calling redis.createClient.

119
00:05:41,530 --> 00:05:43,790
Then we can start issuing
commands to the database.

120
00:05:43,790 --> 00:05:46,980
We can call set message1,
hello, this is dog,

121
00:05:46,980 --> 00:05:50,170
set message2, hello,
no this is spider.

122
00:05:50,170 --> 00:05:52,360
So we're setting the
keys and the values.

123
00:05:52,360 --> 00:05:56,460
To get the messages out of the
database, we simply call get.

124
00:05:56,460 --> 00:05:58,680
And we send in a callback.

125
00:05:58,680 --> 00:06:00,890
This goes with that
non-blocking thing.

126
00:06:00,890 --> 00:06:03,470
We're going to get this
out of the database.

127
00:06:03,470 --> 00:06:06,391
But while it's fetching it, we
can go off and do other stuff.

128
00:06:06,391 --> 00:06:08,640
And then, when the value
comes back from the database,

129
00:06:08,640 --> 00:06:11,075
it will invoke this
callback function

130
00:06:11,075 --> 00:06:12,325
and log it out to the console.

131
00:06:15,020 --> 00:06:18,250
If you want to store a
list in the Redis database,

132
00:06:18,250 --> 00:06:22,910
we could create a message
and lpush, left push,

133
00:06:22,910 --> 00:06:26,790
onto the messages list
this current message,

134
00:06:26,790 --> 00:06:29,570
and then specify
a callback here.

135
00:06:29,570 --> 00:06:30,980
This callback is optional.

136
00:06:30,980 --> 00:06:35,380
But it sends back, in the reply
variable here, the list length,

137
00:06:35,380 --> 00:06:36,820
in case you need it.

138
00:06:36,820 --> 00:06:38,660
If we add another
string to messages,

139
00:06:38,660 --> 00:06:44,190
we can see here that it
returns the length of 2.

140
00:06:44,190 --> 00:06:46,660
Instead of logging out
the length of the array

141
00:06:46,660 --> 00:06:50,750
to the screen, we're going
to use the LTRIM function.

142
00:06:50,750 --> 00:06:52,410
The LTRIM function,
in this case,

143
00:06:52,410 --> 00:06:54,340
we're going to send in 0 and 1.

144
00:06:54,340 --> 00:06:57,810
It's going to keep the first
two strings in the array

145
00:06:57,810 --> 00:06:59,890
and remove the rest.

146
00:06:59,890 --> 00:07:02,190
If we wanted to retrieve
the values from the list,

147
00:07:02,190 --> 00:07:05,870
we can use lrange, remember
we saw that before,

148
00:07:05,870 --> 00:07:08,660
sending in 0 to negative
1, which will return

149
00:07:08,660 --> 00:07:11,042
all the elements in the list.

150
00:07:11,042 --> 00:07:13,120
Now if we log them
out to the console,

151
00:07:13,120 --> 00:07:15,932
here's what we would get.

152
00:07:15,932 --> 00:07:17,890
If we jump back into our
old code, you can see,

153
00:07:17,890 --> 00:07:19,860
here's our store
message function.

154
00:07:19,860 --> 00:07:23,890
And we need to rewrite
this to use Redis.

155
00:07:23,890 --> 00:07:25,940
First we need to create
our Redis client.

156
00:07:25,940 --> 00:07:28,100
And then, inside of
our store function,

157
00:07:28,100 --> 00:07:31,110
we need to take the name and
the data that we send in,

158
00:07:31,110 --> 00:07:35,210
put them into an object, and
then call JSON.stringify, which

159
00:07:35,210 --> 00:07:36,850
will turn that
object into a string

160
00:07:36,850 --> 00:07:39,150
we can easily store in Redis.

161
00:07:39,150 --> 00:07:43,010
Then we'll call lpush, send
that in as the message,

162
00:07:43,010 --> 00:07:46,060
and then call ltrim so
it'll keep the newest

163
00:07:46,060 --> 00:07:50,430
10 items in the array.

164
00:07:50,430 --> 00:07:52,530
Here's our old join
listener, where

165
00:07:52,530 --> 00:07:55,530
we're iterating through all the
messages when somebody joins

166
00:07:55,530 --> 00:07:57,670
and printing it
out to the screen.

167
00:07:57,670 --> 00:07:59,780
We'll modify this
code to use Redis,

168
00:07:59,780 --> 00:08:03,960
first fetching all of the
list items with lrange,

169
00:08:03,960 --> 00:08:05,860
then it will
reverse the messages

170
00:08:05,860 --> 00:08:08,090
so they are emitted
in the correct order.

171
00:08:08,090 --> 00:08:10,220
Then we'll iterate
through each message that

172
00:08:10,220 --> 00:08:13,800
gets returned in that list,
first parsing the string that

173
00:08:13,800 --> 00:08:18,180
gets returned into a JSON
object, and then, finally,

174
00:08:18,180 --> 00:08:21,060
emitting that to the client.

175
00:08:21,060 --> 00:08:23,360
Here we are back in our browser.

176
00:08:23,360 --> 00:08:27,150
We say, hello,
everyone, it's me.

177
00:08:27,150 --> 00:08:29,904
Now, if we connect
another client,

178
00:08:29,904 --> 00:08:31,320
and they type in
their name, we'll

179
00:08:31,320 --> 00:08:34,299
see it properly loads
our list from Redis

180
00:08:34,299 --> 00:08:37,860
and broadcasts it
into our browser.

181
00:08:37,860 --> 00:08:40,500
If we exit our server
and restart it,

182
00:08:40,500 --> 00:08:44,390
if we open up a new client,
give it a new nickname,

183
00:08:44,390 --> 00:08:47,620
and we can see it's properly
loaded all the old messages

184
00:08:47,620 --> 00:08:51,822
from Redis, even though
we restarted our server.

185
00:08:51,822 --> 00:08:54,280
There's one more thing we need
to do to create this chatter

186
00:08:54,280 --> 00:08:58,300
application, and that's to
show a list of who is currently

187
00:08:58,300 --> 00:09:00,580
in the room, who is connected.

188
00:09:00,580 --> 00:09:02,660
We're going to do
that using a set.

189
00:09:02,660 --> 00:09:05,137
Sets are lists of unique data.

190
00:09:05,137 --> 00:09:06,220
You can't have duplicates.

191
00:09:06,220 --> 00:09:08,770
And to store a set
in Redis, we're

192
00:09:08,770 --> 00:09:12,800
going to call sadd
and then specify

193
00:09:12,800 --> 00:09:15,900
the set name, in this case,
names, and then the value

194
00:09:15,900 --> 00:09:18,540
we want to send into the set--
in this case, dog, and then

195
00:09:18,540 --> 00:09:20,230
Spider, and then Gregg.

196
00:09:20,230 --> 00:09:24,020
To remove an item, we
simply call srem for a move

197
00:09:24,020 --> 00:09:27,640
and send in the set name and
the value we want to remove.

198
00:09:27,640 --> 00:09:29,640
Then, to list out all
the members of a set,

199
00:09:29,640 --> 00:09:32,640
we call smembers, sending
in the name of the set,

200
00:09:32,640 --> 00:09:34,140
in this case, names.

201
00:09:34,140 --> 00:09:35,740
And then we'll
specify what to do

202
00:09:35,740 --> 00:09:38,067
when the set gets
returned, in this case,

203
00:09:38,067 --> 00:09:39,150
log it out to the console.

204
00:09:41,980 --> 00:09:44,480
Now we need to jump
back into our join event

205
00:09:44,480 --> 00:09:45,960
listener on our server.

206
00:09:45,960 --> 00:09:48,550
When somebody joins, the
first thing we need to do

207
00:09:48,550 --> 00:09:51,820
is, we're going to emit
the add chatter event.

208
00:09:51,820 --> 00:09:54,710
We're going to broadcast
it to all of our clients,

209
00:09:54,710 --> 00:09:56,920
so we can add that chatter.

210
00:09:56,920 --> 00:10:02,150
Then we need to add this
chatter to our Redis set.

211
00:10:02,150 --> 00:10:04,530
We're going to call
the set chatters.

212
00:10:04,530 --> 00:10:08,520
Now, back in our client, we
need to define the add chatter

213
00:10:08,520 --> 00:10:09,206
listener.

214
00:10:09,206 --> 00:10:11,080
And this will invoke a
callback that receives

215
00:10:11,080 --> 00:10:12,960
the name of this new chatter.

216
00:10:12,960 --> 00:10:15,320
And here, we'll simply
build a new jQuery element

217
00:10:15,320 --> 00:10:17,900
with a new chatters name
and then append that

218
00:10:17,900 --> 00:10:19,180
to the chatters element.

219
00:10:22,120 --> 00:10:24,260
So we add this new
chatter when they join.

220
00:10:24,260 --> 00:10:25,840
And we let everyone
know about it.

221
00:10:25,840 --> 00:10:28,570
But what if there is already
chatters in the chat room?

222
00:10:28,570 --> 00:10:32,070
What if there's already
users in our set?

223
00:10:32,070 --> 00:10:33,400
We need to check for that.

224
00:10:33,400 --> 00:10:37,620
So we'll use our redis client
to list out all of the people

225
00:10:37,620 --> 00:10:41,660
in our set, well, all the names,
and then, on that callback,

226
00:10:41,660 --> 00:10:44,270
we'll iterate through
each of the names.

227
00:10:44,270 --> 00:10:46,400
And then, on our client,
which just connected,

228
00:10:46,400 --> 00:10:52,180
we'll emit add chatter
and send in each name.

229
00:10:52,180 --> 00:10:55,120
Last thing we need to do
is remove a chatter when

230
00:10:55,120 --> 00:10:57,740
they're WebSocket disconnects.

231
00:10:57,740 --> 00:11:01,930
So we'll say, on the
disconnect event,

232
00:11:01,930 --> 00:11:06,020
get their current nickname,
broadcast the remove chatter

233
00:11:06,020 --> 00:11:08,710
event to all of
our other clients,

234
00:11:08,710 --> 00:11:12,295
and then remove them
from our Redis set.

235
00:11:12,295 --> 00:11:13,670
Then, on the client
side, we need

236
00:11:13,670 --> 00:11:16,000
to listen for that
remove chatter event,

237
00:11:16,000 --> 00:11:19,000
and when that gets called,
we'll simply use some jQuery

238
00:11:19,000 --> 00:11:23,160
to remove it from the list.

239
00:11:23,160 --> 00:11:25,230
So now, if we jump
back into our browser,

240
00:11:25,230 --> 00:11:26,840
we can send in a message.

241
00:11:26,840 --> 00:11:29,170
You'll notice Dog is
already connected.

242
00:11:29,170 --> 00:11:32,600
We'll start up a new client.

243
00:11:32,600 --> 00:11:37,230
And look, we can see
that both Spider and Dog

244
00:11:37,230 --> 00:11:38,844
are connected users.

245
00:11:41,810 --> 00:11:43,814
Let's even connect
another client.

246
00:11:43,814 --> 00:11:44,980
So here, we'll connect Greg.

247
00:11:44,980 --> 00:11:49,290
And we can see that all
three people are in the room.

248
00:11:49,290 --> 00:11:53,430
And everybody can
see who is chatting.

249
00:11:53,430 --> 00:11:57,020
All right, we have a
chatter application.

250
00:11:57,020 --> 00:11:59,790
It's a real time web
node application.

251
00:11:59,790 --> 00:12:01,920
And now it's time for
you to get into some

252
00:12:01,920 --> 00:12:04,220
of those last challenges.

253
00:12:04,220 --> 00:12:05,900
And I'll see you
in the outro video.

254
00:12:05,900 --> 00:12:07,620
Good luck.

