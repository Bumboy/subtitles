1
00:00:01,210 --> 00:00:03,830
[SINGING] Your online
application's starting to fail.

2
00:00:03,830 --> 00:00:07,510
It's crawling on the network
just as fast as a snail.

3
00:00:07,510 --> 00:00:10,740
We need evented programming
starting from the top.

4
00:00:10,740 --> 00:00:13,230
Better write some code so
the world doesn't stop.

5
00:00:16,010 --> 00:00:19,300
With a non-blocking model,
we will be just fine.

6
00:00:19,300 --> 00:00:22,340
Built on Google
Chrome's V8 runtime.

7
00:00:22,340 --> 00:00:25,760
And all you need to do is
write some JavaScript code,

8
00:00:25,760 --> 00:00:28,145
and use the Real
Time Web with Node.

9
00:00:32,544 --> 00:00:34,210
You're watching Real
Time Web with Node.

10
00:00:34,210 --> 00:00:35,790
And this is level
five, where we're

11
00:00:35,790 --> 00:00:38,880
going to be going over express.

12
00:00:38,880 --> 00:00:41,640
As you saw with Node,
it's a very low level,

13
00:00:41,640 --> 00:00:43,140
which means you're
probably going

14
00:00:43,140 --> 00:00:47,880
to want to build a web framework
if you're building a big web

15
00:00:47,880 --> 00:00:52,060
application or better yet,
use somebody else's web

16
00:00:52,060 --> 00:00:56,340
framework, which sits on top
of Node to build a big web app.

17
00:00:56,340 --> 00:00:59,880
Express is a Sinatra
inspired web development

18
00:00:59,880 --> 00:01:01,309
framework for Node.

19
00:01:01,309 --> 00:01:02,850
Sinatra, in case
you're not familiar,

20
00:01:02,850 --> 00:01:06,090
is a simple web development
framework for Ruby.

21
00:01:06,090 --> 00:01:07,870
And it takes some
inspiration from that.

22
00:01:07,870 --> 00:01:09,730
It gives you stuff
like easy route URLS

23
00:01:09,730 --> 00:01:12,620
for callbacks, middleware,
an environment based

24
00:01:12,620 --> 00:01:16,149
configuration, redirection
helpers, and file uploads.

25
00:01:16,149 --> 00:01:17,690
So it gives you a
lot of codes you're

26
00:01:17,690 --> 00:01:20,450
going to need out of the box
to start building websites.

27
00:01:20,450 --> 00:01:24,064
In this level, we're going to
go over some of the basics.

28
00:01:24,064 --> 00:01:25,480
To start building
our express app,

29
00:01:25,480 --> 00:01:28,472
the first thing we got to
do is require the library.

30
00:01:28,472 --> 00:01:29,930
If you don't yet
have it installed,

31
00:01:29,930 --> 00:01:32,640
you can run npm install express.

32
00:01:32,640 --> 00:01:35,510
And we're going to do --save.

33
00:01:35,510 --> 00:01:37,100
What that's going
to do is not only

34
00:01:37,100 --> 00:01:40,280
install the module in
our Node modules folder,

35
00:01:40,280 --> 00:01:43,330
but also add it to
our dependencies

36
00:01:43,330 --> 00:01:47,100
file, our package.json.

37
00:01:47,100 --> 00:01:49,060
Next, we'll create an
instance of express

38
00:01:49,060 --> 00:01:51,420
by invoking the
express function.

39
00:01:51,420 --> 00:01:54,260
Then we can start
defining endpoints.

40
00:01:54,260 --> 00:01:58,040
Here we're going to define an
endpoint at the root route,

41
00:01:58,040 --> 00:01:59,950
so if someone does
a get request,

42
00:01:59,950 --> 00:02:03,560
it's going to call this
callback we're sending in.

43
00:02:03,560 --> 00:02:06,490
Here we'll call the
response.sendfile,

44
00:02:06,490 --> 00:02:09,699
which will read in a file from
our file system and send it

45
00:02:09,699 --> 00:02:11,360
back with the response.

46
00:02:11,360 --> 00:02:14,670
Lastly, will tell to
listen on port 8080.

47
00:02:14,670 --> 00:02:17,480
Now if we run this code and we
call up our browser, local host

48
00:02:17,480 --> 00:02:20,810
port 8080, we'll see that
the index.html got loaded.

49
00:02:23,860 --> 00:02:27,110
Now let's take a look at
a more complex example.

50
00:02:27,110 --> 00:02:28,960
We want to create
an endpoint where I

51
00:02:28,960 --> 00:02:32,030
can send in a Twitter username.

52
00:02:32,030 --> 00:02:37,240
And it will call out to Twitter,
get the latest 10 Tweets,

53
00:02:37,240 --> 00:02:41,050
and then display those
back for our user.

54
00:02:41,050 --> 00:02:44,010
So to do that, first we're
going to need the request

55
00:02:44,010 --> 00:02:46,500
module and the URL module.

56
00:02:46,500 --> 00:02:49,640
Then we'll create a NuGet
endpoint, which takes

57
00:02:49,640 --> 00:02:52,730
in the tweets and the username.

58
00:02:52,730 --> 00:02:54,230
Notice the colon there.

59
00:02:54,230 --> 00:02:56,800
That means we have
a dynamic user name.

60
00:02:56,800 --> 00:02:59,560
Then we have our callback,
with a request and response.

61
00:02:59,560 --> 00:03:02,920
Inside there, we'll
grab the username out

62
00:03:02,920 --> 00:03:07,720
of the request parameters,
req.params.username.

63
00:03:07,720 --> 00:03:10,620
So if that's Gregg
or Eric, it's going

64
00:03:10,620 --> 00:03:13,210
to store that in the
username variable.

65
00:03:13,210 --> 00:03:15,010
Then we have a bunch
of different options

66
00:03:15,010 --> 00:03:17,218
we're going to specify from
the protocol to the host,

67
00:03:17,218 --> 00:03:19,420
to the path name, to the query.

68
00:03:19,420 --> 00:03:23,450
And lastly, we'll call
our request with our URL.

69
00:03:23,450 --> 00:03:26,690
The response will get returned
back from that function call.

70
00:03:26,690 --> 00:03:30,580
And we'll pipe the response back
in to the response that goes

71
00:03:30,580 --> 00:03:32,990
back to our user's browser.

72
00:03:32,990 --> 00:03:36,010
Before I show you this code
in action, there's one caveat.

73
00:03:36,010 --> 00:03:38,250
And that is, if you
try this code as is,

74
00:03:38,250 --> 00:03:39,420
it wouldn't quite work.

75
00:03:39,420 --> 00:03:41,710
That's because of
the Twitter API.

76
00:03:41,710 --> 00:03:44,670
It's changed since we
wrote this code so that you

77
00:03:44,670 --> 00:03:47,310
have to authenticate
even when you want

78
00:03:47,310 --> 00:03:51,570
to pull a user's Twitter
Stream and get the data back

79
00:03:51,570 --> 00:03:53,036
in JSON format.

80
00:03:53,036 --> 00:03:53,910
So keep that in mind.

81
00:03:53,910 --> 00:03:55,630
You'll have to add
a little more code

82
00:03:55,630 --> 00:03:57,880
if you really want to do this.

83
00:03:57,880 --> 00:03:59,740
Ok, let's check
this out in action.

84
00:03:59,740 --> 00:04:04,120
First thing we need to do
is start up our Node server.

85
00:04:04,120 --> 00:04:05,250
So there we go.

86
00:04:05,250 --> 00:04:07,480
Now if we want to go
ahead and hit that URL,

87
00:04:07,480 --> 00:04:10,980
we're going to use curl
to go to local host 8080

88
00:04:10,980 --> 00:04:14,360
and then give our
tweets/eallam-- because that's

89
00:04:14,360 --> 00:04:15,710
the name of the Twitter user.

90
00:04:15,710 --> 00:04:17,300
We want to get
the JSON feedback.

91
00:04:17,300 --> 00:04:19,240
And there it is.

92
00:04:19,240 --> 00:04:20,860
And it's not that pretty.

93
00:04:20,860 --> 00:04:24,680
Luckily, I know another NPM
module called pretty JSON

94
00:04:24,680 --> 00:04:26,890
we can install
globally, and that

95
00:04:26,890 --> 00:04:30,310
will give us a little
executable so we

96
00:04:30,310 --> 00:04:33,890
can pipe the output into
that executable, pretty JSON.

97
00:04:33,890 --> 00:04:37,950
And now we have pretty JSON
with all the information

98
00:04:37,950 --> 00:04:40,790
from that user's Twitter stream.

99
00:04:40,790 --> 00:04:43,080
Instead of simply
piping the JSON through,

100
00:04:43,080 --> 00:04:46,620
let's figure out how we
might take that JSON data

101
00:04:46,620 --> 00:04:50,995
and put it into our web
browser using some templates.

102
00:04:53,620 --> 00:04:56,930
First thing we need to do is
install a templating library.

103
00:04:56,930 --> 00:04:59,310
For this example,
we'll use ejs, which

104
00:04:59,310 --> 00:05:01,840
stands for embedded JavaScript.

105
00:05:01,840 --> 00:05:06,120
We'll install it
with npm install ejs.

106
00:05:06,120 --> 00:05:07,892
By default, it will
look for templates

107
00:05:07,892 --> 00:05:08,975
under the views directory.

108
00:05:12,770 --> 00:05:14,820
Here we are back
in our application.

109
00:05:14,820 --> 00:05:16,650
Now instead of using
pipe, we're going

110
00:05:16,650 --> 00:05:19,060
to call request and
give it a callback,

111
00:05:19,060 --> 00:05:23,550
so that we can have access to
the error, response, and body.

112
00:05:23,550 --> 00:05:25,570
The first thing we
want to do is parse

113
00:05:25,570 --> 00:05:28,680
the JSON, which we got
back in the response body.

114
00:05:28,680 --> 00:05:31,060
We'll set that equal
to the Tweets variable.

115
00:05:31,060 --> 00:05:33,090
Next, we need to
define what data

116
00:05:33,090 --> 00:05:35,160
is going to go
into our template,

117
00:05:35,160 --> 00:05:37,200
so we can render out the Tweets.

118
00:05:37,200 --> 00:05:41,090
We do this by setting the locals
property on our Express response.

119
00:05:41,090 --> 00:05:45,540
Here we'll pass in the array
of Tweets and the username.

120
00:05:45,540 --> 00:05:47,410
And lastly, we'll
tell our response

121
00:05:47,410 --> 00:05:49,720
which template to render out.

122
00:05:49,720 --> 00:05:55,674
In this case, tweets.ejs, which
stands for embedded JavaScript.

123
00:05:55,674 --> 00:05:57,090
If we open up this
template, we'll

124
00:05:57,090 --> 00:05:59,430
see that we have some HTML.

125
00:05:59,430 --> 00:06:03,400
And in there, we have <%=

126
00:06:03,400 --> 00:06:05,260
and then, we've got name.

127
00:06:05,260 --> 00:06:07,680
And then, we end it with the %>.

128
00:06:07,680 --> 00:06:11,030
That's telling our
Node app to render

129
00:06:11,030 --> 00:06:14,001
that variable inside our HTML.

130
00:06:14,001 --> 00:06:15,500
Then we'll get a
list of the Tweets.

131
00:06:15,500 --> 00:06:19,020
You'll notice here we're
using <% percentage.

132
00:06:19,020 --> 00:06:20,590
And since Tweets
is an array, we'll

133
00:06:20,590 --> 00:06:24,820
do tweets.forEach and
send in a function

134
00:06:24,820 --> 00:06:27,670
to invoke on each of the Tweets.

135
00:06:27,670 --> 00:06:30,400
Inside of there, we can
simply use a list item

136
00:06:30,400 --> 00:06:32,880
and then call
tweet.text because we

137
00:06:32,880 --> 00:06:34,890
know each Tweet is
an object, which

138
00:06:34,890 --> 00:06:38,020
has a text key, which contains
the contents of a Tweet.

139
00:06:38,020 --> 00:06:42,240
Then we simply need
to end our forEach function.

140
00:06:42,240 --> 00:06:43,900
If you're coming
from Ruby on Rails,

141
00:06:43,900 --> 00:06:46,020
this probably looks
really familiar

142
00:06:46,020 --> 00:06:49,050
if you're not coming
from Rails, it might not.

143
00:06:49,050 --> 00:06:54,950
So again, we use <%= if we want
the value that gets returned

144
00:06:54,950 --> 00:06:57,670
from the expression we put
inside of there to get printed

145
00:06:57,670 --> 00:06:59,250
out into the page.

146
00:06:59,250 --> 00:07:01,750
So in our case, name, we want
to print that out to the page.

147
00:07:01,750 --> 00:07:04,850
But if we just want
to run some code,

148
00:07:04,850 --> 00:07:08,130
in this case just
iterate through an array,

149
00:07:08,130 --> 00:07:10,500
we just use <%.

150
00:07:10,500 --> 00:07:12,480
So the result of going
through that forEach

151
00:07:12,480 --> 00:07:14,240
won't get printed out the page.

152
00:07:14,240 --> 00:07:16,420
But every time we loop
through that, it's going

153
00:07:16,420 --> 00:07:19,320
to print out another list item.

154
00:07:19,320 --> 00:07:24,010
Now if we jump into our
console, we'll run our Node app.

155
00:07:24,010 --> 00:07:25,800
If we jump over
into our browser,

156
00:07:25,800 --> 00:07:29,320
we'll go to
localhost slash codeschool this time.

157
00:07:29,320 --> 00:07:32,180
And we've got all the
Tweets from Code School.

158
00:07:32,180 --> 00:07:34,210
So there's some of
the basics of Express.

159
00:07:34,210 --> 00:07:36,160
Of course, there's
a lot more to it.

160
00:07:36,160 --> 00:07:38,791
If you want to start building
big web apps, you can.

161
00:07:38,791 --> 00:07:40,540
But why don't you jump
into the challenges

162
00:07:40,540 --> 00:07:42,380
and practice some
of those basics?

163
00:07:42,380 --> 00:07:44,960
And I'll see you
in the next level.

