1
00:00:04,160 --> 00:00:06,480
So in section 1, we
covered property binding

2
00:00:06,480 --> 00:00:08,189
and class binding.

3
00:00:08,189 --> 00:00:10,340
And then we covered
event binding.

4
00:00:10,340 --> 00:00:13,030
Both of these are a
one-way binding-- one

5
00:00:13,030 --> 00:00:15,400
in that direction,
one in that direction.

6
00:00:15,400 --> 00:00:18,710
But how might we bind
in both directions?

7
00:00:18,710 --> 00:00:21,240
Like when we have
a form field and we

8
00:00:21,240 --> 00:00:23,950
want to keep it in sync
between the data we

9
00:00:23,950 --> 00:00:26,890
have over in the JavaScript
and the value in the HTML?

10
00:00:29,870 --> 00:00:32,119
First off, let's
add an input field

11
00:00:32,119 --> 00:00:34,950
in between the
plus and the minus.

12
00:00:34,950 --> 00:00:37,060
And we should be able
to adjust the quantity

13
00:00:37,060 --> 00:00:39,680
either by typing
a number in here

14
00:00:39,680 --> 00:00:43,200
or by pushing plus or minus.

15
00:00:43,200 --> 00:00:46,760
How do we make that work?

16
00:00:46,760 --> 00:00:48,390
Well given what
we know so far, we

17
00:00:48,390 --> 00:00:51,120
could start by using
property binding.

18
00:00:51,120 --> 00:00:54,600
So we could bind to
the value and bind

19
00:00:54,600 --> 00:00:56,910
that to the carPart.quantity.

20
00:00:56,910 --> 00:00:58,680
What would happen in this case?

21
00:00:58,680 --> 00:00:59,490
Let's see.

22
00:00:59,490 --> 00:01:02,260
So we increment using
plus and decrement.

23
00:01:02,260 --> 00:01:06,200
But now, when we set the
value by typing in 10--

24
00:01:06,200 --> 00:01:09,050
well it didn't remember that 10.

25
00:01:09,050 --> 00:01:10,280
That's not good.

26
00:01:10,280 --> 00:01:11,935
So we've only bound
in one direction.

27
00:01:14,740 --> 00:01:17,110
We could then use
event binding to listen

28
00:01:17,110 --> 00:01:19,280
for input on our event box.

29
00:01:19,280 --> 00:01:22,479
So here we could listen
for the input event.

30
00:01:22,479 --> 00:01:24,020
And when it happens,
we're just going

31
00:01:24,020 --> 00:01:25,790
to write some code here in-line.

32
00:01:25,790 --> 00:01:31,750
We'll set carPart.quantity
equal to $event.target.value.

33
00:01:32,230 --> 00:01:34,170
Now let's see what happens.

34
00:01:34,170 --> 00:01:37,040
We can change the quantity
using the input field.

35
00:01:37,040 --> 00:01:40,030
And it remembers.

36
00:01:40,030 --> 00:01:43,900
Sweet-- information
is flowing two ways.

37
00:01:43,900 --> 00:01:46,050
But there's another
way to do this.

38
00:01:49,340 --> 00:01:50,940
This is where ngModel comes in.

39
00:01:50,940 --> 00:01:54,690
It allows us to have one
command to do two-way binding.

40
00:01:54,690 --> 00:01:59,750
You can see this ngModel command
uses both square brackets

41
00:01:59,750 --> 00:02:05,150
and parentheses to signify
that we have two-way binding.

42
00:02:05,150 --> 00:02:08,210
And we just specify
the component property

43
00:02:08,210 --> 00:02:10,199
that we want to bind on.

44
00:02:10,199 --> 00:02:12,360
And as you can see,
it works just like it

45
00:02:12,360 --> 00:02:14,380
did on the previous slide.

46
00:02:14,380 --> 00:02:16,660
This syntax has a funny name.

47
00:02:16,660 --> 00:02:20,880
Sometimes it's called
banana in a box.

48
00:02:20,880 --> 00:02:22,926
Can you see why,
with the parentheses

49
00:02:22,926 --> 00:02:23,925
and the square brackets?

50
00:02:27,920 --> 00:02:31,320
It's important to know that
when we use the ngModel syntax,

51
00:02:31,320 --> 00:02:35,790
we can only set it equal
to a data-bound property.

52
00:02:35,790 --> 00:02:39,220
So because of that, we'll use
it mostly for form fields.

53
00:02:39,220 --> 00:02:41,650
Here are two different
component properties

54
00:02:41,650 --> 00:02:44,080
like user age and first name.

55
00:02:44,080 --> 00:02:45,250
Those would be great.

56
00:02:45,250 --> 00:02:48,420
But if we try to set
this equal to a component

57
00:02:48,420 --> 00:02:51,640
method, for example,
it's going to error out.

58
00:02:51,640 --> 00:02:55,030
It won't work at all.

59
00:02:55,030 --> 00:02:57,580
In this level, we learned
that the ngModel syntax

60
00:02:57,580 --> 00:03:00,880
allows us to specify a
component property which

61
00:03:00,880 --> 00:03:03,560
will use two-way binding.

62
00:03:03,560 --> 00:03:05,060
We also learned
that two-way binding

63
00:03:05,060 --> 00:03:07,160
means that if the component
property is modified

64
00:03:07,160 --> 00:03:11,130
inside the component
or inside our web page,

65
00:03:11,130 --> 00:03:12,220
it will stay in sync.

66
00:03:15,100 --> 00:03:16,930
Have some fun with
the challenges

67
00:03:16,930 --> 00:03:20,402
with that banana in a box.

68
00:03:20,402 --> 00:03:21,680
[BEEP BEEP]

69
00:03:21,680 --> 00:03:24,000
Box, balked, bok,
[CHICKEN NOISE].

70
00:03:24,000 --> 00:03:24,500
[BEEP BEEP]

71
00:03:24,500 --> 00:03:25,070
--binding.

72
00:03:25,070 --> 00:03:26,737
Whereas where-- whereas where?

73
00:03:26,737 --> 00:03:27,320
Whereas where?

74
00:03:27,320 --> 00:03:27,820
[BEEP BEEP]

75
00:03:27,820 --> 00:03:28,880
Ready-- blah.

76
00:03:28,880 --> 00:03:29,630
We'll do it again.

77
00:03:29,630 --> 00:03:30,130
[BEEP BEEP]

78
00:03:30,130 --> 00:03:31,560
I don't always like banana.

79
00:03:31,560 --> 00:03:34,850
But when I do, I
put it in a box.

