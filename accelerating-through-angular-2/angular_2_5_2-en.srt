1
00:00:02,040 --> 00:00:05,050
Welcome back-- and now it's
time to use the internet.

2
00:00:05,050 --> 00:00:07,000
What could possibly go wrong?

3
00:00:07,000 --> 00:00:10,040
So up until now, we've
been using mock data.

4
00:00:10,040 --> 00:00:13,930
How might we reach out to the
internet for our car parts?

5
00:00:13,930 --> 00:00:18,490
Well our car parts currently
asked our service for data.

6
00:00:18,490 --> 00:00:20,870
So it's really
inside the service

7
00:00:20,870 --> 00:00:22,790
that we want to fetch
the appropriate data

8
00:00:22,790 --> 00:00:28,569
from the internet and return
that back onto our template.

9
00:00:28,569 --> 00:00:30,110
Before we get into
it, it's important

10
00:00:30,110 --> 00:00:33,730
that you understand how Angular
loads first in our browser

11
00:00:33,730 --> 00:00:35,900
and then loads data.

12
00:00:35,900 --> 00:00:39,530
So when our browser first
tries to access our website,

13
00:00:39,530 --> 00:00:42,130
it sends back HTML CSS.

14
00:00:42,130 --> 00:00:43,870
It loads up Angular.

15
00:00:43,870 --> 00:00:45,730
And then when it's
done loading, it'll

16
00:00:45,730 --> 00:00:49,940
go back and fetch API
data like car parts.

17
00:00:49,940 --> 00:00:52,080
And then our server
sends back JSON,

18
00:00:52,080 --> 00:00:55,950
which then loads into our page.

19
00:00:55,950 --> 00:00:58,460
Let's go through the steps
needed to make this happen.

20
00:00:58,460 --> 00:01:02,850
First, we need to create a
JSON file with car parts data.

21
00:01:02,850 --> 00:01:05,129
We'll call it car-parts.json.

22
00:01:05,129 --> 00:01:06,900
Then we'll ensure our
application includes

23
00:01:06,900 --> 00:01:10,430
the libraries it needs
to do HTTP calls.

24
00:01:10,430 --> 00:01:15,670
Then we'll tell our injector
about the HTTP provider.

25
00:01:15,670 --> 00:01:19,210
Then we'll inject the HTTP
dependency into our service

26
00:01:19,210 --> 00:01:21,180
and make the get request.

27
00:01:21,180 --> 00:01:22,900
And lastly, we'll
listen for data

28
00:01:22,900 --> 00:01:27,870
returned by this request
inside our car parts component.

29
00:01:27,870 --> 00:01:28,850
The first step is easy.

30
00:01:28,850 --> 00:01:32,410
We just brought over our mock
data into our car-parts.json

31
00:01:32,410 --> 00:01:33,470
file.

32
00:01:33,470 --> 00:01:36,580
But I've wrapped our
array in an object

33
00:01:36,580 --> 00:01:40,840
to make it feel a little more
realistic in that data object.

34
00:01:40,840 --> 00:01:43,540
So we'll have to keep that in
mind-- that to get to the data,

35
00:01:43,540 --> 00:01:45,955
we need to go through
that data keyword.

36
00:01:48,840 --> 00:01:51,830
Next we need to make sure we're
including the right libraries.

37
00:01:51,830 --> 00:01:54,110
The HTTP library
provides the get method

38
00:01:54,110 --> 00:01:56,080
we'll need to call
out to the internet.

39
00:01:56,080 --> 00:01:59,290
And the RxJS library
stands for Reactive Ex

40
00:01:59,290 --> 00:02:02,910
and provides an advanced
tooling for our HTTP calls.

41
00:02:02,910 --> 00:02:05,436
If you use the five
minute quick start-- well

42
00:02:05,436 --> 00:02:07,060
it's already including
these libraries.

43
00:02:07,060 --> 00:02:10,389
You don't need to
worry about it.

44
00:02:10,389 --> 00:02:12,610
Step three is we need
to register a provider

45
00:02:12,610 --> 00:02:14,540
to our dependency injector.

46
00:02:14,540 --> 00:02:17,420
And we'll do that
inside app component.

47
00:02:17,420 --> 00:02:21,690
Well import the HTTP providers
from our Angular library.

48
00:02:21,690 --> 00:02:26,590
And then inside providers,
we'll specify a second provider.

49
00:02:26,590 --> 00:02:31,010
Now we'll be able to inject
the library when we need it.

50
00:02:31,010 --> 00:02:34,950
Time to inject it and use it
to call out to the internet.

51
00:02:34,950 --> 00:02:40,750
So first, we need to import our
HTTP library as well as a part

52
00:02:40,750 --> 00:02:42,500
of the Reactive Ex library.

53
00:02:42,500 --> 00:02:44,790
We just need a map in this case.

54
00:02:44,790 --> 00:02:47,100
Then we'll create a
constructor so we can

55
00:02:47,100 --> 00:02:50,370
inject HTTP as a dependency.

56
00:02:50,370 --> 00:02:54,200
We can do this because our
service class is injectable.

57
00:02:54,200 --> 00:02:56,830
If we weren't using the
injectable decorator,

58
00:02:56,830 --> 00:03:00,420
then our service class couldn't
have additional dependencies.

59
00:03:00,420 --> 00:03:05,120
Now inside the car parts method,
we'll write a bunch of code.

60
00:03:05,120 --> 00:03:06,620
And there's a lot going on here.

61
00:03:06,620 --> 00:03:09,420
So I'm going to split it
out into multiple pieces.

62
00:03:09,420 --> 00:03:11,520
And we'll go through
it step by step.

63
00:03:11,520 --> 00:03:15,140
First, calling the get
method and fetching our JSON

64
00:03:15,140 --> 00:03:18,440
file-- you might expect
this to return a promise.

65
00:03:18,440 --> 00:03:21,020
But it actually
returns an observable.

66
00:03:21,020 --> 00:03:23,170
Observables give us
additional functionality

67
00:03:23,170 --> 00:03:26,710
on our HTTP calls, one of
which is to treat the return

68
00:03:26,710 --> 00:03:28,580
value like an array.

69
00:03:28,580 --> 00:03:33,040
Which leads us to
the map method.

70
00:03:33,040 --> 00:03:34,150
We call the map method.

71
00:03:34,150 --> 00:03:36,510
And then we're saying
for the data returned,

72
00:03:36,510 --> 00:03:38,470
do this to the response.

73
00:03:38,470 --> 00:03:39,720
And we're using the fat arrow.

74
00:03:39,720 --> 00:03:45,070
We call JSON on the response
to parse the string into JSON.

75
00:03:45,070 --> 00:03:48,470
And the array we want, remember,
is under that data keyword.

76
00:03:48,470 --> 00:03:50,990
So we call .data.

77
00:03:50,990 --> 00:03:53,500
Lastly, we tell our
TypeScript compiler

78
00:03:53,500 --> 00:03:56,890
to treat what gets returned
like an array of CarParts.

79
00:03:59,790 --> 00:04:01,590
Back in our car
parts component file,

80
00:04:01,590 --> 00:04:04,640
we need to change some code
because our service now

81
00:04:04,640 --> 00:04:06,590
returns an observable object.

82
00:04:06,590 --> 00:04:08,880
And we need to
subscribe to that stream

83
00:04:08,880 --> 00:04:12,280
and tell our component what
to do when that data arrives.

84
00:04:12,280 --> 00:04:14,330
So we'll write "subscribe."

85
00:04:14,330 --> 00:04:17,029
And when our carParts
arrive, we'll

86
00:04:17,029 --> 00:04:21,410
set this.carParts-- our
local carParts array-- equal

87
00:04:21,410 --> 00:04:23,190
to the data that we receive.

88
00:04:26,160 --> 00:04:29,350
If we called this up in our
browser, we would see nothing.

89
00:04:29,350 --> 00:04:30,480
It would break.

90
00:04:30,480 --> 00:04:31,930
And it would give
us this error--

91
00:04:31,930 --> 00:04:34,850
cannot read property
length of undefined.

92
00:04:34,850 --> 00:04:38,370
And it comes down to
this line of code.

93
00:04:38,370 --> 00:04:41,950
this.carParts--
well, is undefined.

94
00:04:41,950 --> 00:04:44,160
And underneath the covers,
it's trying to call that

95
00:04:44,160 --> 00:04:45,195
length on it.

96
00:04:45,195 --> 00:04:46,700
Hmm.

97
00:04:46,700 --> 00:04:48,600
Well remember that
graph I showed you

98
00:04:48,600 --> 00:04:50,500
at the beginning
of this section.

99
00:04:50,500 --> 00:04:53,810
Angular loads and then
it evaluates the code.

100
00:04:53,810 --> 00:04:56,720
But we haven't called
out to get our data yet.

101
00:04:56,720 --> 00:05:00,710
So it's calling
this.carParts.length,

102
00:05:00,710 --> 00:05:04,750
but this.carParts is
currently undefined.

103
00:05:04,750 --> 00:05:08,420
So we need to make
sure that this.carParts

104
00:05:08,420 --> 00:05:11,200
is an array before we
try to use this for loop.

105
00:05:14,200 --> 00:05:18,110
One way to solve this problem
is to use the arrays "is array"

106
00:05:18,110 --> 00:05:22,030
function to make sure
this.carParts is an array

107
00:05:22,030 --> 00:05:23,480
before we try to loop over it.

108
00:05:26,120 --> 00:05:27,730
Now if we jump back
into our browser,

109
00:05:27,730 --> 00:05:31,320
we can see that we can now
increment and decrement

110
00:05:31,320 --> 00:05:36,790
our different car parts all
loaded across the internet.

111
00:05:36,790 --> 00:05:39,650
Before we move onto challenges,
I've got a few last thoughts.

112
00:05:39,650 --> 00:05:43,640
First of all, we didn't put any
error handling in this code.

113
00:05:43,640 --> 00:05:45,830
And if you're actually
calling across the internet

114
00:05:45,830 --> 00:05:48,760
to a data API,
you're going to want

115
00:05:48,760 --> 00:05:52,430
to code in error handling to
make sure you fail gracefully

116
00:05:52,430 --> 00:05:55,010
when that API doesn't work.

117
00:05:55,010 --> 00:05:58,400
Also, since we isolated our
network calls as a service,

118
00:05:58,400 --> 00:06:01,980
we could easily write
a RacingDataServiceMock

119
00:06:01,980 --> 00:06:06,430
and inject it when we're
testing or developing offline.

120
00:06:06,430 --> 00:06:09,960
Lastly, observables
are really cool.

121
00:06:09,960 --> 00:06:15,129
And they're worth learning about
if you do lots of HTTP calls.

122
00:06:15,129 --> 00:06:16,670
So what did we learn
in this section?

123
00:06:16,670 --> 00:06:19,250
Well, Angular apps
usually load data

124
00:06:19,250 --> 00:06:23,660
using service classes after
the application is initialized

125
00:06:23,660 --> 00:06:25,340
and running.

126
00:06:25,340 --> 00:06:28,860
We can use the HTTP library
through dependency injection

127
00:06:28,860 --> 00:06:31,040
to make internet calls.

128
00:06:31,040 --> 00:06:35,500
And our HTTP calls return an
observable, not a promise,

129
00:06:35,500 --> 00:06:38,120
which behaves more
like an array.

130
00:06:38,120 --> 00:06:41,690
So why don't you get your
hands dirty in the challenges.

131
00:06:41,690 --> 00:06:44,639
And I will see you
in the outro video.

132
00:06:44,639 --> 00:06:45,605
[BEEP BEEP]

133
00:06:45,605 --> 00:06:48,220
Still kind of sucks.

134
00:06:48,220 --> 00:06:49,250
No.

135
00:06:49,250 --> 00:06:49,886
So this is--

136
00:06:49,886 --> 00:06:50,760
[BEEP BEEP]

137
00:06:50,760 --> 00:06:52,570
Wow, if I read that,
I wouldn't understand.

138
00:06:52,570 --> 00:06:53,070
[BEEP BEEP]

139
00:06:53,070 --> 00:06:55,336
I'll just try to
put it in my words.

140
00:06:55,336 --> 00:06:55,835
Cool.

141
00:06:55,835 --> 00:06:57,196
These are your own words.

142
00:06:57,196 --> 00:06:57,695
Oh--

143
00:06:57,695 --> 00:06:59,560
[BEEP BEEP]

144
00:06:59,560 --> 00:07:01,690
That's one way to do it.

145
00:07:01,690 --> 00:07:02,749
That's hilarious.

146
00:07:02,749 --> 00:07:03,790
Did you just [INAUDIBLE]?

147
00:07:03,790 --> 00:07:04,690
All right, I like it.

148
00:07:04,690 --> 00:07:05,590
I like it.

149
00:07:05,590 --> 00:07:07,140
[BEEP BEEP]

