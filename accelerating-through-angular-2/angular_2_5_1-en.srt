1
00:00:00,000 --> 00:00:04,210
[SINGING] Put your pedal to
the metal and burn up the road.

2
00:00:04,210 --> 00:00:07,290
Start the race and
load Angular 2 code.

3
00:00:07,290 --> 00:00:11,470
A class decorator can
help you in this moment.

4
00:00:11,470 --> 00:00:14,980
Tune your engine with a
template and component.

5
00:00:14,980 --> 00:00:18,410
Use data binding to
drift through the turns.

6
00:00:18,410 --> 00:00:20,920
With import and export
separate your concerns.

7
00:00:20,920 --> 00:00:24,500
Inject your service
with your racing crew

8
00:00:24,500 --> 00:00:27,710
while Accelerating
Through Angular 2.

9
00:00:31,020 --> 00:00:33,560
You're watching Accelerating
Through Angular2.

10
00:00:33,560 --> 00:00:35,390
I'm Gregg Pollack, and
this is level 5,

11
00:00:35,390 --> 00:00:38,260
where we'll be talking
about services and HTTP.

12
00:00:41,020 --> 00:00:44,630
Let's take a second look at how
we're importing our mock data.

13
00:00:44,630 --> 00:00:47,170
Now, we're loading our CarParts
by importing our mock file,

14
00:00:47,170 --> 00:00:50,590
but this actually isn't the best
solution for working with data.

15
00:00:54,142 --> 00:00:55,600
This isn't the best
because we need

16
00:00:55,600 --> 00:00:58,710
to import mocks in every
file that needs this data.

17
00:00:58,710 --> 00:01:00,700
And if the way we access
this data changes,

18
00:01:00,700 --> 00:01:03,160
we'd have to change
it everywhere.

19
00:01:03,160 --> 00:01:08,090
Also, it's not easy to switch
between real and mock data.

20
00:01:08,090 --> 00:01:10,210
And this sort of data
loading is actually

21
00:01:10,210 --> 00:01:12,380
best left to service classes.

22
00:01:15,050 --> 00:01:18,690
Services are used to organize
and share code across our app,

23
00:01:18,690 --> 00:01:22,440
and they're usually where we
create our data access methods.

24
00:01:22,440 --> 00:01:24,380
So in car parts
component, we're going

25
00:01:24,380 --> 00:01:26,560
to ask our service for data.

26
00:01:26,560 --> 00:01:30,610
We'll create a service called
racing data service dot ts.

27
00:01:30,610 --> 00:01:33,150
And that file will be
in charge of fetching

28
00:01:33,150 --> 00:01:35,410
the appropriate data,
which in this case,

29
00:01:35,410 --> 00:01:37,380
will come from our mocks file.

30
00:01:37,380 --> 00:01:40,309
Let's start out by creating
the simplest service,

31
00:01:40,309 --> 00:01:41,850
and then we'll learn
something called

32
00:01:41,850 --> 00:01:44,550
dependency injection that'll
make it even more powerful.

33
00:01:47,570 --> 00:01:49,880
So here's our new
racing data service.

34
00:01:49,880 --> 00:01:53,990
Inside there, we will import
our CarParts from our mocks,

35
00:01:53,990 --> 00:01:56,270
we'll create the class
racing data service,

36
00:01:56,270 --> 00:01:58,580
and inside of it,
it'll have one method

37
00:01:58,580 --> 00:02:02,610
called getCarParts that'll
simply return the CarParts.

38
00:02:02,610 --> 00:02:05,230
Then to use this
service, we'll import it.

39
00:02:05,230 --> 00:02:08,180
And inside our ngOnInIt,
we'll create a new variable

40
00:02:08,180 --> 00:02:12,070
called racing data service that
has a new instance of racing

41
00:02:12,070 --> 00:02:13,300
data service.

42
00:02:13,300 --> 00:02:16,160
And we'll set this dot car
parts equal to the return

43
00:02:16,160 --> 00:02:18,400
value of getCarParts.

44
00:02:18,400 --> 00:02:19,290
So this is great.

45
00:02:19,290 --> 00:02:21,040
We've decoupled our data layer.

46
00:02:21,040 --> 00:02:23,470
But there's still
some stuff that sucks

47
00:02:23,470 --> 00:02:25,530
about this implementation.

48
00:02:25,530 --> 00:02:27,410
Classes using this
service must know

49
00:02:27,410 --> 00:02:29,780
how to create a
racing data service,

50
00:02:29,780 --> 00:02:33,100
and if that ever changes, we
have to change it everywhere.

51
00:02:33,100 --> 00:02:35,340
And we'll be creating a
new racing data service

52
00:02:35,340 --> 00:02:39,450
every time we need to
fetch CarParts, which you know, 

53
00:02:39,450 --> 00:02:41,060
is going to use up more memory.

54
00:02:41,060 --> 00:02:44,230
And it'll be harder to
switch between a mock service

55
00:02:44,230 --> 00:02:48,400
and a real one later on.

56
00:02:48,400 --> 00:02:51,100
This is where dependency
injection comes in.

57
00:02:51,100 --> 00:02:53,100
When you run an
Angular 2 application,

58
00:02:53,100 --> 00:02:55,430
it creates a
dependency injector.

59
00:02:55,430 --> 00:02:57,560
An injector is in
charge of knowing

60
00:02:57,560 --> 00:02:59,360
how to create and send things.

61
00:02:59,360 --> 00:03:01,830
So here's an example
of how it works.

62
00:03:01,830 --> 00:03:05,190
If the CarParts components
needs that racing data service,

63
00:03:05,190 --> 00:03:08,860
it's going to ask the
dependency injector, hey,

64
00:03:08,860 --> 00:03:11,010
could I have
RacingDataService?

65
00:03:11,010 --> 00:03:13,280
The dependency injector
might say, oh yeah,

66
00:03:13,280 --> 00:03:14,500
I know how to do that.

67
00:03:14,500 --> 00:03:18,780
So it goes and creates a
new RacingDataService

68
00:03:18,780 --> 00:03:22,080
and delivers that to CarParts.

69
00:03:22,080 --> 00:03:24,780
The injector knows
how to inject,

70
00:03:24,780 --> 00:03:29,540
which means create and
send our dependencies,

71
00:03:29,540 --> 00:03:33,880
or the classes
that we depend on.

72
00:03:33,880 --> 00:03:37,020
One benefit of this is that
if the injector already

73
00:03:37,020 --> 00:03:40,120
created a service, you can have
it resend the same service.

74
00:03:40,120 --> 00:03:43,180
So let's say we have
a car cart component.

75
00:03:43,180 --> 00:03:45,970
And it also wants the
RacingDataService.

76
00:03:45,970 --> 00:03:48,050
It could ask the
dependency injector.

77
00:03:48,050 --> 00:03:51,930
And the injector knows
hey, I already created one,

78
00:03:51,930 --> 00:03:52,470
here it is.

79
00:03:55,370 --> 00:03:56,960
But how does the
dependency injector

80
00:03:56,960 --> 00:03:59,470
know what it can inject?

81
00:03:59,470 --> 00:04:04,010
Well, we have to tell it by
registering providers with it.

82
00:04:04,010 --> 00:04:06,630
So here, our
dependency injector has

83
00:04:06,630 --> 00:04:09,360
three things it
can provide that it

84
00:04:09,360 --> 00:04:12,130
knows how to create and send.

85
00:04:12,130 --> 00:04:15,170
In order to make this work
with our RacingDataService,

86
00:04:15,170 --> 00:04:18,000
there's three steps
we need to follow.

87
00:04:18,000 --> 00:04:20,610
First, we need to add
the injectable decorator

88
00:04:20,610 --> 00:04:22,840
to RacingDataService.

89
00:04:22,840 --> 00:04:25,660
Then, we need to let our
injector know about the service

90
00:04:25,660 --> 00:04:27,700
by naming it as a provider.

91
00:04:27,700 --> 00:04:30,390
And then third, inject the
dependency into our car parts

92
00:04:30,390 --> 00:04:30,890
component.

93
00:04:33,430 --> 00:04:34,360
Step one.

94
00:04:34,360 --> 00:04:36,110
We need to turn our
service into something

95
00:04:36,110 --> 00:04:38,830
that can be safely used by
our dependency injector.

96
00:04:38,830 --> 00:04:42,470
We do this by first importing
the injectable decorator

97
00:04:42,470 --> 00:04:43,590
from Angular.

98
00:04:43,590 --> 00:04:46,120
And then we simply
use it at injectable.

99
00:04:46,120 --> 00:04:47,495
And don't forget
the parentheses.

100
00:04:50,330 --> 00:04:53,090
Next, we let our injector
know about the service.

101
00:04:53,090 --> 00:04:54,850
And we want all of
our subcomponents

102
00:04:54,850 --> 00:04:57,490
to have access to
RacingDataService.

103
00:04:57,490 --> 00:05:01,060
So we'll register it as a
provider at the top level.

104
00:05:01,060 --> 00:05:03,600
Specifically, an app component.

105
00:05:03,600 --> 00:05:05,390
So here in app
component, we're going

106
00:05:05,390 --> 00:05:07,900
to import RacingDataService.

107
00:05:07,900 --> 00:05:10,980
And then we'll specify
it as a provider

108
00:05:10,980 --> 00:05:14,020
using the provider's metadata.

109
00:05:14,020 --> 00:05:17,340
Notice it's an array, so you
could have multiple providers.

110
00:05:17,340 --> 00:05:21,740
Now, subcomponents can ask
for or inject the RacingData

111
00:05:21,740 --> 00:05:23,170
Service when they need it.

112
00:05:23,170 --> 00:05:25,110
And an instance of
RacingDataService

113
00:05:25,110 --> 00:05:27,340
will either be
delivered if it exists.

114
00:05:27,340 --> 00:05:31,790
Otherwise, it'll be
created and then delivered.

115
00:05:31,790 --> 00:05:33,890
Next we need to
inject the dependency.

116
00:05:33,890 --> 00:05:35,840
So in our car parts
component, we'll

117
00:05:35,840 --> 00:05:37,950
import RacingDataService.

118
00:05:37,950 --> 00:05:41,380
And then, we're going
to declare a constructor

119
00:05:41,380 --> 00:05:42,710
for this component.

120
00:05:42,710 --> 00:05:47,930
It's going to have a private
RacingDataService of type

121
00:05:47,930 --> 00:05:49,740
RacingDataService.

122
00:05:49,740 --> 00:05:52,380
That private keyword
will cause TypeScript

123
00:05:52,380 --> 00:05:55,710
to automatically define a
component property based

124
00:05:55,710 --> 00:05:56,930
on that parameter.

125
00:05:56,930 --> 00:05:59,360
So under the hood, the
generated JavaScript

126
00:05:59,360 --> 00:06:02,940
looks something like this where
it declares this dot racing

127
00:06:02,940 --> 00:06:05,390
service equals racing service.

128
00:06:05,390 --> 00:06:07,440
Setting the parameter
type is what

129
00:06:07,440 --> 00:06:11,170
identifies that the
RacingDataService is what will be

130
00:06:11,170 --> 00:06:13,400
injected into this component.

131
00:06:13,400 --> 00:06:14,900
Last thing I want
to mention that we

132
00:06:14,900 --> 00:06:18,700
don't need to add
RacingDataService as a provider

133
00:06:18,700 --> 00:06:20,126
because it's a subcomponent.

134
00:06:23,560 --> 00:06:25,510
Now we just need
to use the service.

135
00:06:25,510 --> 00:06:28,020
So back inside
our ngOnInIt, we

136
00:06:28,020 --> 00:06:30,810
can set this dot
carParts equal to 

137
00:06:30,810 --> 00:06:34,040
this dot racing service 
 dot get car parts.

138
00:06:34,040 --> 00:06:37,720
Now our app is more
scalable and testable.

139
00:06:37,720 --> 00:06:39,840
It's scalable because
our dependencies aren't

140
00:06:39,840 --> 00:06:42,370
strongly tied to our classes.

141
00:06:42,370 --> 00:06:45,110
And it's testable because it
would be easy to mock services

142
00:06:45,110 --> 00:06:49,030
out when we want to
test the component.

143
00:06:49,030 --> 00:06:53,510
Now if we jump back into
our app, still works.

144
00:06:53,510 --> 00:06:57,200
But this time, it's
using a service.

145
00:06:57,200 --> 00:07:00,470
And our code feels cleaner.

146
00:07:00,470 --> 00:07:02,270
So what did we learn
in this level?

147
00:07:02,270 --> 00:07:04,820
We learned that services are
used to organize and share code

148
00:07:04,820 --> 00:07:05,640
across our app.

149
00:07:05,640 --> 00:07:08,940
They're usually where we
create our data access methods.

150
00:07:08,940 --> 00:07:11,620
We use dependency injection
to create and send services

151
00:07:11,620 --> 00:07:13,440
to classes that need them.

152
00:07:13,440 --> 00:07:15,550
We give our dependency
injector providers

153
00:07:15,550 --> 00:07:19,020
so it knows what classes it
can create and send to us.

154
00:07:19,020 --> 00:07:21,730
And we ask for dependencies
by specifying them

155
00:07:21,730 --> 00:07:24,060
in our class constructor.

156
00:07:24,060 --> 00:07:28,320
Dependency injection is not
an easy concept to grasp,

157
00:07:28,320 --> 00:07:32,190
but hopefully this gives you
a small basis to start from.

158
00:07:32,190 --> 00:07:34,660
And maybe practice
in the challenges.

159
00:07:34,660 --> 00:07:36,880
I'll see you in
the next section.

