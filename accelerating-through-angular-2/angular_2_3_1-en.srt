1
00:00:00,000 --> 00:00:04,210
[SINGING] Put your pedal to
the metal and burn up the road.

2
00:00:04,210 --> 00:00:07,246
Start the race and load
angular 2 code.

3
00:00:07,246 --> 00:00:11,484
A class decorator can
help you in this moment.

4
00:00:11,484 --> 00:00:13,971
Tune your engine with the
template and component.

5
00:00:13,971 --> 00:00:15,895
Use data binding to

6
00:00:15,895 --> 00:00:19,262
drift through the turns.
With import and export

7
00:00:19,262 --> 00:00:20,500
separate your concerns.

8
00:00:20,500 --> 00:00:23,615
Inject your service
with your racing crew

9
00:00:23,615 --> 00:00:27,692
while Accelerating
through Angular 2.

10
00:00:30,420 --> 00:00:32,479
You're watching Accelerating
Through Angular 2.

11
00:00:32,479 --> 00:00:33,590
I am Gregg Pollack.

12
00:00:33,590 --> 00:00:36,390
And in this section, we'll
be splitting out our code

13
00:00:36,390 --> 00:00:41,180
into multiple files to
get things more organized.

14
00:00:41,180 --> 00:00:45,030
We've been developing Angular
2 all in one file, main.ts.

15
00:00:45,030 --> 00:00:47,220
And obviously, it's
not going to scale.

16
00:00:47,220 --> 00:00:49,960
So we're going to split this
into three different files.

17
00:00:49,960 --> 00:00:52,030
First, our main
ts is going to be

18
00:00:52,030 --> 00:00:54,430
just for bootstrapping
our app and loading

19
00:00:54,430 --> 00:00:55,840
our first component.

20
00:00:55,840 --> 00:00:59,200
Then our app component.ts
file is where

21
00:00:59,200 --> 00:01:00,860
we'll have our page header.

22
00:01:00,860 --> 00:01:04,860
And then finally, we'll have
a car parts.component.ts

23
00:01:04,860 --> 00:01:07,480
that will have our
list of car parts.

24
00:01:07,480 --> 00:01:10,565
After this, we will have
two separate components.

25
00:01:13,300 --> 00:01:14,930
So let's jump back
into our main ts.

26
00:01:14,930 --> 00:01:16,400
And you'll notice
around here I'm

27
00:01:16,400 --> 00:01:18,510
using a lot of dot
dot dots, which

28
00:01:18,510 --> 00:01:20,540
means that code is still there.

29
00:01:20,540 --> 00:01:22,500
It's just hiding because
I couldn't fit it

30
00:01:22,500 --> 00:01:23,970
all on one slide.

31
00:01:23,970 --> 00:01:26,080
So just know that
it's still there.

32
00:01:26,080 --> 00:01:29,500
So we'll take some of this
code out and into a new file

33
00:01:29,500 --> 00:01:33,030
called app.component.ts.

34
00:01:33,030 --> 00:01:34,000
Does this work?

35
00:01:34,000 --> 00:01:35,760
No, it doesn't work.

36
00:01:35,760 --> 00:01:36,820
It's actually broken.

37
00:01:36,820 --> 00:01:38,540
We're bootstrapping
our app component,

38
00:01:38,540 --> 00:01:42,320
but inside our main.ts
it doesn't have access

39
00:01:42,320 --> 00:01:43,520
to our app component.

40
00:01:43,520 --> 00:01:45,760
So how do we get
access to a class

41
00:01:45,760 --> 00:01:47,572
from another file in Angular?

42
00:01:50,230 --> 00:01:54,270
First step is to export the
class that we want to import.

43
00:01:54,270 --> 00:01:56,790
In this case, our app component.

44
00:01:56,790 --> 00:02:02,110
Then inside main.ts we'll
import app component

45
00:02:02,110 --> 00:02:05,140
from the file app component.

46
00:02:05,140 --> 00:02:07,490
Notice here we use
dot slash to specify

47
00:02:07,490 --> 00:02:09,539
it's in the same directory.

48
00:02:09,539 --> 00:02:13,130
And we don't have to
write .ts at the end.

49
00:02:13,130 --> 00:02:16,740
Also worth noting the names
here have to be the same.

50
00:02:16,740 --> 00:02:20,990
We're exporting app component
so that's what we write inside

51
00:02:20,990 --> 00:02:22,720
of our import statement.

52
00:02:22,720 --> 00:02:25,430
App component.

53
00:02:25,430 --> 00:02:25,940
All right.

54
00:02:25,940 --> 00:02:27,010
We're halfway there.

55
00:02:27,010 --> 00:02:29,570
If we look in our browser we
see that everything is still

56
00:02:29,570 --> 00:02:31,000
working just fine.

57
00:02:31,000 --> 00:02:34,210
But we need to create
that second component.

58
00:02:34,210 --> 00:02:37,230
Let's jump into that.

59
00:02:37,230 --> 00:02:39,270
Here we are back in
our app component.

60
00:02:39,270 --> 00:02:42,090
And we need to take that car
part list and split it out.

61
00:02:46,060 --> 00:02:49,680
So here we have our new
file car parts.component.ts.

62
00:02:49,680 --> 00:02:53,660
Inside of it we need to
import the component function.

63
00:02:53,660 --> 00:02:55,920
Then we need to use the
component decorator.

64
00:02:55,920 --> 00:02:57,940
We're going to specify
a new selector.

65
00:02:57,940 --> 00:03:00,130
This one called car parts.

66
00:03:00,130 --> 00:03:02,080
Then we'll write
out our template

67
00:03:02,080 --> 00:03:04,600
surrounding our HTML
with back ticks.

68
00:03:04,600 --> 00:03:07,350
And then we'll declare our
car parts component class,

69
00:03:07,350 --> 00:03:09,160
remembering to export it.

70
00:03:09,160 --> 00:03:09,850
Great.

71
00:03:09,850 --> 00:03:13,860
But now we need to tell
our app.component.ts file

72
00:03:13,860 --> 00:03:16,250
about this new component class.

73
00:03:16,250 --> 00:03:17,930
And there's three
things we need to do.

74
00:03:17,930 --> 00:03:20,150
First, we need to
import our new component

75
00:03:20,150 --> 00:03:22,210
into our app component file.

76
00:03:22,210 --> 00:03:25,400
We need to use this new
selector, car parts.

77
00:03:25,400 --> 00:03:28,810
Thirdly, we need to tell our
app component to explicitly use

78
00:03:28,810 --> 00:03:29,822
the car part component.

79
00:03:32,990 --> 00:03:33,780
Let's do this.

80
00:03:33,780 --> 00:03:36,000
So first, we'll include
our new component

81
00:03:36,000 --> 00:03:39,370
using a new import line.

82
00:03:39,370 --> 00:03:42,530
Then inside the template
we'll use our new selector.

83
00:03:42,530 --> 00:03:43,950
And then if we
look in our browser

84
00:03:43,950 --> 00:03:46,010
we'll see that it
is not working.

85
00:03:46,010 --> 00:03:49,120
There is nothing between
the car parts tag.

86
00:03:49,120 --> 00:03:52,030
And that's because we haven't
done the third step yet.

87
00:03:52,030 --> 00:03:54,640
Angular doesn't know yet
to look for our car parts

88
00:03:54,640 --> 00:03:56,530
selector inside this template.

89
00:03:59,860 --> 00:04:01,480
We need to tell
our app component

90
00:04:01,480 --> 00:04:04,490
that we're using the car parts
component in the template.

91
00:04:04,490 --> 00:04:07,260
And to do that, we'll
add a piece of metadata.

92
00:04:07,260 --> 00:04:10,860
We'll specify directives,
and inside array

93
00:04:10,860 --> 00:04:14,620
send in car parts component.

94
00:04:14,620 --> 00:04:16,631
This is where we list
all the directives

95
00:04:16,631 --> 00:04:17,589
we use in the template.

96
00:04:17,589 --> 00:04:22,620
And remember, a component
is a type of directive.

97
00:04:22,620 --> 00:04:23,920
We look in our browser.

98
00:04:23,920 --> 00:04:24,882
Yay, it works!

99
00:04:28,330 --> 00:04:31,700
So now we've separated our
concerns into three files.

100
00:04:31,700 --> 00:04:35,050
And our application
feels more scalable.

101
00:04:35,050 --> 00:04:38,350
We've also created our
first reusable component.

102
00:04:38,350 --> 00:04:40,670
And components are
meant to be re-used

103
00:04:40,670 --> 00:04:42,825
if we can in different
parts of our application.

104
00:04:45,370 --> 00:04:47,960
Remember, Angular
2 applications use

105
00:04:47,960 --> 00:04:50,460
a component-based architecture.

106
00:04:50,460 --> 00:04:53,510
Components make up the
different parts of our app.

107
00:04:53,510 --> 00:04:55,760
This isn't the app
that we're building.

108
00:04:55,760 --> 00:04:57,000
But it could look like this.

109
00:04:57,000 --> 00:04:59,220
Our app looks a little
bit more like this

110
00:04:59,220 --> 00:05:04,040
where we have our app component
and our car part component.

111
00:05:04,040 --> 00:05:05,490
So what did we learn?

112
00:05:05,490 --> 00:05:07,920
Well, in our main
ts that's usually

113
00:05:07,920 --> 00:05:11,410
where we just import our first
component and bootstrap it.

114
00:05:11,410 --> 00:05:13,600
In order to import
a class we must make

115
00:05:13,600 --> 00:05:16,260
sure to use the export keyword.

116
00:05:16,260 --> 00:05:19,620
We use the directives metadata
to list the directives

117
00:05:19,620 --> 00:05:21,330
that our component uses.

118
00:05:21,330 --> 00:05:25,570
And components are the building
blocks of our application.

119
00:05:25,570 --> 00:05:27,690
Here is what our
architecture currently

120
00:05:27,690 --> 00:05:29,820
looks like with our index file.

121
00:05:29,820 --> 00:05:31,810
And we have our three files.

122
00:05:31,810 --> 00:05:36,295
Main, app, and car parts.

123
00:05:36,295 --> 00:05:37,670
Why don't you do
some challenges.

124
00:05:37,670 --> 00:05:40,020
And I'll see you in
the next section.

