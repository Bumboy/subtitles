1
00:00:00,000 --> 00:00:04,210
[SINGING] Put your pedal to
the metal and burn up the road.

2
00:00:04,210 --> 00:00:07,290
Start the race and
load Angular 2 code.

3
00:00:07,290 --> 00:00:11,470
A class decorator can
help you in this moment.

4
00:00:11,470 --> 00:00:14,982
Tune your engine with a
template and component.

5
00:00:14,982 --> 00:00:18,419
Use data binding to
drift through the turns.

6
00:00:18,419 --> 00:00:20,926
With import and export
separate your concerns.

7
00:00:20,926 --> 00:00:24,500
Inject your service
with your racing crew

8
00:00:24,500 --> 00:00:27,716
while Accelerating
Through Angular 2.

9
00:00:30,490 --> 00:00:32,940
You're watching Accelerating
Through Angular 2.

10
00:00:32,940 --> 00:00:35,130
I'm Gregg Pollack, and
in our first section

11
00:00:35,130 --> 00:00:39,600
we're going to be creating
our first component.

12
00:00:39,600 --> 00:00:41,140
In case you're not
familiar, Angular

13
00:00:41,140 --> 00:00:43,870
is a framework for
dynamic web applications.

14
00:00:43,870 --> 00:00:48,010
It's a way to organize your
HTML, CSS and JavaScript

15
00:00:48,010 --> 00:00:51,890
so you can ship it over
into somebody's browser.

16
00:00:51,890 --> 00:00:54,510
So it's sent over
from your server,

17
00:00:54,510 --> 00:00:57,800
but you're still going to need
some sort of server application

18
00:00:57,800 --> 00:01:02,090
that might be Rails or
Django or PHP, which

19
00:01:02,090 --> 00:01:04,870
loads not just your Angular
app but any other data that you

20
00:01:04,870 --> 00:01:06,820
need to load into it later.

21
00:01:06,820 --> 00:01:09,510
Angular was released in
2011, and it's mainly

22
00:01:09,510 --> 00:01:12,340
maintained by Google with
the help of the open source

23
00:01:12,340 --> 00:01:14,736
community.

24
00:01:14,736 --> 00:01:16,860
By the end of the course
we'll be building together

25
00:01:16,860 --> 00:01:21,150
this Ultra Racing app that
shows us all of the car parts

26
00:01:21,150 --> 00:01:24,645
we have in stock and allows
us to select how many we want.

27
00:01:27,750 --> 00:01:30,700
In the challenges you're going
to be building the Ultra Racing

28
00:01:30,700 --> 00:01:34,740
Schedule, which allows you to
enter races and cancel races

29
00:01:34,740 --> 00:01:37,922
based on how much
money you have.

30
00:01:37,922 --> 00:01:39,880
Just to give you a quick
overview of what we're

31
00:01:39,880 --> 00:01:41,804
covering in this
course, in level one

32
00:01:41,804 --> 00:01:43,470
we will be creating
our first component.

33
00:01:43,470 --> 00:01:46,510
Level two, structural
directives, pipes and methods.

34
00:01:46,510 --> 00:01:48,290
Level three, we will
organize our code

35
00:01:48,290 --> 00:01:50,770
and create a model
and mock our data.

36
00:01:50,770 --> 00:01:53,830
Level 4, we'll do some
really fun data binding.

37
00:01:53,830 --> 00:01:56,490
And level 5, we'll
build our own service,

38
00:01:56,490 --> 00:01:58,600
figure out dependency
injection and then

39
00:01:58,600 --> 00:02:00,820
use HTTP to call
over the internet

40
00:02:00,820 --> 00:02:03,100
to fetch some data from an API.

41
00:02:03,100 --> 00:02:04,930
And of course
between all of these

42
00:02:04,930 --> 00:02:06,660
you'll be doing
challenges and building

43
00:02:06,660 --> 00:02:09,600
that app I just showed you.

44
00:02:09,600 --> 00:02:11,920
You don't need any prior
experience with Angular

45
00:02:11,920 --> 00:02:12,840
to take this course.

46
00:02:12,840 --> 00:02:16,230
However, you do need basic
JavaScript experience.

47
00:02:16,230 --> 00:02:18,620
And if you don't, go check
out our JavaScript Road Trip

48
00:02:18,620 --> 00:02:19,700
courses.

49
00:02:19,700 --> 00:02:23,090
You'll also need
basic HTML and CSS.

50
00:02:23,090 --> 00:02:24,770
We have courses for that.

51
00:02:24,770 --> 00:02:29,170
And optionally, I recommend
you take our ES2015 Shape

52
00:02:29,170 --> 00:02:30,569
of JavaScript to Come course.

53
00:02:30,569 --> 00:02:32,610
Because we're going to be
using some cutting edge

54
00:02:32,610 --> 00:02:38,740
features of JavaScript in
this course with ES2015.

55
00:02:38,740 --> 00:02:41,400
What is the difference between
Angular 1 and Angular 2?

56
00:02:41,400 --> 00:02:43,830
Well first and
foremost Angular 2

57
00:02:43,830 --> 00:02:46,620
is a lot speedier in a
bunch of different ways.

58
00:02:46,620 --> 00:02:49,120
Also with Angular 2
we use components,

59
00:02:49,120 --> 00:02:52,200
which are much simpler
than controllers and scope

60
00:02:52,200 --> 00:02:53,650
from Angular 1.

61
00:02:53,650 --> 00:02:55,440
Also directives are simpler.

62
00:02:55,440 --> 00:02:57,870
It's easier to create
custom directives.

63
00:02:57,870 --> 00:03:00,230
There's also this great
intuitive data binding,

64
00:03:00,230 --> 00:03:04,490
which we'll get into in level 4
where we link data into our web

65
00:03:04,490 --> 00:03:06,420
page and vice versa.

66
00:03:06,420 --> 00:03:09,290
Also services are
now just a class

67
00:03:09,290 --> 00:03:10,790
and there's a bunch
of other things

68
00:03:10,790 --> 00:03:12,040
I'm not going to get into.

69
00:03:12,040 --> 00:03:15,330
A lot of improvements.

70
00:03:15,330 --> 00:03:17,390
I really want to show
you some Angular 2 code.

71
00:03:17,390 --> 00:03:20,070
But before we get there, we need
to decide what language we're

72
00:03:20,070 --> 00:03:21,900
going to be coding in.

73
00:03:21,900 --> 00:03:24,100
We could use plain
old JavaScript,

74
00:03:24,100 --> 00:03:28,612
but browsers aren't up to the
latest version of JavaScript

75
00:03:28,612 --> 00:03:30,820
and there's a couple different
ways we can get access

76
00:03:30,820 --> 00:03:32,440
to these newest features.

77
00:03:32,440 --> 00:03:35,210
One is by using
Babel, which allows

78
00:03:35,210 --> 00:03:37,840
you to code in the newest
versions of JavaScript

79
00:03:37,840 --> 00:03:39,280
and then it does
something called

80
00:03:39,280 --> 00:03:43,090
transpiling into JavaScript
that is compatible with all

81
00:03:43,090 --> 00:03:45,170
of our browsers.

82
00:03:45,170 --> 00:03:48,090
However, we could
also use TypeScript.

83
00:03:48,090 --> 00:03:50,990
Typescript is a
superset of JavaScript,

84
00:03:50,990 --> 00:03:53,710
which means it has all those
new cutting edge features

85
00:03:53,710 --> 00:03:56,910
plus a bunch of
additional features.

86
00:03:56,910 --> 00:04:00,160
Typescript also
transpiles into JavaScript

87
00:04:00,160 --> 00:04:01,910
to be compatible with
all of our browsers.

88
00:04:04,560 --> 00:04:07,114
In this course we'll be
programming TypeScript.

89
00:04:07,114 --> 00:04:07,780
Don't freak out!

90
00:04:07,780 --> 00:04:09,310
It's actually really cool.

91
00:04:09,310 --> 00:04:12,100
TypeScript is Microsoft's
extension of JavaScript,

92
00:04:12,100 --> 00:04:14,860
which allows use of
all ES2015 features

93
00:04:14,860 --> 00:04:18,930
and adds powerful type checking
and object-oriented features.

94
00:04:18,930 --> 00:04:21,160
In fact, the Angular
2 source code

95
00:04:21,160 --> 00:04:24,140
itself is programmed
in TypeScript.

96
00:04:24,140 --> 00:04:27,740
So in this course, instead of
seeing JavaScript files like

97
00:04:27,740 --> 00:04:32,420
main.js you see here, we'll be
using TypeScript files which

98
00:04:32,420 --> 00:04:36,364
end in .ts If you want to
learn more about TypeScript,

99
00:04:36,364 --> 00:04:38,030
definitely check out
TypeScriptlang.org.

100
00:04:42,130 --> 00:04:44,730
Since our browsers don't know
how to read TypeScript out

101
00:04:44,730 --> 00:04:48,780
of the box, we need to
translate it or transpile it

102
00:04:48,780 --> 00:04:52,430
into JavaScript and there's
two ways we can do this.

103
00:04:52,430 --> 00:04:56,080
The first way is we can send
our TypeScript into the browser

104
00:04:56,080 --> 00:04:59,900
and leave it to the browser to
transpile it into JavaScript.

105
00:04:59,900 --> 00:05:01,390
The second way is
we can take care

106
00:05:01,390 --> 00:05:05,890
of transpiling to JavaScript
before we ship to the browser.

107
00:05:05,890 --> 00:05:09,730
This usually happens when
we build or deploy our code.

108
00:05:09,730 --> 00:05:11,270
So I just made a commit.

109
00:05:11,270 --> 00:05:12,730
I build the code.

110
00:05:12,730 --> 00:05:15,890
It transpiles my TypeScript
into JavaScript, sends that up

111
00:05:15,890 --> 00:05:19,060
to the server, which then
gets served into the browser.

112
00:05:19,060 --> 00:05:21,570
This method is going to
load your website faster,

113
00:05:21,570 --> 00:05:25,079
so it will be what you
want to do in production.

114
00:05:25,079 --> 00:05:26,620
Time to start coding,
and we're going

115
00:05:26,620 --> 00:05:31,850
to start with our index.html
with just some basic HTML code.

116
00:05:31,850 --> 00:05:34,510
Now inside the
header tag here is

117
00:05:34,510 --> 00:05:38,140
where you're going to load all
of your Angular 2 libraries.

118
00:05:38,140 --> 00:05:41,000
But I'm not going to
show you how to do it.

119
00:05:41,000 --> 00:05:42,887
There's actually a
few ways to do it.

120
00:05:42,887 --> 00:05:44,470
When you're ready
to start developing,

121
00:05:44,470 --> 00:05:46,850
we suggest you go over and
follow the 5-minute QuickStart

122
00:05:46,850 --> 00:05:49,410
Guide on the official
Angular 2 homepage.

123
00:05:52,420 --> 00:05:55,580
Inside the body of our HTML,
we're going to put a body tag

124
00:05:55,580 --> 00:05:59,320
and use our first custom
element called my app.

125
00:05:59,320 --> 00:06:02,570
This is where Angular 2
application will load,

126
00:06:02,570 --> 00:06:06,190
and it's worth noting that
this my app custom tag could

127
00:06:06,190 --> 00:06:09,570
be anything, even racing app.

128
00:06:09,570 --> 00:06:12,310
Until our app gets loaded in
the browser, if we load this up

129
00:06:12,310 --> 00:06:14,300
we're just going
to see loading app.

130
00:06:18,740 --> 00:06:20,730
If you followed that
five minute tutorial,

131
00:06:20,730 --> 00:06:24,650
you probably are using
SystemJS to load Angular 2

132
00:06:24,650 --> 00:06:26,250
and inside this
script tag you have

133
00:06:26,250 --> 00:06:28,030
something that looks like this.

134
00:06:28,030 --> 00:06:29,960
This bit of code
is going to look

135
00:06:29,960 --> 00:06:33,280
for a main.ts file, which
is where we're going

136
00:06:33,280 --> 00:06:35,400
to put our application's code.

137
00:06:35,400 --> 00:06:38,390
This bit of code also makes sure
that error messages are printed

138
00:06:38,390 --> 00:06:42,040
out to the browser console.

139
00:06:42,040 --> 00:06:44,020
Time to write our
first TypeScript file

140
00:06:44,020 --> 00:06:45,620
and the first
thing we need to do

141
00:06:45,620 --> 00:06:49,120
is import some Angular
2 library modules.

142
00:06:49,120 --> 00:06:51,050
First we have import
bootstrap and then

143
00:06:51,050 --> 00:06:53,390
we have import component.

144
00:06:53,390 --> 00:06:54,620
What's happening here?

145
00:06:54,620 --> 00:06:58,030
Well, import is
an ES2015 feature

146
00:06:58,030 --> 00:07:01,450
used to import functions,
objects or primitives.

147
00:07:01,450 --> 00:07:04,000
And here we're importing
the bootstrap function

148
00:07:04,000 --> 00:07:05,640
and the component function.

149
00:07:05,640 --> 00:07:09,020
Bootstrap is a function used
to instantiate an Angular 2

150
00:07:09,020 --> 00:07:12,090
application, which we'll be
doing at the end of our file.

151
00:07:12,090 --> 00:07:14,250
And for your
information this has

152
00:07:14,250 --> 00:07:16,610
nothing to do with
Twitter Bootstrap,

153
00:07:16,610 --> 00:07:17,910
the front-end framework.

154
00:07:17,910 --> 00:07:19,710
Then component is
a function we'll

155
00:07:19,710 --> 00:07:22,630
use to create our
first component, which

156
00:07:22,630 --> 00:07:25,830
are the basic building blocks
of Angular 2 applications.

157
00:07:25,830 --> 00:07:29,450
The component basically
controls the part of our screen

158
00:07:29,450 --> 00:07:31,870
and throughout
this tutorial we'll

159
00:07:31,870 --> 00:07:36,120
be using this symbol you see
here to represent components.

160
00:07:39,140 --> 00:07:41,440
I mentioned that
component is a function.

161
00:07:41,440 --> 00:07:44,060
It's actually a
decorator function.

162
00:07:44,060 --> 00:07:46,420
A decorator function
adds additional behavior

163
00:07:46,420 --> 00:07:50,200
to our class from
outside our class.

164
00:07:50,200 --> 00:07:54,940
It's a bit of code we declare
immediately before the class.

165
00:07:54,940 --> 00:07:59,550
So here's our class
app component and right

166
00:07:59,550 --> 00:08:04,310
before that is where we're going
to write our decorator code.

167
00:08:04,310 --> 00:08:07,310
And it's that decorator that
turns our plain old JavaScript

168
00:08:07,310 --> 00:08:09,870
class into a component.

169
00:08:09,870 --> 00:08:11,730
You'll notice here we're
using our component

170
00:08:11,730 --> 00:08:13,480
symbol in two pieces.

171
00:08:13,480 --> 00:08:16,260
The bottom piece for our
class, and the top piece

172
00:08:16,260 --> 00:08:18,710
for our decorator.

173
00:08:18,710 --> 00:08:20,280
Let's code out our component.

174
00:08:20,280 --> 00:08:21,930
It looks something like this.

175
00:08:21,930 --> 00:08:24,320
We write add component.

176
00:08:24,320 --> 00:08:29,660
Inside there there's an object
with selector, my app, template

177
00:08:29,660 --> 00:08:31,300
and some HTML.

178
00:08:31,300 --> 00:08:34,169
The app component syntax is
used to apply our component

179
00:08:34,169 --> 00:08:35,980
decorator to our class.

180
00:08:35,980 --> 00:08:37,980
You might not have seen
this before because it's

181
00:08:37,980 --> 00:08:39,559
a TypeScript feature.

182
00:08:39,559 --> 00:08:41,360
Then we specify the selector.

183
00:08:41,360 --> 00:08:43,990
This is the CSS selector
for the HTML element

184
00:08:43,990 --> 00:08:45,900
where we want the
component to load.

185
00:08:45,900 --> 00:08:48,090
And if we look back
at our index HTML,

186
00:08:48,090 --> 00:08:51,160
we can see this corresponds
to the custom tag we created.

187
00:08:51,160 --> 00:08:53,650
Then the template
is where we put

188
00:08:53,650 --> 00:08:57,680
the content we want to
load inside our selector.

189
00:08:57,680 --> 00:08:59,800
The configuration lines
inside the decorator

190
00:08:59,800 --> 00:09:01,645
are sometimes referred
to as metadata.

191
00:09:05,710 --> 00:09:08,400
Next we just need to
send in our component

192
00:09:08,400 --> 00:09:11,860
into the bootstrap function
that we imported to instantiate

193
00:09:11,860 --> 00:09:14,090
our Angular 2 application.

194
00:09:14,090 --> 00:09:17,790
If we load that up in the
browser, we see Ultra Racing.

195
00:09:17,790 --> 00:09:19,360
And in case you're
curious, if we

196
00:09:19,360 --> 00:09:23,540
look at the source we can see
that Ultra Racing was indeed

197
00:09:23,540 --> 00:09:29,450
inserted in between
our custom tag, my app.

198
00:09:29,450 --> 00:09:30,970
Components are the
building blocks

199
00:09:30,970 --> 00:09:33,090
of our Angular 2 application.

200
00:09:33,090 --> 00:09:36,130
And they nest very well
inside of each other.

201
00:09:36,130 --> 00:09:38,470
An app might look
something like this

202
00:09:38,470 --> 00:09:40,870
where you have one big
component, and the header

203
00:09:40,870 --> 00:09:44,270
component, maybe a sidebar
component and little list

204
00:09:44,270 --> 00:09:45,240
components.

205
00:09:45,240 --> 00:09:48,830
And each component can have
its own class file, HTML file

206
00:09:48,830 --> 00:09:52,090
and CSS file.

207
00:09:52,090 --> 00:09:55,080
So we have our first component,
but it's not dynamic at all.

208
00:09:55,080 --> 00:09:58,090
Let's start thinking about
how to send data around.

209
00:09:58,090 --> 00:10:01,400
So if we have a property
inside of our component

210
00:10:01,400 --> 00:10:03,400
let's create a title
property, which

211
00:10:03,400 --> 00:10:05,690
has the value Ultra Racing.

212
00:10:05,690 --> 00:10:09,480
Notice here inside a TypeScript
class, we don't use the var

213
00:10:09,480 --> 00:10:13,540
or let keywords to
declare class properties.

214
00:10:13,540 --> 00:10:19,090
Though, in TypeScript you still
use var or let but, you know, in methods.

215
00:10:19,090 --> 00:10:20,640
So the question
we're asking now is

216
00:10:20,640 --> 00:10:23,720
how do we put this
class property

217
00:10:23,720 --> 00:10:24,705
inside of our template?

218
00:10:27,330 --> 00:10:30,590
To print properties we use
something called interpolation.

219
00:10:30,590 --> 00:10:31,880
See those curly braces?

220
00:10:31,880 --> 00:10:34,080
Inside there we can specify
a component property

221
00:10:34,080 --> 00:10:35,775
we want to print to the screen.

222
00:10:35,775 --> 00:10:37,150
So now if we load
up the browser,

223
00:10:37,150 --> 00:10:39,650
we can see that it
prints out Ultra Racing.

224
00:10:42,620 --> 00:10:46,260
But what if we have an object
we want to print to the screen?

225
00:10:46,260 --> 00:10:48,320
Here you can see
our car part object

226
00:10:48,320 --> 00:10:52,530
with different keys and values.

227
00:10:52,530 --> 00:10:56,660
To do this we simply use
more interpolation and access

228
00:10:56,660 --> 00:10:58,910
carPart.name
carPart.description,

229
00:10:58,910 --> 00:11:01,940
carPart.inStock
like you see here.

230
00:11:01,940 --> 00:11:04,320
Now you'll notice our
single quotes disappear.

231
00:11:04,320 --> 00:11:09,200
This is because this time
we need to use back ticks.

232
00:11:09,200 --> 00:11:12,840
Using back ticks allows us to
have template strings, which

233
00:11:12,840 --> 00:11:14,770
allow us to be multi-line.

234
00:11:14,770 --> 00:11:19,250
This is another ES2015
feature enabled by TypeScript.

235
00:11:19,250 --> 00:11:21,270
So now if we load
up our page, we

236
00:11:21,270 --> 00:11:25,540
can see it prints
out our object.

237
00:11:25,540 --> 00:11:27,930
It's almost time for you to
create your first component.

238
00:11:27,930 --> 00:11:30,430
But first, what did we learn?

239
00:11:30,430 --> 00:11:33,370
Angular is a framework for
dynamic web applications.

240
00:11:33,370 --> 00:11:36,500
We're coding Angular
using TypeScript, which

241
00:11:36,500 --> 00:11:39,410
transpiles into JavaScript.

242
00:11:39,410 --> 00:11:41,260
Components are the
basic building blocks

243
00:11:41,260 --> 00:11:43,060
of any Angular application.

244
00:11:43,060 --> 00:11:45,570
And we use custom
tags or selectors

245
00:11:45,570 --> 00:11:47,040
to show where we
want our component

246
00:11:47,040 --> 00:11:49,060
to load inside of our HTML.

247
00:11:49,060 --> 00:11:50,930
Lastly, our component
decorator is

248
00:11:50,930 --> 00:11:54,585
what turns our plain TypeScript
class into a component.

249
00:11:57,320 --> 00:12:01,020
Now it's time for you to
start coding some Angular 2.

250
00:12:01,020 --> 00:12:04,140
And I'll see you
in the next level.

251
00:12:04,140 --> 00:12:04,890
So what?

252
00:12:04,890 --> 00:12:06,320
So.

253
00:12:06,320 --> 00:12:08,650
Gets better every time.

254
00:12:08,650 --> 00:12:10,140
FYI, this has nothing to do.

255
00:12:10,140 --> 00:12:14,610
F Y, F Y I. This is
how it gets done.

