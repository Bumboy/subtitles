1
00:00:02,480 --> 00:00:05,030
Welcome back to App
Evolution with Swift.

2
00:00:05,030 --> 00:00:07,100
Our table view has dynamic data.

3
00:00:07,100 --> 00:00:09,610
But when we tap on a cell,
our product view controller

4
00:00:09,610 --> 00:00:12,237
is always showing the
same string still.

5
00:00:12,237 --> 00:00:14,070
That's because we've
got to update our segue

6
00:00:14,070 --> 00:00:19,000
to use data from the array
instead of a fixed value.

7
00:00:19,000 --> 00:00:21,330
So here's the plan — instead
of setting the product

8
00:00:21,330 --> 00:00:24,120
name to a hard coded
string, we can first

9
00:00:24,120 --> 00:00:26,170
get the cell that was tapped.

10
00:00:26,170 --> 00:00:29,380
Then get the index
path for that cell.

11
00:00:29,380 --> 00:00:31,630
Then use the index path
to get the product name

12
00:00:31,630 --> 00:00:32,259
from the array.

13
00:00:32,259 --> 00:00:35,200
And finally, we can
send the product name

14
00:00:35,200 --> 00:00:38,260
to the product view controller.

15
00:00:38,260 --> 00:00:40,330
So getting a copy of
a cell that was tapped

16
00:00:40,330 --> 00:00:42,540
is a little trickier
than it was before,

17
00:00:42,540 --> 00:00:44,860
because this prepare for
segue function doesn't just

18
00:00:44,860 --> 00:00:47,560
have an index path lying
around like the cell

19
00:00:47,560 --> 00:00:49,300
for row at index
path function did.

20
00:00:52,310 --> 00:00:54,910
What we do have though, is
this unassuming property called

21
00:00:54,910 --> 00:00:56,270
Sender.

22
00:00:56,270 --> 00:00:59,440
Sender is the cell that
caused the segue to happen.

23
00:00:59,440 --> 00:01:01,940
In other words, the tapped cell.

24
00:01:01,940 --> 00:01:04,900
Let's grab that cell in
a variable like this.

25
00:01:04,900 --> 00:01:06,750
Notice we got to
write as question

26
00:01:06,750 --> 00:01:08,950
mark again, because the
compiler can't be sure

27
00:01:08,950 --> 00:01:11,790
that the sender was definitely
a UI table view cell.

28
00:01:11,790 --> 00:01:15,920
So our cell variable
has to be optional.

29
00:01:15,920 --> 00:01:17,430
Since it is optional,
we first have

30
00:01:17,430 --> 00:01:19,960
to unwrap the cell
with optional binding.

31
00:01:19,960 --> 00:01:22,340
And if it exists, we
can grab the index path

32
00:01:22,340 --> 00:01:24,550
for that cell as
another variable

33
00:01:24,550 --> 00:01:27,220
by calling the
tableView.indexPath for cell

34
00:01:27,220 --> 00:01:31,550
function, and passing our
unwrapped cell into it.

35
00:01:31,550 --> 00:01:34,550
That index path we get
back is also an optional,

36
00:01:34,550 --> 00:01:37,690
so we'll unwrap that with
optional binding as well.

37
00:01:37,690 --> 00:01:40,110
And if it exists, we
can get the product name

38
00:01:40,110 --> 00:01:43,220
from the product names array
at the position indexPath

39
00:01:43,220 --> 00:01:44,130
or ip dot row.

40
00:01:47,510 --> 00:01:50,190
Then we can set the product
view controllers product name

41
00:01:50,190 --> 00:01:52,610
property to the product
name from the array

42
00:01:52,610 --> 00:01:54,600
that we just got.

43
00:01:54,600 --> 00:01:56,830
And we can see that now
when we tap on a cell,

44
00:01:56,830 --> 00:02:00,936
the corresponding text is set
in the product view controller.

45
00:02:00,936 --> 00:02:02,560
Things are working
great, but this code

46
00:02:02,560 --> 00:02:04,132
is pretty messy
and hard to read.

47
00:02:04,132 --> 00:02:05,590
So there's a few
things that we can

48
00:02:05,590 --> 00:02:07,881
do to make it a little bit
easier to read and maintain.

49
00:02:12,330 --> 00:02:15,370
For example, we're using
really ambiguous variable names

50
00:02:15,370 --> 00:02:18,060
like c and ip.

51
00:02:18,060 --> 00:02:22,760
There's also a lot of code block
nesting that we can get rid of.

52
00:02:22,760 --> 00:02:24,700
First, we can use the
same variable name

53
00:02:24,700 --> 00:02:27,410
for both the object we're
checking with if let,

54
00:02:27,410 --> 00:02:30,970
and the variable we
assign to it if it exists.

55
00:02:30,970 --> 00:02:33,600
Here you can see we've
reused the cell and index

56
00:02:33,600 --> 00:02:36,570
path-names instead of
just the letter c and ip.

57
00:02:40,890 --> 00:02:42,770
Next, we can combine
getting a copy

58
00:02:42,770 --> 00:02:44,780
of the cell from
the sender object

59
00:02:44,780 --> 00:02:47,023
and unwrapping it
on the same line.

60
00:02:50,730 --> 00:02:54,070
We get an optional index path
back from the table view index

61
00:02:54,070 --> 00:02:57,030
path for cell function
and assign and unwrap it

62
00:02:57,030 --> 00:02:59,058
with if let all on one line.

63
00:03:03,670 --> 00:03:06,110
Then we can do the same thing
with the product name value

64
00:03:06,110 --> 00:03:07,560
from our array.

65
00:03:07,560 --> 00:03:09,832
We can read it and set
it on the same line.

66
00:03:12,930 --> 00:03:14,260
Looking better, right?

67
00:03:14,260 --> 00:03:15,870
A lot easier to read.

68
00:03:15,870 --> 00:03:17,370
Well, there's even
one more step we

69
00:03:17,370 --> 00:03:18,578
can take that's even smarter.

70
00:03:22,010 --> 00:03:25,740
Instead of if let, we can use
a statement called guard along

71
00:03:25,740 --> 00:03:28,930
with both our let sell
equal and let index path

72
00:03:28,930 --> 00:03:32,330
equal lines separated by commas.

73
00:03:32,330 --> 00:03:35,460
Guard first checks if both
the cell and the index path

74
00:03:35,460 --> 00:03:37,970
values that you're
trying to set exist.

75
00:03:37,970 --> 00:03:40,300
And if they do exist,
it assigns those values

76
00:03:40,300 --> 00:03:43,260
to the cell and
index path variables.

77
00:03:43,260 --> 00:03:46,180
After those, you can
write else return,

78
00:03:46,180 --> 00:03:48,670
which means that if those
variables don't have values,

79
00:03:48,670 --> 00:03:50,750
the function will just
stop running right there

80
00:03:50,750 --> 00:03:52,290
and early exit.

81
00:03:52,290 --> 00:03:55,390
That means that you can safely
use the cell and index path

82
00:03:55,390 --> 00:03:57,542
variables anywhere
later in the function.

83
00:03:57,542 --> 00:03:59,250
Because you know the
rest of the function

84
00:03:59,250 --> 00:04:01,890
wouldn't have kept running
unless cell and index

85
00:04:01,890 --> 00:04:02,605
path exist.

86
00:04:06,140 --> 00:04:08,520
So here you can see that
our table view works exactly

87
00:04:08,520 --> 00:04:11,360
like it did before, and
the code's easier to read

88
00:04:11,360 --> 00:04:12,357
and easier to maintain.

89
00:04:15,490 --> 00:04:17,769
So why don't you try
passing some dynamic data

90
00:04:17,769 --> 00:04:20,940
through a segue in your project,
and take some challenges.

91
00:04:20,940 --> 00:04:23,310
And I'll see you
in the next level.

92
00:04:23,310 --> 00:04:24,033
.

