1
00:00:01,060 --> 00:00:03,320
[SINGING] Starting back
in the machine age,

2
00:00:03,320 --> 00:00:05,770
the telephone had
just taken the stage,

3
00:00:05,770 --> 00:00:08,010
no one predicted
its acceleration,

4
00:00:08,010 --> 00:00:10,400
evolving all of our communication.

5
00:00:10,400 --> 00:00:13,470
Today we build with
storyboards, use Xcode

6
00:00:13,470 --> 00:00:15,120
projects where they're stored.

7
00:00:15,120 --> 00:00:17,710
Controllers with scroll,
navigate, and tables.

8
00:00:17,710 --> 00:00:19,960
Outlets, actions,
buttons, and labels.

9
00:00:19,960 --> 00:00:22,170
To code a phone
is a learned gift,

10
00:00:22,170 --> 00:00:23,905
with the App
Evolution with Swift.

11
00:00:27,870 --> 00:00:30,057
Welcome back to App
evolution with Swift.

12
00:00:30,057 --> 00:00:31,640
In this level, we'll
be looking at how

13
00:00:31,640 --> 00:00:34,000
to connect to view
controllers together, and then

14
00:00:34,000 --> 00:00:37,870
transition between them.

15
00:00:37,870 --> 00:00:40,050
We've got a great start
on our table view.

16
00:00:40,050 --> 00:00:41,560
But now it's time
to connect that up

17
00:00:41,560 --> 00:00:44,620
to our product view controller,
so that when we tap on a cell,

18
00:00:44,620 --> 00:00:48,380
we can show some detailed
information about each product.

19
00:00:48,380 --> 00:00:50,360
On the surface, doing
this is pretty simple

20
00:00:50,360 --> 00:00:53,955
and involves something called
a navigation controller.

21
00:00:53,955 --> 00:00:56,170
A navigation controller
manages moving

22
00:00:56,170 --> 00:00:57,840
between any view controllers.

23
00:00:57,840 --> 00:01:00,100
And the way you set it
up is to set one view

24
00:01:00,100 --> 00:01:02,980
controller as the root view
controller for the navigation

25
00:01:02,980 --> 00:01:06,220
stack, and then transition
to any other view controller

26
00:01:06,220 --> 00:01:08,530
with something called a segue.

27
00:01:08,530 --> 00:01:11,570
Yes, that's how that
word pronounced, segue.

28
00:01:11,570 --> 00:01:13,270
And it literally
means to transition

29
00:01:13,270 --> 00:01:15,490
from one thing to another.

30
00:01:15,490 --> 00:01:18,260
So let's jump into Xcode,
add a navigation controller,

31
00:01:18,260 --> 00:01:21,450
and create a segue.

32
00:01:21,450 --> 00:01:23,230
Before we add a
navigation controller,

33
00:01:23,230 --> 00:01:26,271
let's organize our
storyboard a bit.

34
00:01:26,271 --> 00:01:27,770
If we double click
on the background

35
00:01:27,770 --> 00:01:29,600
of the storyboard
editor, it zooms out

36
00:01:29,600 --> 00:01:34,200
so we can see all of our
view controllers at once.

37
00:01:34,200 --> 00:01:37,030
We want to organize
these a bit differently.

38
00:01:37,030 --> 00:01:39,508
We'll take the contact view
controller and move it up.

39
00:01:42,164 --> 00:01:44,580
We'll take the products table
view controller, and move it

40
00:01:44,580 --> 00:01:46,990
all the way to the left.

41
00:01:46,990 --> 00:01:48,570
And take the
product view controller,

42
00:01:48,570 --> 00:01:50,870
and move it to the right of
the table view controller.

43
00:01:53,510 --> 00:01:55,830
Now we'll click on the
products table view controller

44
00:01:55,830 --> 00:02:02,400
again and choose editor, embed
in, navigation controller.

45
00:02:02,400 --> 00:02:03,880
Because our table
view controller

46
00:02:03,880 --> 00:02:06,230
is now in this
navigation controller,

47
00:02:06,230 --> 00:02:09,210
if we connect up segues
between other view controllers,

48
00:02:09,210 --> 00:02:12,040
we'll be able to
transition between them.

49
00:02:12,040 --> 00:02:15,190
We'll scroll a bit so we
can see both controllers.

50
00:02:15,190 --> 00:02:17,909
And we'll right click and
drag from the prototype cell

51
00:02:17,909 --> 00:02:19,200
to the product view controller.

52
00:02:24,770 --> 00:02:26,810
In the segue helper
that comes up,

53
00:02:26,810 --> 00:02:29,080
we'll choose push
segue, which means

54
00:02:29,080 --> 00:02:31,160
we're going to do a push
transition from one view

55
00:02:31,160 --> 00:02:33,590
controller to another.

56
00:02:33,590 --> 00:02:37,910
If we click on that segue,
we can give it a name.

57
00:02:37,910 --> 00:02:40,520
In the attributes inspector,
we'll type Show Product

58
00:02:40,520 --> 00:02:41,440
and hit Enter.

59
00:02:41,440 --> 00:02:43,620
Since that's what the
segue is responsible for,

60
00:02:43,620 --> 00:02:46,740
showing a product.

61
00:02:46,740 --> 00:02:53,850
Now if we build and
run our app, and we

62
00:02:53,850 --> 00:02:56,850
tap on one of those cells,
we see that it pushes over

63
00:02:56,850 --> 00:03:00,520
to the product view controller.

64
00:03:00,520 --> 00:03:03,260
Our segue's working great, so
now let's make a plan of attack

65
00:03:03,260 --> 00:03:07,180
for passing data from the first
view controller to the second.

66
00:03:07,180 --> 00:03:09,930
Every view controller, even
table view controllers,

67
00:03:09,930 --> 00:03:12,300
has a function called
prepare For Segue

68
00:03:12,300 --> 00:03:14,920
that gets called
whenever a segue happens.

69
00:03:14,920 --> 00:03:16,380
We need to override
that function

70
00:03:16,380 --> 00:03:19,490
and pass the product name to
the product view controller

71
00:03:19,490 --> 00:03:21,570
during the segue.

72
00:03:21,570 --> 00:03:23,970
We'll also need to add
a product Name property

73
00:03:23,970 --> 00:03:26,910
to the product view controller
that will store the value when

74
00:03:26,910 --> 00:03:28,920
it gets passed over.

75
00:03:28,920 --> 00:03:31,540
Adding that product Name
property in the product view

76
00:03:31,540 --> 00:03:34,310
controller's Swift
file looks like this.

77
00:03:34,310 --> 00:03:36,850
Note that we made this
variable an optional string,

78
00:03:36,850 --> 00:03:40,210
because any data that we
don't know until the app runs

79
00:03:40,210 --> 00:03:42,780
has to be marked as optional.

80
00:03:42,780 --> 00:03:45,620
Then we'll update the
product Name Label's text

81
00:03:45,620 --> 00:03:47,620
to come from the
product Name variable

82
00:03:47,620 --> 00:03:50,650
instead of just hard
coding a string.

83
00:03:50,650 --> 00:03:52,660
Over in products
table view controller,

84
00:03:52,660 --> 00:03:55,190
we'll add the
prepare For Segue function.

85
00:03:55,190 --> 00:03:58,490
Remember, this function runs
every time a segue happens,

86
00:03:58,490 --> 00:04:03,730
so whenever we tap a cell in
our app, this function will run.

87
00:04:03,730 --> 00:04:06,290
Since there can be multiple
segues in one controller,

88
00:04:06,290 --> 00:04:08,420
we should first check if
the segue's identifier

89
00:04:08,420 --> 00:04:10,000
is Show Product.

90
00:04:10,000 --> 00:04:12,890
Remember when we set the segue
name in the storyboard, here's

91
00:04:12,890 --> 00:04:15,250
where that's paying off.

92
00:04:15,250 --> 00:04:16,860
So inside of this
conditional, we

93
00:04:16,860 --> 00:04:18,709
need a way to capture
the view controller

94
00:04:18,709 --> 00:04:20,750
that we're transitioning
to, so that we can

95
00:04:20,750 --> 00:04:24,170
set the product Name property.

96
00:04:24,170 --> 00:04:27,400
Looking at the documentation
UI Storyboard Segue,

97
00:04:27,400 --> 00:04:29,130
we can see that it
has a property called

98
00:04:29,130 --> 00:04:31,390
destination View Controller.

99
00:04:31,390 --> 00:04:33,710
If we access that
property, we get a copy

100
00:04:33,710 --> 00:04:36,340
of the view controller
we're transitioning to,

101
00:04:36,340 --> 00:04:39,610
which in this case is our
product view controller.

102
00:04:39,610 --> 00:04:42,050
So we can grab a copy of
that product view controller

103
00:04:42,050 --> 00:04:46,160
like this, and assign it to
a variable named product VC.

104
00:04:46,160 --> 00:04:48,370
But that alone is not enough.

105
00:04:48,370 --> 00:04:51,820
destination View Controller
returns a UI View Controller,

106
00:04:51,820 --> 00:04:54,330
but we want Swift to know
that this is specifically

107
00:04:54,330 --> 00:04:55,330
a product View Controller.

108
00:04:58,410 --> 00:05:01,330
We can do that by adding
as Product View Controller

109
00:05:01,330 --> 00:05:03,370
to the end of this statement.

110
00:05:03,370 --> 00:05:06,575
As is a way to convert from
one data type to another.

111
00:05:06,575 --> 00:05:08,450
So here we're trying to
let the compiler know

112
00:05:08,450 --> 00:05:10,340
that our
destination View Controller is

113
00:05:10,340 --> 00:05:11,673
in fact a Product View Controller.

114
00:05:14,360 --> 00:05:17,560
When we do that though, we run
into another little problem,

115
00:05:17,560 --> 00:05:20,460
an error message that says
UI View Controller is not

116
00:05:20,460 --> 00:05:22,270
convertible to
Product View Controller,

117
00:05:22,270 --> 00:05:25,520
did you mean to use
as to force downcast?

118
00:05:25,520 --> 00:05:27,570
That's a crazy error
message, right?

119
00:05:27,570 --> 00:05:29,040
So what's happening
is the compiler

120
00:05:29,040 --> 00:05:31,250
can't just take our
word for it, and be sure

121
00:05:31,250 --> 00:05:32,875
that the
destination View Controller

122
00:05:32,875 --> 00:05:34,960
is a
Product View Controller.

123
00:05:34,960 --> 00:05:38,350
And if it's not sure, it won't
compile your code and run.

124
00:05:38,350 --> 00:05:39,980
That's because if
it guesses wrong,

125
00:05:39,980 --> 00:05:42,360
the app's going to crash.

126
00:05:42,360 --> 00:05:45,540
We can fix this by
again using optionals.

127
00:05:45,540 --> 00:05:48,370
Remember, if we can't be
sure that a value will exist,

128
00:05:48,370 --> 00:05:51,190
it should probably be
marked as optional.

129
00:05:51,190 --> 00:05:54,150
Adding the question mark
to the end of the as word

130
00:05:54,150 --> 00:05:57,190
here returns an optional
Product View Controller,

131
00:05:57,190 --> 00:06:00,800
and stores it in the
product VC variable.

132
00:06:00,800 --> 00:06:03,190
We can use that same question
mark trick from before

133
00:06:03,190 --> 00:06:07,100
by writing product VC
question mark dot product Name

134
00:06:07,100 --> 00:06:09,820
and setting that
equal to a string.

135
00:06:09,820 --> 00:06:12,570
Remember, this means
only set the product Name

136
00:06:12,570 --> 00:06:14,990
if the product VC exists.

137
00:06:14,990 --> 00:06:17,110
If it doesn't exist,
the code won't run

138
00:06:17,110 --> 00:06:19,510
and therefore won't crash.

139
00:06:19,510 --> 00:06:21,790
It's also important to note
that in this scenario,

140
00:06:21,790 --> 00:06:25,030
the segue would still transition
between the view controllers.

141
00:06:25,030 --> 00:06:27,580
We just wouldn't be sending
any extra data along

142
00:06:27,580 --> 00:06:28,330
with the segue.

143
00:06:31,410 --> 00:06:33,100
Now whenever we tap
on a cell, we're

144
00:06:33,100 --> 00:06:35,340
directed to the
product view controller,

145
00:06:35,340 --> 00:06:37,050
and we're shown the
text that we set

146
00:06:37,050 --> 00:06:40,390
in the prepare For Segue method.

147
00:06:40,390 --> 00:06:42,050
This is pretty powerful stuff.

148
00:06:42,050 --> 00:06:45,060
We were able to get one view
controller to tell another view

149
00:06:45,060 --> 00:06:47,660
controller what data to display.

150
00:06:47,660 --> 00:06:49,910
So now it's your turn to
try passing some data along

151
00:06:49,910 --> 00:06:52,710
with a segue in your app,
and take some challenges.

152
00:06:52,710 --> 00:06:55,030
And I'll see you in
the next section.

