1
00:00:01,060 --> 00:00:03,320
[SINGING] Starting back
in the machine age,

2
00:00:03,320 --> 00:00:05,680
the telephone had
just taken the stage.

3
00:00:05,680 --> 00:00:08,010
No one predicted
its acceleration

4
00:00:08,010 --> 00:00:10,390
evolving all of
our communication.

5
00:00:10,390 --> 00:00:13,470
Today we build with
storyboards, use Xcode

6
00:00:13,470 --> 00:00:15,120
projects where they're stored.

7
00:00:15,120 --> 00:00:18,300
Controllers with scroll,
navigate and tables, outlets,

8
00:00:18,300 --> 00:00:19,960
actions, buttons and labels.

9
00:00:19,960 --> 00:00:23,395
To code a phone is a learned
gift with the App Evolution

10
00:00:23,395 --> 00:00:23,895
with Swift.

11
00:00:27,150 --> 00:00:29,248
Welcome back to App
Evolution with Swift.

12
00:00:32,850 --> 00:00:34,970
Right now, we're passing
just product Name

13
00:00:34,970 --> 00:00:37,230
into the
Product View Controller, but that

14
00:00:37,230 --> 00:00:40,000
means we can only pass
one piece of data.

15
00:00:40,000 --> 00:00:42,800
What if we wanted to also pass
stuff like the product image

16
00:00:42,800 --> 00:00:46,150
name, or even the cell
image for that cell?

17
00:00:46,150 --> 00:00:48,910
One thing we could do is create
multiple variables inside

18
00:00:48,910 --> 00:00:52,020
of Product View Controller
and pass values into them,

19
00:00:52,020 --> 00:00:53,810
but that would quickly
get really messy,

20
00:00:53,810 --> 00:00:55,230
especially as we
had more and more

21
00:00:55,230 --> 00:00:57,630
values that we wanted to pass.

22
00:00:57,630 --> 00:00:59,500
So instead, we can
create a new class

23
00:00:59,500 --> 00:01:02,070
to hold all of those
variables as properties

24
00:01:02,070 --> 00:01:06,070
and then just pass one
object over instead of three.

25
00:01:06,070 --> 00:01:10,290
So let's jump into Xcode
to see how we can do that.

26
00:01:10,290 --> 00:01:17,040
The first thing we'll do is
create a brand new Swift file,

27
00:01:17,040 --> 00:01:19,480
and instead of choosing
a Cocoa Touch class,

28
00:01:19,480 --> 00:01:21,865
we'll just choose
an empty Swift file.

29
00:01:21,865 --> 00:01:23,990
This is because we're not
going to need to subclass

30
00:01:23,990 --> 00:01:27,070
any of the UI kit's classes.

31
00:01:27,070 --> 00:01:30,770
So instead, we'll
just start fresh.

32
00:01:30,770 --> 00:01:34,530
We'll name this file Product
with a capital P dot swift

33
00:01:34,530 --> 00:01:35,350
and hit Create.

34
00:01:37,990 --> 00:01:40,045
Since we do want this
to be a class file,

35
00:01:40,045 --> 00:01:43,590
we'll type class,
Product with a capital P,

36
00:01:43,590 --> 00:01:46,450
and the opening and
closing curly brackets.

37
00:01:46,450 --> 00:01:49,520
And we'll create three
variables in this class.

38
00:01:49,520 --> 00:01:51,490
The first one will
be called name,

39
00:01:51,490 --> 00:01:54,310
and it will be an
optional string.

40
00:01:54,310 --> 00:01:56,430
The next one will be
called product image,

41
00:01:56,430 --> 00:01:58,980
and it will also be
an optional string,

42
00:01:58,980 --> 00:02:00,690
and the third will
be cell image,

43
00:02:00,690 --> 00:02:03,640
and again, it will be
an optional string.

44
00:02:03,640 --> 00:02:06,241
Now we'll be able to create
objects of type Product,

45
00:02:06,241 --> 00:02:08,449
and then we'll be able to
set each one of those three

46
00:02:08,449 --> 00:02:11,130
variables for those
objects with dot notation

47
00:02:11,130 --> 00:02:14,600
to the info for each
individual product.

48
00:02:14,600 --> 00:02:17,820
We'll do that inside of our
Products Table View Controller,

49
00:02:17,820 --> 00:02:21,540
and we can create those product
objects inside of view Did Load,

50
00:02:21,540 --> 00:02:22,285
like this.

51
00:02:31,800 --> 00:02:34,050
Then for each one of
these product objects,

52
00:02:34,050 --> 00:02:48,820
we need to set their name,
product image, and cell image.

53
00:02:56,615 --> 00:02:58,990
We should also note that we've
added all of the remaining

54
00:02:58,990 --> 00:03:01,190
necessary images to
our asset catalog,

55
00:03:01,190 --> 00:03:04,121
so we've got all four full
screen images loaded in.

56
00:03:07,394 --> 00:03:09,560
Now we need to fill in the
rest of the data for each

57
00:03:09,560 --> 00:03:11,210
of these products,
and we'll skip

58
00:03:11,210 --> 00:03:13,850
ahead here so you don't have to
watch us type all of this in.

59
00:03:18,280 --> 00:03:21,280
The place we need to put all
this data is in an array,

60
00:03:21,280 --> 00:03:23,940
and we don't even need our
product Names array anymore,

61
00:03:23,940 --> 00:03:27,530
so we'll rename it from
product Names to products.

62
00:03:27,530 --> 00:03:29,840
And instead of holding
a group of strings,

63
00:03:29,840 --> 00:03:32,880
it will hold a group
of product objects.

64
00:03:32,880 --> 00:03:34,400
We'll adjust the
name of the array

65
00:03:34,400 --> 00:03:37,060
in view Did Load to
products and instead

66
00:03:37,060 --> 00:03:38,510
of using these
hard coded strings,

67
00:03:38,510 --> 00:03:43,545
we can use the product 1,
2, 3, and 4 objects.

68
00:03:50,650 --> 00:03:53,580
Down in the table View
number Of Rows In Section function,

69
00:03:53,580 --> 00:03:56,240
we can update this code to
unwrap the optional products

70
00:03:56,240 --> 00:04:03,140
array instead of product
names, and we'll also

71
00:04:03,140 --> 00:04:05,480
make these unwrapped variable
names a little shorter.

72
00:04:10,350 --> 00:04:13,260
Down in the table View
cell For Row At Index Path function,

73
00:04:13,260 --> 00:04:14,710
we'll do something similar.

74
00:04:14,710 --> 00:04:17,640
We'll grab just one
product object and grab it

75
00:04:17,640 --> 00:04:24,290
from the products array and
let p equal that product,

76
00:04:24,290 --> 00:04:25,327
unwrapping the optional.

77
00:04:27,950 --> 00:04:30,330
Then we can adjust
the text Label dot text

78
00:04:30,330 --> 00:04:35,540
to come from p dot name,
which is the string

79
00:04:35,540 --> 00:04:37,061
inside of the product object.

80
00:04:40,360 --> 00:04:42,680
We can move the image
setting code up as well.

81
00:04:45,830 --> 00:04:47,820
But if we try to replace
the hard coded image

82
00:04:47,820 --> 00:04:51,120
with p dot cell Image,
we'll get an error,

83
00:04:51,120 --> 00:04:53,740
and that's because cell
image isn't optional,

84
00:04:53,740 --> 00:04:55,340
and this UI image
initializer has

85
00:04:55,340 --> 00:04:58,120
to be absolutely sure that the
image we're using to create it

86
00:04:58,120 --> 00:05:00,430
exists.

87
00:05:00,430 --> 00:05:02,810
So we can unwrap
that too by typing

88
00:05:02,810 --> 00:05:08,870
if let i equals p dot cell Image
and move the cell image

89
00:05:08,870 --> 00:05:13,330
creation code inside
of that if let block,

90
00:05:13,330 --> 00:05:16,520
then we can use the unwrapped
image name from the variable i,

91
00:05:16,520 --> 00:05:21,310
and that will show the right
image view in the cell.

92
00:05:21,310 --> 00:05:23,840
Next, down in the
prepare For Segue function,

93
00:05:23,840 --> 00:05:26,200
we can just pass a product
object over instead

94
00:05:26,200 --> 00:05:31,420
of a product name string
and pull the product

95
00:05:31,420 --> 00:05:34,050
from the product's array,
but we still get an error

96
00:05:34,050 --> 00:05:35,810
because the
Product View Controller still

97
00:05:35,810 --> 00:05:38,730
doesn't have the
right variable set.

98
00:05:38,730 --> 00:05:40,780
So, if we go into the
Product View Controller,

99
00:05:40,780 --> 00:05:44,180
we can change our product
name variable to just product.

100
00:05:44,180 --> 00:05:46,200
And instead of having
a string as the type,

101
00:05:46,200 --> 00:05:47,655
we'll use that product class.

102
00:05:52,240 --> 00:06:00,320
Just like in the cell, we can
unwrap that product object,

103
00:06:00,320 --> 00:06:05,480
pull our label code inside
of that unwrapped block,

104
00:06:05,480 --> 00:06:10,810
and then grab p dot name as
the text for the label.

105
00:06:10,810 --> 00:06:13,180
Then we can unwrap the image
and copy the image view

106
00:06:13,180 --> 00:06:14,190
inside of that block.

107
00:06:20,352 --> 00:06:22,820
And instead of the
hard coded image name,

108
00:06:22,820 --> 00:06:24,596
we can just pass i,
which is going to be

109
00:06:24,596 --> 00:06:25,720
the unwrapped product Image.

110
00:06:29,610 --> 00:06:33,730
Now, if we build
and run the app,

111
00:06:33,730 --> 00:06:37,320
you can see we've got dynamic
cell images for each cell,

112
00:06:37,320 --> 00:06:40,760
dynamic cell text, 

113
00:06:40,760 --> 00:06:42,820
and when we tap on
each one of the cells,

114
00:06:42,820 --> 00:06:45,000
the correct text and
correct product image

115
00:06:45,000 --> 00:06:46,583
is shown in the
Product View Controller.

116
00:06:54,230 --> 00:06:55,150
And there you have it.

117
00:06:55,150 --> 00:06:56,830
Now we're passing
only one object

118
00:06:56,830 --> 00:06:58,870
from our
Products Table View Controller

119
00:06:58,870 --> 00:07:00,790
over to the
Product View Controller,

120
00:07:00,790 --> 00:07:03,740
and we're able to read from
that object any place that we

121
00:07:03,740 --> 00:07:04,740
need to display data.

122
00:07:08,050 --> 00:07:10,180
So now it's your turn to
go try adding a custom

123
00:07:10,180 --> 00:07:12,414
class to hold your
data in your project

124
00:07:12,414 --> 00:07:13,830
and take some
challenges, and I'll

125
00:07:13,830 --> 00:07:16,760
see you in the wrap up video.

126
00:07:16,760 --> 00:07:21,285
Screencasts.

127
00:07:21,285 --> 00:07:22,580
More for screencast.

128
00:07:22,580 --> 00:07:23,540
Oh, screencast.

129
00:07:23,540 --> 00:07:24,670
I didn't see you there.

130
00:07:24,670 --> 00:07:26,180
Have you been here all along?

131
00:07:26,180 --> 00:07:27,320
Screencasts.

132
00:07:27,320 --> 00:07:28,990
I can't even do fake angry.

133
00:07:28,990 --> 00:07:29,784
Screencasts.

134
00:07:29,784 --> 00:07:31,450
This is what I talk
like when I'm angry.

135
00:07:31,450 --> 00:07:31,910
Screencasts.

136
00:07:31,910 --> 00:07:33,368
If I ever talk to
you like this, it

137
00:07:33,368 --> 00:07:35,980
means I'm really angry with you.

138
00:07:35,980 --> 00:07:38,626
Screencasts.

139
00:07:38,626 --> 00:07:41,310
Ooh, screencasts.

140
00:07:41,310 --> 00:07:43,450
Screencasts.

141
00:07:43,450 --> 00:07:44,770
What are you holding?

142
00:07:44,770 --> 00:07:47,290
Just holding screencasts.

143
00:07:47,290 --> 00:07:48,700
UI label.

144
00:07:48,700 --> 00:07:51,520
Just in case you need
that for an outtake.

