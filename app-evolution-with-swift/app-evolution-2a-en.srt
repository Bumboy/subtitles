1
00:00:00,732 --> 00:00:03,320
[SINGING] Starting back
in the machine age,

2
00:00:03,320 --> 00:00:05,830
the telephone had
just taken the stage.

3
00:00:05,830 --> 00:00:08,039
No one predicted
it's acceleration,

4
00:00:08,039 --> 00:00:10,410
evolving all of
our communication.

5
00:00:10,410 --> 00:00:14,180
Today we build with
storyboard, use Xcode projects

6
00:00:14,180 --> 00:00:15,140
where they're stored.

7
00:00:15,140 --> 00:00:18,400
Controllers with scroll
navigating, tables, outlets,

8
00:00:18,400 --> 00:00:20,020
actions, buttons, and labels.

9
00:00:20,020 --> 00:00:23,420
To code a phone is a learned
gift with the App Evolution

10
00:00:23,420 --> 00:00:24,130
with Swift.

11
00:00:27,500 --> 00:00:29,720
Welcome back to App
Evolution with Swift.

12
00:00:29,720 --> 00:00:31,140
In this level,
we're going to look

13
00:00:31,140 --> 00:00:33,760
at how we can link views
and buttons up to code.

14
00:00:37,570 --> 00:00:40,000
We've already got a
label displaying text,

15
00:00:40,000 --> 00:00:43,060
and an image view displaying
an image in our storyboard.

16
00:00:43,060 --> 00:00:46,410
But we want to be able to
set those values in code.

17
00:00:46,410 --> 00:00:49,780
We also want to make the
button respond to being tapped.

18
00:00:49,780 --> 00:00:51,450
The place we're going
to write that code

19
00:00:51,450 --> 00:00:54,220
is in a view controller.

20
00:00:54,220 --> 00:00:55,890
You might have noticed
in the storyboard

21
00:00:55,890 --> 00:00:59,840
that the main view is embedded
inside of a view controller.

22
00:00:59,840 --> 00:01:01,630
The reason for having
a controller object

23
00:01:01,630 --> 00:01:04,800
separate from a view object is
that you can separate program

24
00:01:04,800 --> 00:01:07,230
logic from the display of data.

25
00:01:07,230 --> 00:01:12,330
This is commonly referred to
as MVC, model view controller.

26
00:01:12,330 --> 00:01:14,400
Separating these two
out makes code easier

27
00:01:14,400 --> 00:01:18,380
to understand than just having
all of it in one big file.

28
00:01:18,380 --> 00:01:21,660
View controllers can tell
a view what to display,

29
00:01:21,660 --> 00:01:23,450
and then views can
tell controllers

30
00:01:23,450 --> 00:01:26,060
when the user is
interacting with them.

31
00:01:26,060 --> 00:01:27,610
We've got to do a
little bit of setup

32
00:01:27,610 --> 00:01:30,890
in the storyboard to connect the
view controller to Swift code,

33
00:01:30,890 --> 00:01:35,310
so let's jump back into
Xcode and get that set up.

34
00:01:35,310 --> 00:01:36,760
Let's create our
first Swift file

35
00:01:36,760 --> 00:01:38,620
so we can write code
to change the label

36
00:01:38,620 --> 00:01:41,590
text, the image
displayed, and that we

37
00:01:41,590 --> 00:01:44,600
can use to respond to
taps on the button.

38
00:01:44,600 --> 00:01:48,650
To start, click on the folder
name in the project navigator.

39
00:01:48,650 --> 00:01:53,430
Right click on it,
and choose New File.

40
00:01:53,430 --> 00:01:55,570
In this list of file
templates that come up,

41
00:01:55,570 --> 00:01:58,410
we'll want to make sure we're
looking at the iOS source

42
00:01:58,410 --> 00:01:59,970
section.

43
00:01:59,970 --> 00:02:02,950
And you might think we want
the Swift file template,

44
00:02:02,950 --> 00:02:07,270
but we actually want
Cocoa Touch Class.

45
00:02:07,270 --> 00:02:09,430
Then we hit Next and
we're asked what name

46
00:02:09,430 --> 00:02:12,190
we want for this class.

47
00:02:12,190 --> 00:02:17,750
We'll delete what's there and
type ProductViewController,

48
00:02:17,750 --> 00:02:19,790
and for the subclass we'll
type UIViewController.

49
00:02:24,180 --> 00:02:26,320
We don't need to
create a XIB file,

50
00:02:26,320 --> 00:02:28,660
but we do want to make sure
the language for the project

51
00:02:28,660 --> 00:02:31,050
is set to Swift.

52
00:02:31,050 --> 00:02:32,930
Then when we hit Next,
we're asked where

53
00:02:32,930 --> 00:02:34,820
we want to save this file.

54
00:02:34,820 --> 00:02:37,390
In our default save location
is the project folder,

55
00:02:37,390 --> 00:02:39,330
which is a good
place to save it.

56
00:02:39,330 --> 00:02:42,090
When we hit Create, we'll get
our ProductViewController dot

57
00:02:42,090 --> 00:02:44,260
Swift file.

58
00:02:44,260 --> 00:02:46,120
You'll notice there's
some starter code.

59
00:02:46,120 --> 00:02:48,200
We won't need all of that.

60
00:02:48,200 --> 00:02:50,330
We don't need the
didReceiveMemoryWarning

61
00:02:50,330 --> 00:02:53,910
function or the whole navigation
section at the bottom.

62
00:02:53,910 --> 00:02:57,030
Notice that we are leaving one
curly bracket after the stuff

63
00:02:57,030 --> 00:02:58,030
we're deleting.

64
00:02:58,030 --> 00:03:00,400
This is the closing curly
bracket for that class

65
00:03:00,400 --> 00:03:03,920
that's opened on line 11,
so that one needs to stay.

66
00:03:03,920 --> 00:03:07,550
So we'll highlight both
of those and hit Delete.

67
00:03:07,550 --> 00:03:09,850
When we delete that code,
we've got a really nice start

68
00:03:09,850 --> 00:03:11,270
to the Swift file.

69
00:03:11,270 --> 00:03:13,090
There's one more
step, though-- we

70
00:03:13,090 --> 00:03:15,320
need to associate this
ViewController Swift

71
00:03:15,320 --> 00:03:17,510
file with the view
controller object that's

72
00:03:17,510 --> 00:03:19,770
in the storyboard.

73
00:03:19,770 --> 00:03:22,790
So we'll go back into
the storyboard file,

74
00:03:22,790 --> 00:03:29,160
click on the View Controller
in the scene navigator,

75
00:03:29,160 --> 00:03:32,960
and click on the third page
of the Inspector panel.

76
00:03:32,960 --> 00:03:35,270
In that panel, we'll click
into the class setting

77
00:03:35,270 --> 00:03:38,910
at the top for the custom
class section and type

78
00:03:38,910 --> 00:03:43,110
ProductViewController
and hit Enter.

79
00:03:43,110 --> 00:03:45,750
We can check that it worked
because the scene navigator now

80
00:03:45,750 --> 00:03:48,800
updates to show that the name
changed from ViewController

81
00:03:48,800 --> 00:03:51,110
to ProductViewController.

82
00:03:51,110 --> 00:03:52,780
Now our storyboard
ProductViewController

83
00:03:52,780 --> 00:03:56,060
is linked up with our
ProductViewController dot Swift

84
00:03:56,060 --> 00:03:56,560
file.

85
00:03:59,750 --> 00:04:02,760
To be able to change a subview
in a storyboard with code,

86
00:04:02,760 --> 00:04:04,820
we need to create an outlet.

87
00:04:04,820 --> 00:04:06,410
Outlets are a way
to make a connection

88
00:04:06,410 --> 00:04:11,030
between a storyboard object
and a variable in a Swift file.

89
00:04:11,030 --> 00:04:12,700
Although the main
view was automatically

90
00:04:12,700 --> 00:04:14,250
connected when we
linked our Swift

91
00:04:14,250 --> 00:04:16,860
file to the ViewController
in the storyboard,

92
00:04:16,860 --> 00:04:20,530
all the subviews still need
to be manually connected.

93
00:04:20,530 --> 00:04:22,430
These connections
are called outlets,

94
00:04:22,430 --> 00:04:25,090
and we need to create one
between our ViewController

95
00:04:25,090 --> 00:04:27,960
and label subview so that
the controller can tell

96
00:04:27,960 --> 00:04:30,370
the label what text to show.

97
00:04:30,370 --> 00:04:32,960
Then in the Swift file,
you can create a variable

98
00:04:32,960 --> 00:04:35,990
and mark it as an
outlet there, too.

99
00:04:35,990 --> 00:04:38,910
Remember the controller Swift
file and the storyboard view

100
00:04:38,910 --> 00:04:41,000
controller are
already connected,

101
00:04:41,000 --> 00:04:43,310
but that outlet makes a
connection with the subviews,

102
00:04:43,310 --> 00:04:45,000
as well.

103
00:04:45,000 --> 00:04:50,550
Let's jump back into Xcode to
see how to create an outlet.

104
00:04:50,550 --> 00:04:52,510
To create an outlet
between the Swift file

105
00:04:52,510 --> 00:04:54,680
and storyboard, the
easiest thing to do

106
00:04:54,680 --> 00:04:57,020
is open up the assistant editor.

107
00:04:57,020 --> 00:04:59,870
The icon looks like two
interlocking circles up

108
00:04:59,870 --> 00:05:01,380
in the toolbar.

109
00:05:01,380 --> 00:05:03,030
When we click that
icon, it's kind of

110
00:05:03,030 --> 00:05:05,420
hard to read what's
on the screen.

111
00:05:05,420 --> 00:05:07,460
The default layout is
to have the storyboard

112
00:05:07,460 --> 00:05:11,320
on the left and the associated
Swift file on the right.

113
00:05:11,320 --> 00:05:12,780
We're going to
change that, though,

114
00:05:12,780 --> 00:05:15,560
by clicking on the
tiny drop down arrow

115
00:05:15,560 --> 00:05:20,720
and setting the assistant
editor to appear on the bottom.

116
00:05:20,720 --> 00:05:22,570
Now it's easier to see
the storyboard scene

117
00:05:22,570 --> 00:05:27,230
navigator and editor, and
the Swift file down below.

118
00:05:27,230 --> 00:05:30,390
Next we'll click on the label in
the scene navigator and control

119
00:05:30,390 --> 00:05:33,980
click from that label
down to the Swift file,

120
00:05:33,980 --> 00:05:38,970
right in between the class line
and the viewDidLoad function.

121
00:05:38,970 --> 00:05:40,710
When we let go of
the mouse button,

122
00:05:40,710 --> 00:05:43,600
another little helper pops up.

123
00:05:43,600 --> 00:05:47,770
We want to create an outlet, so
the first default is correct.

124
00:05:47,770 --> 00:05:51,100
It's happening on the Product
View Controller object,

125
00:05:51,100 --> 00:05:53,720
and we need a name that will
become a variable in the Swift

126
00:05:53,720 --> 00:05:58,150
file that we can use to access
the label in the storyboard.

127
00:05:58,150 --> 00:06:00,200
This name could be anything,
but it's a good idea

128
00:06:00,200 --> 00:06:02,080
to name it something obvious.

129
00:06:02,080 --> 00:06:05,400
So here we'll use the
name productNameLabel.

130
00:06:05,400 --> 00:06:07,770
The type is a
UILabel-- that just

131
00:06:07,770 --> 00:06:11,680
has to match the type of the
object in the storyboard--

132
00:06:11,680 --> 00:06:13,500
and the storage should
be left as Weak.

133
00:06:16,170 --> 00:06:18,330
Then when you hit
Connect the outlet code

134
00:06:18,330 --> 00:06:20,470
gets automatically
generated for you,

135
00:06:20,470 --> 00:06:23,240
and you see a darkened in
circle to the left of the line

136
00:06:23,240 --> 00:06:24,170
numbers.

137
00:06:24,170 --> 00:06:27,070
That means the
outlet is connected.

138
00:06:27,070 --> 00:06:29,640
We're going to make one
more change here, though.

139
00:06:29,640 --> 00:06:31,430
Instead of putting
the name of this phone

140
00:06:31,430 --> 00:06:34,010
inside of the label
in the storyboard,

141
00:06:34,010 --> 00:06:36,180
we're going to go back
into the Attributes panel

142
00:06:36,180 --> 00:06:38,460
and we're going to change
the text to Phone Name.

143
00:06:41,140 --> 00:06:43,730
That way, we'll know for sure
if setting the name of the phone

144
00:06:43,730 --> 00:06:46,530
and code works because if
the text when we're done

145
00:06:46,530 --> 00:06:48,510
is different from
phone and name,

146
00:06:48,510 --> 00:06:53,080
we know we successfully
changed the text from code.

147
00:06:53,080 --> 00:06:54,520
Here's what
ProductViewController

148
00:06:54,520 --> 00:06:58,770
dot Swift looks like after
we create that outlet.

149
00:06:58,770 --> 00:07:00,830
Now we can access
our storyboard label

150
00:07:00,830 --> 00:07:04,430
in the controller with
the name productNameLabel.

151
00:07:04,430 --> 00:07:08,280
But where do we write code that
will change the label's text?

152
00:07:08,280 --> 00:07:13,250
To answer that, let's look at
what happens when an app runs.

153
00:07:13,250 --> 00:07:15,130
You might have noticed
a file in your project

154
00:07:15,130 --> 00:07:18,960
that was automatically created
called AppDelegate dot swift.

155
00:07:18,960 --> 00:07:21,360
That runs a function
called UIApplicationMain

156
00:07:21,360 --> 00:07:23,730
that actually starts your app.

157
00:07:23,730 --> 00:07:26,060
Once the app starts, it
looks for a file called

158
00:07:26,060 --> 00:07:29,850
Info dot plist, which is also
automatically created for you,

159
00:07:29,850 --> 00:07:31,640
and that Info dot
plist file is where

160
00:07:31,640 --> 00:07:35,030
the name of the
storyboard file is set.

161
00:07:35,030 --> 00:07:37,330
Next, the storyboard loads
the view controller that's

162
00:07:37,330 --> 00:07:40,080
set as the initial
ViewController,

163
00:07:40,080 --> 00:07:43,360
then that View Controller
loads its view,

164
00:07:43,360 --> 00:07:45,010
and loading that
view automatically

165
00:07:45,010 --> 00:07:47,900
runs the viewDidLoad function.

166
00:07:47,900 --> 00:07:50,000
And we'll set the text
for the label inside

167
00:07:50,000 --> 00:07:52,000
of that viewDidLoad function.

168
00:07:52,000 --> 00:07:55,070
We can do it like this-- by
writing productNameLabel dot

169
00:07:55,070 --> 00:07:58,250
text and setting it
equal to a string, which

170
00:07:58,250 --> 00:08:01,760
is just some characters
or numbers in quotes.

171
00:08:01,760 --> 00:08:04,090
We can do this because the
type of the label variable

172
00:08:04,090 --> 00:08:08,360
is UI label, and UI labels
have a property called text

173
00:08:08,360 --> 00:08:11,490
that we can set to change
the text of the label.

174
00:08:11,490 --> 00:08:15,140
But how did we know that UI
labels have this property?

175
00:08:15,140 --> 00:08:16,980
If you want to check
out what properties you

176
00:08:16,980 --> 00:08:18,740
can set for each
type of object, you

177
00:08:18,740 --> 00:08:21,920
can check out Apple's
official documentation.

178
00:08:21,920 --> 00:08:25,740
Here's one item from the Swift
documentation for UI label.

179
00:08:25,740 --> 00:08:29,100
Docs show properties and
functions for each class.

180
00:08:29,100 --> 00:08:32,360
The colon string here means that
the text property is expecting

181
00:08:32,360 --> 00:08:35,760
us to assign a string to it.

182
00:08:35,760 --> 00:08:38,750
It's impossible to remember
every property of every class

183
00:08:38,750 --> 00:08:40,870
in UI Kit, so you
end up referencing

184
00:08:40,870 --> 00:08:45,140
the documentation a lot
when you're building an app.

185
00:08:45,140 --> 00:08:46,650
When we build and
run our app, we

186
00:08:46,650 --> 00:08:49,440
see that our text
did, in fact, change.

187
00:08:49,440 --> 00:08:52,670
Remember in our storyboard, we
just set some placeholder text,

188
00:08:52,670 --> 00:08:55,880
but our Swift file
code overwrote that.

189
00:08:55,880 --> 00:08:58,230
Now let's jump back into
Xcode and do the same thing

190
00:08:58,230 --> 00:08:58,810
with an image.

191
00:09:01,700 --> 00:09:03,340
Still in our
assistant editor view

192
00:09:03,340 --> 00:09:05,060
where the storyboard
is at the top

193
00:09:05,060 --> 00:09:07,270
and the code is at the
bottom, let's click

194
00:09:07,270 --> 00:09:10,010
on the Image View in
the scene navigator,

195
00:09:10,010 --> 00:09:12,310
and control click and
drag from the image view

196
00:09:12,310 --> 00:09:17,040
object down to the Swift file
in between the first outlet

197
00:09:17,040 --> 00:09:19,460
and the viewDidLoad function.

198
00:09:19,460 --> 00:09:21,940
We get a little helper
like we did before.

199
00:09:21,940 --> 00:09:25,440
This is, again, an outlet on
the Product View Controller.

200
00:09:25,440 --> 00:09:29,640
For the name this time,
we'll use productImageView,

201
00:09:29,640 --> 00:09:35,570
the type is a UIImageView, and
the storage will be Weak again.

202
00:09:35,570 --> 00:09:38,240
Now we've got another outlet,
this time connecting the Image

203
00:09:38,240 --> 00:09:41,530
View to a variable in code.

204
00:09:41,530 --> 00:09:44,120
Like before, when we wanted
to test if this was working,

205
00:09:44,120 --> 00:09:46,080
we deleted the label text.

206
00:09:46,080 --> 00:09:49,310
So we'll go into the Inspector
panel for the image view,

207
00:09:49,310 --> 00:09:55,070
highlight the image name,
delete it, and hit Return.

208
00:09:55,070 --> 00:09:57,080
Now there's no image
set in this view

209
00:09:57,080 --> 00:09:59,020
controller in the storyboard.

210
00:09:59,020 --> 00:10:02,120
So we're going to have to
be able to set it in code.

211
00:10:02,120 --> 00:10:06,540
Let's jump back into slides
to see how to do that.

212
00:10:06,540 --> 00:10:08,990
Just like before, our
controller Swift file now

213
00:10:08,990 --> 00:10:11,670
has a property for
accessing the Image View,

214
00:10:11,670 --> 00:10:14,440
and we can set the image
property of that Image View

215
00:10:14,440 --> 00:10:17,220
to a new UIImage
object, and we'll

216
00:10:17,220 --> 00:10:20,330
pass in the string phone
dash full screen 3

217
00:10:20,330 --> 00:10:23,990
for the name of that image.

218
00:10:23,990 --> 00:10:26,080
Let's look at how the
UIImage class works.

219
00:10:29,300 --> 00:10:31,340
Writing the name of a
class with parentheses

220
00:10:31,340 --> 00:10:35,120
after it, like we did here,
runs an initializer function,

221
00:10:35,120 --> 00:10:39,420
and that initializer function
returns a UIImage object.

222
00:10:39,420 --> 00:10:41,750
Here in the documentation
for UIImage,

223
00:10:41,750 --> 00:10:43,950
you can see there's
an init function.

224
00:10:43,950 --> 00:10:45,570
That init function
is expecting you

225
00:10:45,570 --> 00:10:47,800
to put a string with
the named parameter

226
00:10:47,800 --> 00:10:50,270
inside the parentheses.

227
00:10:50,270 --> 00:10:52,230
This initializer might
look a little confusing

228
00:10:52,230 --> 00:10:56,460
because it looks like it has
two parameters-- named and name.

229
00:10:56,460 --> 00:10:58,460
But you don't actually
have to worry about that.

230
00:10:58,460 --> 00:11:01,650
You just have to know that the
first word, named, is the one

231
00:11:01,650 --> 00:11:03,610
that you'll use when
you're passing a parameter

232
00:11:03,610 --> 00:11:07,040
into the initializer.

233
00:11:07,040 --> 00:11:09,680
When we were sending a label,
we set the text property

234
00:11:09,680 --> 00:11:11,260
equal to a string.

235
00:11:11,260 --> 00:11:14,260
But here we're setting an
Image View's image property

236
00:11:14,260 --> 00:11:18,080
equal to a UIImage object,
and this initializer

237
00:11:18,080 --> 00:11:20,880
returns a UIImage object
that the Image View wants.

238
00:11:23,440 --> 00:11:25,240
And now you can see
that the image is still

239
00:11:25,240 --> 00:11:28,310
appearing even though we turned
it off in the storyboard.

240
00:11:28,310 --> 00:11:32,110
That's because it's
set by our code.

241
00:11:32,110 --> 00:11:34,630
Now you try setting some
text and images in code,

242
00:11:34,630 --> 00:11:36,050
and take some
challenges, and I'll

243
00:11:36,050 --> 00:11:38,240
see you in the next section.

