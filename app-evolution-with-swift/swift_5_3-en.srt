1
00:00:02,440 --> 00:00:04,980
Welcome back to App
Evolution with Swift.

2
00:00:04,980 --> 00:00:08,320
Our table view has dynamic
data, but when we tap on a cell,

3
00:00:08,320 --> 00:00:10,050
our product view
controller is always

4
00:00:10,050 --> 00:00:12,187
showing the same string still.

5
00:00:12,187 --> 00:00:14,020
That's because we've
got to update our segue

6
00:00:14,020 --> 00:00:18,950
to use data from the array
instead of a fixed value.

7
00:00:18,950 --> 00:00:20,120
So here's the plan.

8
00:00:20,120 --> 00:00:23,370
Instead of setting the product
name to a hard-coded string,

9
00:00:23,370 --> 00:00:26,120
we can first get the
cell that was tapped,

10
00:00:26,120 --> 00:00:29,340
then get the index
path for that cell,

11
00:00:29,340 --> 00:00:31,350
then use the index
path to get the product

12
00:00:31,350 --> 00:00:33,070
name from the array.

13
00:00:33,070 --> 00:00:35,150
And finally, we can
send the product name

14
00:00:35,150 --> 00:00:38,220
to the product view controller.

15
00:00:38,220 --> 00:00:40,280
So getting a copy of
the cell that was tapped

16
00:00:40,280 --> 00:00:42,490
is a little trickier
than it was before.

17
00:00:42,490 --> 00:00:44,810
Because this prepare for
segue function doesn't just

18
00:00:44,810 --> 00:00:47,710
have an index path lying
around like the cell for row

19
00:00:47,710 --> 00:00:49,260
at index path function did.

20
00:00:52,270 --> 00:00:54,500
What we do have though is
this unassuming property

21
00:00:54,500 --> 00:00:56,230
called sender.

22
00:00:56,230 --> 00:00:58,510
Sender is the cell
that caused the segue

23
00:00:58,510 --> 00:01:01,900
to happen, in other
words the tapped cell.

24
00:01:01,900 --> 00:01:04,860
Let's grab that cell in
a variable like this.

25
00:01:04,860 --> 00:01:07,360
Notice we've got to write
as question mark again,

26
00:01:07,360 --> 00:01:08,910
because the compiler
can't be sure

27
00:01:08,910 --> 00:01:11,750
that the sender was definitely
a UI table view cell,

28
00:01:11,750 --> 00:01:15,880
so our cell variable
has to be optional.

29
00:01:15,880 --> 00:01:18,060
Since it is optional, we
first have to unwrap up

30
00:01:18,060 --> 00:01:19,920
the cell with optional binding.

31
00:01:19,920 --> 00:01:22,310
And if it exists, we
can grab the index path

32
00:01:22,310 --> 00:01:24,510
for that cell as
another variable

33
00:01:24,510 --> 00:01:27,920
by calling the table view dot
index path for cell function,

34
00:01:27,920 --> 00:01:31,510
and passing our
unwrapped cell into it.

35
00:01:31,510 --> 00:01:34,510
That index path we get
back is also an optional,

36
00:01:34,510 --> 00:01:37,650
so we'll unwrap that with
optional binding as well.

37
00:01:37,650 --> 00:01:40,070
And if it exists, we
can get the product name

38
00:01:40,070 --> 00:01:42,800
from the product names
array at the position index

39
00:01:42,800 --> 00:01:44,095
path or IP dot row.

40
00:01:47,470 --> 00:01:50,150
Then we can set the product
view controller's product name

41
00:01:50,150 --> 00:01:52,570
property to the product
name from the array

42
00:01:52,570 --> 00:01:54,550
that we just got.

43
00:01:54,550 --> 00:01:56,790
And we can see that, now
when we tap on a cell,

44
00:01:56,790 --> 00:02:00,896
the corresponding text is set
in the product view controller.

45
00:02:00,896 --> 00:02:02,520
Things are working
great, but this code

46
00:02:02,520 --> 00:02:04,092
is pretty messy
and hard to read.

47
00:02:04,092 --> 00:02:05,550
So there's a few
things that we can

48
00:02:05,550 --> 00:02:07,841
do to make it a little bit
easier to read and maintain.

49
00:02:12,280 --> 00:02:15,330
For example, we're using
really ambiguous variable names

50
00:02:15,330 --> 00:02:18,010
like c and IP.

51
00:02:18,010 --> 00:02:22,710
There's also a lot of code block
nesting that we can get rid of.

52
00:02:22,710 --> 00:02:24,660
First, we can use the
same variable name

53
00:02:24,660 --> 00:02:27,370
for both the object we're
checking with if let,

54
00:02:27,370 --> 00:02:30,920
and the variable we
assign to it if it exists.

55
00:02:30,920 --> 00:02:33,560
Here you can see we've
reused the cell and index

56
00:02:33,560 --> 00:02:36,529
path names instead of
just the letter c and IP.

57
00:02:40,840 --> 00:02:42,720
Next, we can combine
getting a copy

58
00:02:42,720 --> 00:02:44,730
of the cell from
the sender object

59
00:02:44,730 --> 00:02:46,973
and unwrapping it
on the same line.

60
00:02:50,680 --> 00:02:54,020
We get an optional index path
back from the table view index

61
00:02:54,020 --> 00:02:56,980
path for cell function,
and assign and unwrap it

62
00:02:56,980 --> 00:02:58,950
with if let all on one line.

63
00:03:03,620 --> 00:03:06,070
Then, we can do the same thing
with the product name value

64
00:03:06,070 --> 00:03:07,500
from our array.

65
00:03:07,500 --> 00:03:09,792
We can read it and set
it on the same line.

66
00:03:12,890 --> 00:03:15,830
Looking better, right,
a lot easier to read.

67
00:03:15,830 --> 00:03:17,330
Well there's, even
one more step we

68
00:03:17,330 --> 00:03:18,538
can take that's even smarter.

69
00:03:21,950 --> 00:03:24,090
Instead of if let, we
can use a statement

70
00:03:24,090 --> 00:03:26,940
called guard, along
with both our let cell

71
00:03:26,940 --> 00:03:32,280
equal and let index path equal
lines separated by commas.

72
00:03:32,280 --> 00:03:35,410
Guard first checks of both
the cell and the index path

73
00:03:35,410 --> 00:03:37,930
values that you're
trying to set exist.

74
00:03:37,930 --> 00:03:40,250
And if they do exist,
it assigns those values

75
00:03:40,250 --> 00:03:43,210
to the cell and
index path variables.

76
00:03:43,210 --> 00:03:46,130
After those, you can
write else return,

77
00:03:46,130 --> 00:03:48,620
which means that if those
variables don't have values

78
00:03:48,620 --> 00:03:50,700
the function will just
stop running right there

79
00:03:50,700 --> 00:03:52,240
and early exit.

80
00:03:52,240 --> 00:03:55,340
That means that you can safely
use the cell and index path

81
00:03:55,340 --> 00:03:57,492
variables anywhere
later in the function,

82
00:03:57,492 --> 00:03:59,200
because you know the
rest of the function

83
00:03:59,200 --> 00:04:01,840
wouldn't have kept running
unless cell and index

84
00:04:01,840 --> 00:04:02,660
path exist.

85
00:04:06,090 --> 00:04:08,470
So here you can see that
our table view works exactly

86
00:04:08,470 --> 00:04:11,310
like it did before, and
the code's easier to read

87
00:04:11,310 --> 00:04:12,307
and easier to maintain.

88
00:04:15,440 --> 00:04:17,720
So why don't you try
passing some dynamic data

89
00:04:17,720 --> 00:04:20,209
through a segue in
your project and take

90
00:04:20,209 --> 00:04:23,259
some challenges, and I'll
see you in the next level.

