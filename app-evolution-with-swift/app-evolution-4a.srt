1
00:00:00,000 --> 00:00:00,732
[MUSIC PLAYING]

2
00:00:01,232 --> 00:00:03,320
Starting back in
the machine age,

3
00:00:03,320 --> 00:00:05,830
the telephone had
just taken the stage.

4
00:00:05,830 --> 00:00:08,039
No one predicted
its acceleration,

5
00:00:08,039 --> 00:00:10,410
evolving all of
our communication.

6
00:00:10,410 --> 00:00:14,305
Today we build with storyboards,
use Xcode projects where

7
00:00:14,305 --> 00:00:17,710
they're stored, controllers
with scroll, navigating tables,

8
00:00:17,710 --> 00:00:20,020
outlets, actions,
buttons, and labels.

9
00:00:20,020 --> 00:00:23,396
To code a phone is a learned
gift with the App Evolution

10
00:00:23,396 --> 00:00:23,895
with Swift.

11
00:00:28,000 --> 00:00:30,099
Welcome back to App
Evolution with Swift.

12
00:00:30,099 --> 00:00:31,890
In this level, we'll
look at how to display

13
00:00:31,890 --> 00:00:33,450
lists of data in tables.

14
00:00:36,260 --> 00:00:39,580
Dropping labels and image views
directly onto the main view

15
00:00:39,580 --> 00:00:41,690
makes sense to
display our content

16
00:00:41,690 --> 00:00:44,200
until we have something that
would naturally appear better

17
00:00:44,200 --> 00:00:47,110
in a list, like
this list of phones.

18
00:00:47,110 --> 00:00:48,520
In this case, it
makes more sense

19
00:00:48,520 --> 00:00:51,640
to use a table view
instead of a normal view,

20
00:00:51,640 --> 00:00:54,380
and we'll hook that up to a
table view controller instead

21
00:00:54,380 --> 00:00:57,230
of a normal view controller.

22
00:00:57,230 --> 00:00:59,830
A table view controller is
just a special view controller

23
00:00:59,830 --> 00:01:01,310
object that has
support for working

24
00:01:01,310 --> 00:01:03,930
with table views built in.

25
00:01:03,930 --> 00:01:06,020
The main view of a
table view controller

26
00:01:06,020 --> 00:01:09,040
is a special object
called table view,

27
00:01:09,040 --> 00:01:12,400
and table views have subviews
just like view controllers do,

28
00:01:12,400 --> 00:01:15,630
but those subviews are
called table cells.

29
00:01:15,630 --> 00:01:17,770
Any normal subviews
like labels and image

30
00:01:17,770 --> 00:01:21,840
views then go inside
of those table cells.

31
00:01:21,840 --> 00:01:24,360
So let's jump back into Xcode
to create our first table view

32
00:01:24,360 --> 00:01:26,900
controller.

33
00:01:26,900 --> 00:01:28,920
To start, we'll turn
off the assistant editor

34
00:01:28,920 --> 00:01:31,190
and go back into
standard editor mode,

35
00:01:31,190 --> 00:01:34,650
and we'll scroll over so we
have some more room to work.

36
00:01:34,650 --> 00:01:36,130
Then we'll create
a brand new scene

37
00:01:36,130 --> 00:01:38,740
using a table view controller
instead of a regular view

38
00:01:38,740 --> 00:01:39,240
controller.

39
00:01:43,400 --> 00:01:49,420
Set the size from
inferred to 4.7 inches,

40
00:01:49,420 --> 00:01:53,920
and line it up a bit next to
the first view controller.

41
00:01:53,920 --> 00:01:56,185
We'll also make sure it's
the initial view controller

42
00:01:56,185 --> 00:01:58,310
so that we'll see it when
we build and run the app.

43
00:02:02,450 --> 00:02:05,530
Now let's click on the good
as old phones folder, right

44
00:02:05,530 --> 00:02:09,979
click and choose New
File, and, again,

45
00:02:09,979 --> 00:02:13,440
we'll use the Cocoa Touch Class
in the iOS source section.

46
00:02:13,440 --> 00:02:16,150
Hit next, but this time,
instead of subclassing

47
00:02:16,150 --> 00:02:19,445
UI View Controller, we'll
subclass UI Table View Controller,

48
00:02:19,445 --> 00:02:21,695
and we'll name this class
Products Table View Controller.

49
00:02:24,867 --> 00:02:27,200
We don't need to create a XIB
file because we've already

50
00:02:27,200 --> 00:02:29,570
got that in our
storyboard, and we'll

51
00:02:29,570 --> 00:02:31,800
keep the language as Swift.

52
00:02:31,800 --> 00:02:37,900
Then we'll hit Next, save
it in our project folder,

53
00:02:37,900 --> 00:02:40,620
and you'll notice there's a ton
of boilerplate code in table

54
00:02:40,620 --> 00:02:42,100
view controllers.

55
00:02:42,100 --> 00:02:44,780
We're not going to need most
of this for this course,

56
00:02:44,780 --> 00:02:47,070
so let's just delete all of
it so we can start fresh.

57
00:02:53,330 --> 00:02:55,580
Don't forget to leave that
last curly brace because it

58
00:02:55,580 --> 00:02:57,764
closes out the class.

59
00:02:57,764 --> 00:02:59,180
Back in the main
storyboard, we'll

60
00:02:59,180 --> 00:03:01,370
click on the table
view controller scene

61
00:03:01,370 --> 00:03:04,340
and go into the class
inspector, and set our class

62
00:03:04,340 --> 00:03:10,590
to products table view
controller and hit return.

63
00:03:10,590 --> 00:03:12,700
And now the storyboard
table view controller

64
00:03:12,700 --> 00:03:14,550
is associated with our
products table view

65
00:03:14,550 --> 00:03:16,400
controller Swift file.

66
00:03:16,400 --> 00:03:18,700
We need to do one more
thing now, though.

67
00:03:18,700 --> 00:03:21,820
You can see that there's already
a prototype cell in this table

68
00:03:21,820 --> 00:03:22,560
view.

69
00:03:22,560 --> 00:03:25,630
If we click it to select it and
look at the attributes panel,

70
00:03:25,630 --> 00:03:29,490
you'll see there's a
field labeled identifier.

71
00:03:29,490 --> 00:03:32,680
We want to set that
identifier to product cell,

72
00:03:32,680 --> 00:03:34,710
and that's going to let
us access this prototype

73
00:03:34,710 --> 00:03:37,340
cell in our Swift file.

74
00:03:37,340 --> 00:03:40,250
Let's jump back in the slides
to talk about reuse identifiers

75
00:03:40,250 --> 00:03:44,120
and how dynamic cells work.

76
00:03:44,120 --> 00:03:47,280
Table cells are recycled
as they scroll off screen,

77
00:03:47,280 --> 00:03:49,960
and the only new cells
that ever get created

78
00:03:49,960 --> 00:03:53,290
are the very first ones as
the table view first loads.

79
00:03:53,290 --> 00:03:55,120
Every other cell that's
created after that

80
00:03:55,120 --> 00:03:58,140
is just pulled out of
that recycling queue.

81
00:03:58,140 --> 00:04:00,770
Let's take a look
at how this works.

82
00:04:00,770 --> 00:04:03,300
On load, three new
cells are created.

83
00:04:03,300 --> 00:04:06,510
We've labeled them A, B, and C.

84
00:04:06,510 --> 00:04:09,880
As the tableview scrolls a
bit, now four unique cells

85
00:04:09,880 --> 00:04:10,810
are visible.

86
00:04:10,810 --> 00:04:15,950
The original A,B, and
C, but also cell D.

87
00:04:15,950 --> 00:04:20,100
So in our application's memory,
there's four cells loaded.

88
00:04:20,100 --> 00:04:24,390
Then, after some more scrolling,
cell A is no longer visible.

89
00:04:24,390 --> 00:04:26,680
But rather than completely
removing it from memory,

90
00:04:26,680 --> 00:04:29,570
it gets placed in
this recycling queue.

91
00:04:29,570 --> 00:04:34,140
On screen, only cells
B, C, and D are visible.

92
00:04:34,140 --> 00:04:38,150
After even more scrolling, a new
cell is ready to be displayed,

93
00:04:38,150 --> 00:04:41,050
but there's no need to create
a brand new cell object

94
00:04:41,050 --> 00:04:45,190
because the recycled cell
A can just be reused.

95
00:04:45,190 --> 00:04:48,410
At the end here, there's still
only four cells in memory,

96
00:04:48,410 --> 00:04:51,630
even though our table view has
displayed a total of five cells

97
00:04:51,630 --> 00:04:53,720
with different content.

98
00:04:53,720 --> 00:04:55,400
This is a simple
example, but think

99
00:04:55,400 --> 00:04:57,330
of a table view in
something like the music

100
00:04:57,330 --> 00:05:01,120
app, where you might have
300 or 400 rows of albums.

101
00:05:01,120 --> 00:05:04,320
It wouldn't be memory efficient
to load all 300 of those cells

102
00:05:04,320 --> 00:05:06,670
into memory, so this
recycling approach

103
00:05:06,670 --> 00:05:09,200
makes sure that there's only
a few cells that are ever

104
00:05:09,200 --> 00:05:12,910
created and just recycled
with new content and new data

105
00:05:12,910 --> 00:05:14,392
as the table scrolls.

106
00:05:14,392 --> 00:05:15,600
It's really memory efficient.

107
00:05:18,530 --> 00:05:20,650
Because these
cells get recycled,

108
00:05:20,650 --> 00:05:23,970
unlike normal view controllers
the content for a table cell

109
00:05:23,970 --> 00:05:26,580
needs to be set in code.

110
00:05:26,580 --> 00:05:29,300
UI table view controller is like
a view controller with table

111
00:05:29,300 --> 00:05:31,610
specific functions,
and two of those

112
00:05:31,610 --> 00:05:33,390
that we'll use and
are automatically

113
00:05:33,390 --> 00:05:35,830
run for us are the
functions table view

114
00:05:35,830 --> 00:05:39,130
number of rows in
section and table view

115
00:05:39,130 --> 00:05:42,180
cell for row at index path.

116
00:05:42,180 --> 00:05:45,480
The first sets the number
of rows in the table view,

117
00:05:45,480 --> 00:05:47,310
and the second is
responsible for creating

118
00:05:47,310 --> 00:05:51,470
one cell for each row.

119
00:05:51,470 --> 00:05:54,070
This function looks really
long, so let's break apart

120
00:05:54,070 --> 00:05:56,810
what it means.

121
00:05:56,810 --> 00:05:59,500
First is the name of the
function-- table view,

122
00:05:59,500 --> 00:06:01,780
and there's
parentheses after it.

123
00:06:01,780 --> 00:06:04,090
Inside of those parentheses
are two parameters

124
00:06:04,090 --> 00:06:07,360
as variables, which are then
available inside of the body

125
00:06:07,360 --> 00:06:10,120
of the function so we can
use them if we need them.

126
00:06:10,120 --> 00:06:14,360
The variables
tableview and section.

127
00:06:14,360 --> 00:06:17,070
The arrow Int at the end
means that the function

128
00:06:17,070 --> 00:06:20,005
should return a number.

129
00:06:20,005 --> 00:06:21,880
Now, you might have
noticed something strange

130
00:06:21,880 --> 00:06:25,240
about these two functions--
they both have the same name,

131
00:06:25,240 --> 00:06:26,374
table view.

132
00:06:26,374 --> 00:06:28,040
But they're actually
different functions

133
00:06:28,040 --> 00:06:30,500
because they have different
parameter names inside

134
00:06:30,500 --> 00:06:32,340
of the function declaration.

135
00:06:32,340 --> 00:06:35,650
The first one has the parameter
names table view and number

136
00:06:35,650 --> 00:06:37,760
of rows in section,
and the second

137
00:06:37,760 --> 00:06:41,862
has the parameters table view
and cell for row at index path.

138
00:06:41,862 --> 00:06:43,695
Because of that, they're
different functions

139
00:06:43,695 --> 00:06:47,660
and they perform
different operations.

140
00:06:47,660 --> 00:06:49,740
Back in the table
view number of rows

141
00:06:49,740 --> 00:06:52,170
in section version
of the function,

142
00:06:52,170 --> 00:06:54,070
we need to return an Int.

143
00:06:54,070 --> 00:06:56,020
So if we start simple
and do just that we

144
00:06:56,020 --> 00:06:59,730
can write return 5 in
the body of this function,

145
00:06:59,730 --> 00:07:03,530
and that means this table
view will have five rows.

146
00:07:03,530 --> 00:07:05,890
Now on to our second
table view function.

147
00:07:05,890 --> 00:07:08,790
The cell for row
at index path one.

148
00:07:08,790 --> 00:07:11,550
This function runs one time
for each number of rows

149
00:07:11,550 --> 00:07:15,241
that we set in the function
above, which was five.

150
00:07:15,241 --> 00:07:17,370
Based on the arrow at
the end of the function,

151
00:07:17,370 --> 00:07:20,610
we can see this one should
return a UI table view cell

152
00:07:20,610 --> 00:07:22,970
object.

153
00:07:22,970 --> 00:07:25,670
We can create the cell by
writing this line of code,

154
00:07:25,670 --> 00:07:28,360
which looks at the storyboard
for any prototype cells

155
00:07:28,360 --> 00:07:31,200
with the reuse identifier
of product cell,

156
00:07:31,200 --> 00:07:33,950
and then creates a cell
object when it finds one.

157
00:07:33,950 --> 00:07:37,980
Remember that we set that
reuse identifier back in Xcode.

158
00:07:37,980 --> 00:07:40,625
Then we can just return our
new cell from the function.

159
00:07:44,015 --> 00:07:46,140
Now we've got our code in
the table view controller

160
00:07:46,140 --> 00:07:50,964
to create five rows and five
cells to go in those rows.

161
00:07:50,964 --> 00:07:52,380
But if we build
and run right now,

162
00:07:52,380 --> 00:07:55,330
our table view is
a bit confusing.

163
00:07:55,330 --> 00:07:57,760
It looks like it's showing
way more than five rows,

164
00:07:57,760 --> 00:08:00,987
but that's not accurate.

165
00:08:00,987 --> 00:08:02,570
It's a little bit
easier to see what's

166
00:08:02,570 --> 00:08:07,310
going on by stopping the app,
clicking on the table view,

167
00:08:07,310 --> 00:08:09,600
and in the attribute
inspector changing the style

168
00:08:09,600 --> 00:08:12,720
from plain to grouped.

169
00:08:12,720 --> 00:08:15,000
When we do that, we can
even see that the prototype

170
00:08:15,000 --> 00:08:16,890
cell looks a bit different.

171
00:08:16,890 --> 00:08:19,510
It looks like the row is
isolated with grey above

172
00:08:19,510 --> 00:08:21,690
and below it.

173
00:08:21,690 --> 00:08:25,350
Now when we build and
run the app again,

174
00:08:25,350 --> 00:08:29,700
we can clearly see that the
table view has five cells.

175
00:08:29,700 --> 00:08:31,810
They don't look like
much yet, but before we

176
00:08:31,810 --> 00:08:34,753
go any further, why don't you
practice creating some cells

177
00:08:34,753 --> 00:08:36,169
and take some
challenges, and I'll

178
00:08:36,169 --> 00:08:38,302
see you in the next section.

