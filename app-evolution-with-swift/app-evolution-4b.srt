1
00:00:04,470 --> 00:00:05,101
Welcome back.

2
00:00:05,101 --> 00:00:06,600
Now that we've got
some cells, we're

3
00:00:06,600 --> 00:00:08,560
going to put some
content inside of them.

4
00:00:11,180 --> 00:00:14,392
UI table view cells actually come
preloaded with a few subviews

5
00:00:14,392 --> 00:00:16,600
that we don't even have to
wire up in the storyboard.

6
00:00:16,600 --> 00:00:18,390
They're already wired up for us.

7
00:00:21,070 --> 00:00:22,570
One is called image
view, and it can

8
00:00:22,570 --> 00:00:26,590
be used to display a small image
in the left side of the cell.

9
00:00:26,590 --> 00:00:28,790
Another is called
text label, and it's

10
00:00:28,790 --> 00:00:31,060
a UI label that
stretches across the rest

11
00:00:31,060 --> 00:00:33,080
of the length of the cell.

12
00:00:33,080 --> 00:00:34,600
We can create the
cell by writing

13
00:00:34,600 --> 00:00:36,670
this line of code
here, which looks

14
00:00:36,670 --> 00:00:38,530
at the storyboard
for any prototype

15
00:00:38,530 --> 00:00:41,720
cells with a reuse
identifier of products cell

16
00:00:41,720 --> 00:00:44,409
and then creates a cell
object when it finds one.

17
00:00:44,409 --> 00:00:45,950
Now you might have
noticed that we're

18
00:00:45,950 --> 00:00:49,322
creating this variable
with let instead of var.

19
00:00:49,322 --> 00:00:50,780
If you have a
variable where you're

20
00:00:50,780 --> 00:00:53,540
going to change it
after it's been created,

21
00:00:53,540 --> 00:00:55,420
you want to use var.

22
00:00:55,420 --> 00:00:57,730
But if not, you want
to use let, because it

23
00:00:57,730 --> 00:01:00,410
makes the variable immutable.

24
00:01:00,410 --> 00:01:02,870
So let's try setting
the cell's textLabel

25
00:01:02,870 --> 00:01:05,770
dot text property
to Hello friend.

26
00:01:05,770 --> 00:01:08,960
If we try that though, we get
an error that looks like this.

27
00:01:08,960 --> 00:01:10,530
What's going on here?

28
00:01:10,530 --> 00:01:12,970
Let's take a look at the docs
for the UI table view cell

29
00:01:12,970 --> 00:01:15,660
to find out.

30
00:01:15,660 --> 00:01:17,990
When we do that, we'll
see something interesting.

31
00:01:17,990 --> 00:01:21,780
The text label property in the
cell isn't just a UI label.

32
00:01:21,780 --> 00:01:24,630
It's a UI label with a
question mark after it.

33
00:01:24,630 --> 00:01:27,860
That question mark means
that this label is optional.

34
00:01:27,860 --> 00:01:30,960
It may or may not exist.

35
00:01:30,960 --> 00:01:32,720
So what would that
mean if the text label

36
00:01:32,720 --> 00:01:34,990
property didn't exist?

37
00:01:34,990 --> 00:01:37,810
That would mean you'd
still have a cell object.

38
00:01:37,810 --> 00:01:40,730
The text label property
wouldn't exist,

39
00:01:40,730 --> 00:01:43,780
which means the text property
of it wouldn't exist.

40
00:01:43,780 --> 00:01:46,514
So trying to set it
would crash the app.

41
00:01:46,514 --> 00:01:48,180
This could actually
happen, because it's

42
00:01:48,180 --> 00:01:51,270
possible to create a custom cell
that doesn't have a text label

43
00:01:51,270 --> 00:01:53,090
property.

44
00:01:53,090 --> 00:01:56,010
That's why Swift has a way
to mark types as optional.

45
00:01:56,010 --> 00:01:58,345
It's a way to say the data
could or could not exist.

46
00:02:01,330 --> 00:02:03,370
Because the text
labels optional,

47
00:02:03,370 --> 00:02:06,320
we first have to check if
it exists before we try

48
00:02:06,320 --> 00:02:08,789
to set the text property on it.

49
00:02:08,789 --> 00:02:10,949
The one way we can do that
is with a conditional.

50
00:02:10,949 --> 00:02:14,550
We can just check if
cell dot textLabel is not nil,

51
00:02:14,550 --> 00:02:16,734
then set the text.

52
00:02:16,734 --> 00:02:18,400
There's an even better
way to write this

53
00:02:18,400 --> 00:02:20,730
without using a conditional
using something called

54
00:02:20,730 --> 00:02:22,040
optional chaining.

55
00:02:22,040 --> 00:02:23,850
And that looks like this.

56
00:02:23,850 --> 00:02:29,090
We just write cell dot textLabel
with a question mark after it dot text equals

57
00:02:29,090 --> 00:02:30,690
a string.

58
00:02:30,690 --> 00:02:33,130
Adding that question mark
after an optional property

59
00:02:33,130 --> 00:02:35,960
means first check
if this exists.

60
00:02:35,960 --> 00:02:38,610
If it does exist, we'll continue
running this line of code

61
00:02:38,610 --> 00:02:40,010
in setting the text.

62
00:02:40,010 --> 00:02:42,920
And if it doesn't exist, we'll
stop running the line of code

63
00:02:42,920 --> 00:02:47,080
right there thus
avoiding a crash.

64
00:02:47,080 --> 00:02:50,780
If we put that updated code back
in our cell creation function,

65
00:02:50,780 --> 00:02:53,130
we can see that we've now
got five cells that all

66
00:02:53,130 --> 00:02:55,990
have the text Hello friend.

67
00:02:55,990 --> 00:02:58,680
The cells image view
property is also optional.

68
00:02:58,680 --> 00:03:00,900
So we can set it the same
way by adding a question

69
00:03:00,900 --> 00:03:03,470
mark after the
image view property,

70
00:03:03,470 --> 00:03:06,510
then we just set that image
property to a UI image

71
00:03:06,510 --> 00:03:09,840
named something that matches
an image in our asset catalog.

72
00:03:09,840 --> 00:03:12,180
Here we're setting
it to image-cell1,

73
00:03:12,180 --> 00:03:14,970
because that's something we
just added to our asset catalog.

74
00:03:14,970 --> 00:03:16,330
And you can see the result here.

75
00:03:19,120 --> 00:03:20,990
Now let's jump back
into Xcode really quick

76
00:03:20,990 --> 00:03:25,719
to see how we can customize
cells in the storyboard.

77
00:03:25,719 --> 00:03:28,010
We can actually adjust some
properties of the prototype

78
00:03:28,010 --> 00:03:30,040
cell from the storyboard.

79
00:03:30,040 --> 00:03:31,684
For example, if we
click on the cell,

80
00:03:31,684 --> 00:03:33,600
we can click and drag
the anchor at the bottom

81
00:03:33,600 --> 00:03:37,500
to make the height
of the cell bigger.

82
00:03:37,500 --> 00:03:39,616
We'll set it to 100
points high and that

83
00:03:39,616 --> 00:03:40,990
should let the
cell image display

84
00:03:40,990 --> 00:03:43,390
in it's full resolution.

85
00:03:43,390 --> 00:03:48,270
If we build and
run again, now you

86
00:03:48,270 --> 00:03:50,030
can see that the cell
height is changed

87
00:03:50,030 --> 00:03:54,220
and the image fits nicely
in there without resizing.

88
00:03:54,220 --> 00:03:57,310
So why don't you try displaying
some dynamic data in your cells

89
00:03:57,310 --> 00:04:00,755
and take some challenges, and
I'll see you in the next level.

