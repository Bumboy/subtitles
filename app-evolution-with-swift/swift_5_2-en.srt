1
00:00:02,310 --> 00:00:03,084
Welcome back.

2
00:00:03,084 --> 00:00:05,250
In this section, we'll
looking at how we can display

3
00:00:05,250 --> 00:00:06,950
dynamic table cell data.

4
00:00:09,990 --> 00:00:11,720
So our table view is
working really well,

5
00:00:11,720 --> 00:00:14,410
but it's always showing the
same label for each line

6
00:00:14,410 --> 00:00:17,280
because we're hard-coding
the label's text.

7
00:00:17,280 --> 00:00:18,700
Let's update our
tableview to show

8
00:00:18,700 --> 00:00:21,700
different data in each cell.

9
00:00:21,700 --> 00:00:24,254
There's a few steps to
setting up dynamic data.

10
00:00:24,254 --> 00:00:25,920
First, we need to
create a variable that

11
00:00:25,920 --> 00:00:27,970
will store multiple
product names,

12
00:00:27,970 --> 00:00:30,430
and we'll use an array for this.

13
00:00:30,430 --> 00:00:32,860
Next, we need to update all
of our table view controller

14
00:00:32,860 --> 00:00:35,770
functions to use the
data from that array,

15
00:00:35,770 --> 00:00:39,970
instead of the hard-coded data
that's in there right now.

16
00:00:39,970 --> 00:00:42,140
Let's start by
creating an array.

17
00:00:42,140 --> 00:00:46,020
Arrays can store multiple
values of a single type of data.

18
00:00:46,020 --> 00:00:48,520
In this case we'll
store strings.

19
00:00:48,520 --> 00:00:51,940
We'll also need to make
this array optional.

20
00:00:51,940 --> 00:00:54,730
We can set the product
names in view Did Load,

21
00:00:54,730 --> 00:00:57,170
and we'll just make four
values for each one of our four

22
00:00:57,170 --> 00:00:57,670
phones.

23
00:01:00,969 --> 00:01:02,510
Now that we've got
some data, we need

24
00:01:02,510 --> 00:01:06,050
to update the table view number
of rows in section function

25
00:01:06,050 --> 00:01:08,540
to return the number of
items in the array instead

26
00:01:08,540 --> 00:01:10,810
of a hard-coded number.

27
00:01:10,810 --> 00:01:13,440
Then we'll need to update
the table view cell for row

28
00:01:13,440 --> 00:01:15,670
at index path version
of the function

29
00:01:15,670 --> 00:01:18,670
to display one of the names
in the array for each cell,

30
00:01:18,670 --> 00:01:22,050
instead of the hard-coded
text that's in there now.

31
00:01:22,050 --> 00:01:25,450
First, in the table view number
of rows in section function,

32
00:01:25,450 --> 00:01:28,240
instead of just returning
a hard-coded number five,

33
00:01:28,240 --> 00:01:31,270
we can instead return the count
property of the product names

34
00:01:31,270 --> 00:01:32,340
array.

35
00:01:32,340 --> 00:01:34,425
Remember that product
names is an optional,

36
00:01:34,425 --> 00:01:36,550
so we've got to put the
question mark after it when

37
00:01:36,550 --> 00:01:38,070
we're writing it.

38
00:01:38,070 --> 00:01:40,930
The count property returns the
number of items in the array.

39
00:01:40,930 --> 00:01:44,900
So since we've got four array
items, we'll get four rows.

40
00:01:44,900 --> 00:01:46,960
If we try to write it
just like this though,

41
00:01:46,960 --> 00:01:49,450
we're going to
run into an error.

42
00:01:49,450 --> 00:01:53,000
The problem is, is that if
product names doesn't exist,

43
00:01:53,000 --> 00:01:55,570
then the count property
won't exist either.

44
00:01:55,570 --> 00:01:59,060
And therefore, this function
is returning an optional Int

45
00:01:59,060 --> 00:02:03,240
instead of a regular Int.

46
00:02:03,240 --> 00:02:06,260
To fix this we can write
if let p Names equals

47
00:02:06,260 --> 00:02:09,380
product names, and inside
of that conditional, return

48
00:02:09,380 --> 00:02:11,720
p Names dot count.

49
00:02:11,720 --> 00:02:14,320
If let is a special way of
working with optionals called

50
00:02:14,320 --> 00:02:16,640
optional binding,
and it combines

51
00:02:16,640 --> 00:02:19,490
checking if the value
exists, and assigning it

52
00:02:19,490 --> 00:02:22,730
to a new variable
all in one line.

53
00:02:22,730 --> 00:02:26,570
Here, the if part is checking
if product names exists.

54
00:02:26,570 --> 00:02:28,530
And if it does, it
copies everything

55
00:02:28,530 --> 00:02:30,980
that's in product names
into a new variable called

56
00:02:30,980 --> 00:02:35,270
p Names that's only accessible
inside of the if statement.

57
00:02:35,270 --> 00:02:38,460
Since we know anything inside
of the if statement exists,

58
00:02:38,460 --> 00:02:41,310
we can just return
p Names dot count and we

59
00:02:41,310 --> 00:02:44,680
can be sure that we're
returning a real Int.

60
00:02:44,680 --> 00:02:48,270
After this optional binding,
we also need to return zero.

61
00:02:48,270 --> 00:02:51,080
That's because if the product
names array doesn't exist,

62
00:02:51,080 --> 00:02:55,000
we still need to return an Int.

63
00:02:55,000 --> 00:02:57,080
Next, we need to map
each item in the array

64
00:02:57,080 --> 00:03:00,010
to a corresponding
cell in the table.

65
00:03:00,010 --> 00:03:02,370
We've got an array
with four strings,

66
00:03:02,370 --> 00:03:03,930
and we've got four cells.

67
00:03:03,930 --> 00:03:06,210
So if each cell were
displaying the text of one

68
00:03:06,210 --> 00:03:08,480
of those product names,
that would work out great.

69
00:03:11,140 --> 00:03:14,260
So in the table view cell for
row at index path function,

70
00:03:14,260 --> 00:03:17,080
we first need to get a copy
of the name from the array

71
00:03:17,080 --> 00:03:19,700
and store it in a variable
called product Name.

72
00:03:19,700 --> 00:03:22,660
Just pretend for a minute
that we've got that already.

73
00:03:22,660 --> 00:03:25,670
Then, since that product name
variable will be optional,

74
00:03:25,670 --> 00:03:28,310
we can unwrap it with if left.

75
00:03:28,310 --> 00:03:30,820
And if it does exist,
we set the cells text

76
00:03:30,820 --> 00:03:33,740
label dot text property to
the product name variable.

77
00:03:36,670 --> 00:03:38,980
So as you may know,
each value in an array

78
00:03:38,980 --> 00:03:40,720
can be accessed by
putting a number

79
00:03:40,720 --> 00:03:44,680
inside of square brackets
after the array variable name.

80
00:03:44,680 --> 00:03:47,140
So here, the first value could
be accessed with the number

81
00:03:47,140 --> 00:03:49,860
zero, like this.

82
00:03:49,860 --> 00:03:52,780
And the last value can be
accessed with a number three,

83
00:03:52,780 --> 00:03:53,460
like this.

84
00:03:56,550 --> 00:03:59,450
Here we've set the product name
equal to the product name's

85
00:03:59,450 --> 00:04:01,700
arrays at position zero.

86
00:04:01,700 --> 00:04:05,360
Remember that this function runs
once for each row in the table,

87
00:04:05,360 --> 00:04:07,520
so doing this will
actually set the name to be

88
00:04:07,520 --> 00:04:10,130
the same for all four rows.

89
00:04:10,130 --> 00:04:12,250
We need that number
to be dynamic

90
00:04:12,250 --> 00:04:17,399
based on the current cell,
and not just always zero.

91
00:04:17,399 --> 00:04:19,880
The answer lies in index paths.

92
00:04:19,880 --> 00:04:23,840
Every cell in the table view
has an index path property,

93
00:04:23,840 --> 00:04:27,690
and every index path
property has a row property.

94
00:04:27,690 --> 00:04:30,950
And that row property is just
a number, starting at zero

95
00:04:30,950 --> 00:04:34,900
for the first cell, ending
at three for the last cell.

96
00:04:34,900 --> 00:04:37,380
This is really convenient
because our array also starts

97
00:04:37,380 --> 00:04:41,210
at zero and ends in three.

98
00:04:41,210 --> 00:04:43,070
So instead of
hard-coding a number,

99
00:04:43,070 --> 00:04:46,716
we can use Index Path dot row
for the index of the array,

100
00:04:46,716 --> 00:04:48,090
and then we should
be good to go.

101
00:04:52,950 --> 00:04:55,420
As you can see, each cell
now displays the name

102
00:04:55,420 --> 00:04:57,549
from one item in the array.

103
00:04:57,549 --> 00:04:59,590
So now it's time for you
to add some dynamic data

104
00:04:59,590 --> 00:05:01,690
to your cells, and
take some challenges.

105
00:05:01,690 --> 00:05:04,320
And I'll see you in
the next section.

