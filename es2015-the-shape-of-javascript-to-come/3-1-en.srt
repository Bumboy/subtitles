1
00:00:00,000 --> 00:00:01,760
[SINGING] We've
had about enough,

2
00:00:01,760 --> 00:00:05,200
JavaScript is getting tough,
ECMAScript is the solution.

3
00:00:05,200 --> 00:00:06,192
Join the revolution.

4
00:00:06,192 --> 00:00:09,060
Let your objects fill the
gaps inside the Sets and Maps,

5
00:00:09,060 --> 00:00:11,530
use OOP patterns to the max.

6
00:00:11,530 --> 00:00:15,450
New class and module syntax,
const and let will do the thing,

7
00:00:15,450 --> 00:00:17,098
to stop the hoisting.

8
00:00:17,098 --> 00:00:19,912
With pure arrays struggling
is destructuring.

9
00:00:19,912 --> 00:00:28,540
Keep your JS nice and
lean by using ES2015.

10
00:00:28,540 --> 00:00:32,189
You're watching ES2015, The
Shape of JavaScript to Come.

11
00:00:32,189 --> 00:00:34,240
I'm Carlos Souza,
and in this level

12
00:00:34,240 --> 00:00:35,810
we'll be learning
about additions

13
00:00:35,810 --> 00:00:39,755
to object and template strings.

14
00:00:39,755 --> 00:00:42,130
The first thing that we're
going to look at in this level

15
00:00:42,130 --> 00:00:46,710
is a new way to create objects
and assign property values.

16
00:00:46,710 --> 00:00:49,250
Here we have the
buildUser function,

17
00:00:49,250 --> 00:00:53,370
which takes two
parameters, first and last.

18
00:00:53,370 --> 00:00:55,690
It appends first and
last names putting

19
00:00:55,690 --> 00:00:57,500
a blank space in the middle.

20
00:00:57,500 --> 00:01:01,520
And then assigns it to a
local variable, fullName.

21
00:01:01,520 --> 00:01:05,160
Finally, it returns an
object with the first, last

22
00:01:05,160 --> 00:01:07,580
and fullName properties,
and whose values

23
00:01:07,580 --> 00:01:10,470
come from local variables
with the same name.

24
00:01:10,470 --> 00:01:13,710
To use this function we call
it with any two arguments,

25
00:01:13,710 --> 00:01:15,290
like "Sam" and "Williams"

26
00:01:15,290 --> 00:01:17,900
and get back a return
object with properties

27
00:01:17,900 --> 00:01:19,870
for first, last and fullName.

28
00:01:23,030 --> 00:01:24,530
Notice that when
creating the return

29
00:01:24,530 --> 00:01:28,690
object from the function body
we tend to repeat names a lot--

30
00:01:28,690 --> 00:01:32,720
first, first, last,
last, fullName, fullName.

31
00:01:32,720 --> 00:01:34,790
That's kind of a lot of code.

32
00:01:34,790 --> 00:01:38,430
We can make this code shorter
with the new <i>object initializer</i>

33
00:01:38,430 --> 00:01:39,700
<i>shorthand</i>.

34
00:01:39,700 --> 00:01:41,740
Instead of repeating
names we can

35
00:01:41,740 --> 00:01:43,880
use a single name
that is used for both

36
00:01:43,880 --> 00:01:47,230
the property and the value
that's being assigned.

37
00:01:47,230 --> 00:01:49,480
As you can see way cleaner.

38
00:01:49,480 --> 00:01:53,050
Now this only works when both
properties and values have

39
00:01:53,050 --> 00:01:55,110
the same name,
but you soon start

40
00:01:55,110 --> 00:01:58,150
noticing that this
happens a lot in our code.

41
00:01:58,150 --> 00:02:00,350
If we run our buildUser
function again,

42
00:02:00,350 --> 00:02:01,920
we can see our
code still produces

43
00:02:01,920 --> 00:02:05,570
the same expected output.

44
00:02:05,570 --> 00:02:07,950
We can create objects
like this anywhere,

45
00:02:07,950 --> 00:02:10,039
not just in function returns.

46
00:02:10,039 --> 00:02:13,990
Here we create an object with
the name, age and friend

47
00:02:13,990 --> 00:02:14,800
properties.

48
00:02:14,800 --> 00:02:17,720
And assign it to
the user variable.

49
00:02:17,720 --> 00:02:21,240
From this variable we can
call properties name, age

50
00:02:21,240 --> 00:02:23,190
and friends.

51
00:02:23,190 --> 00:02:26,500
As you can see in this
example, creating an object

52
00:02:26,500 --> 00:02:28,440
using the new
syntax is basically

53
00:02:28,440 --> 00:02:31,745
half the size of what it used
to be with the old syntax.

54
00:02:34,380 --> 00:02:36,810
Now let's look at the other
side of the operation,

55
00:02:36,810 --> 00:02:39,990
reading properties from objects.

56
00:02:39,990 --> 00:02:43,220
In this example the buildUser
function returns an object.

57
00:02:43,220 --> 00:02:46,850
And from this object we
read the first, last

58
00:02:46,850 --> 00:02:48,500
and fullName properties.

59
00:02:48,500 --> 00:02:51,800
And assign them to local
variables with the same name,

60
00:02:51,800 --> 00:02:54,840
first, last and fullName.

61
00:02:54,840 --> 00:02:57,260
We can now write this
code in a much better way

62
00:02:57,260 --> 00:02:59,600
using <i>object destructuring</i>.

63
00:02:59,600 --> 00:03:01,760
We use a single let
declaration, which

64
00:03:01,760 --> 00:03:05,340
takes a list of property
names in curly braces.

65
00:03:05,340 --> 00:03:08,820
This automatically assigns
to the first, last

66
00:03:08,820 --> 00:03:11,560
and fullName local
variables, the values

67
00:03:11,560 --> 00:03:14,820
from properties with the same
name from the object returned

68
00:03:14,820 --> 00:03:16,390
from buildUser.

69
00:03:16,390 --> 00:03:18,710
If we run this code
we can see it still

70
00:03:18,710 --> 00:03:20,025
prints the expected output.

71
00:03:22,970 --> 00:03:26,480
Not all properties have to
be destructured all the time.

72
00:03:26,480 --> 00:03:29,120
Sometimes all you
might want is a subset

73
00:03:29,120 --> 00:03:32,050
of the properties returned by
an object, and that's fine.

74
00:03:32,050 --> 00:03:34,770
We can select the
properties that we want.

75
00:03:34,770 --> 00:03:38,100
In this example we don't
need first or last.

76
00:03:38,100 --> 00:03:41,720
So we can leave them out
and ask just for fullName.

77
00:03:41,720 --> 00:03:45,330
Or we can grab only last
and fullName from the return

78
00:03:45,330 --> 00:03:47,390
object leaving first out.

79
00:03:51,530 --> 00:03:53,740
Let's do a quick recap
since these two things

80
00:03:53,740 --> 00:03:55,860
look very much
identical, but are

81
00:03:55,860 --> 00:03:58,250
used in different scenarios.

82
00:03:58,250 --> 00:04:00,830
We use the object
initializer shorthand

83
00:04:00,830 --> 00:04:05,720
to assign from variables to
properties on a new object.

84
00:04:05,720 --> 00:04:10,130
And object destructuring is used
to read from object properties

85
00:04:10,130 --> 00:04:13,760
and assign two local variables.

86
00:04:13,760 --> 00:04:16,350
Now let's look at something
that you and I certainly

87
00:04:16,350 --> 00:04:17,850
do quite a lot.

88
00:04:17,850 --> 00:04:21,225
Which is assigning a function
to a property on an object.

89
00:04:23,970 --> 00:04:28,480
Our buildUser function now takes
three parameters, first last

90
00:04:28,480 --> 00:04:30,520
and postCount.

91
00:04:30,520 --> 00:04:33,080
It assigns to fullName
just like before,

92
00:04:33,080 --> 00:04:37,280
and sets the ACTIVE_POST_COUNT
constant to 10.

93
00:04:37,280 --> 00:04:40,660
The return object is using
the new object initializer

94
00:04:40,660 --> 00:04:45,160
shorthand we've just learned
for first, last and fullName.

95
00:04:45,160 --> 00:04:48,780
And then returning a
method called isActive.

96
00:04:48,780 --> 00:04:52,190
We create this method by
assigning an anonymous function

97
00:04:52,190 --> 00:04:55,250
to the isActive property.

98
00:04:55,250 --> 00:04:58,070
As you can see, we're adding
a function to an object

99
00:04:58,070 --> 00:05:01,610
by specifying the property name,
and using the full function

100
00:05:01,610 --> 00:05:04,660
definition, including
the function keyword.

101
00:05:04,660 --> 00:05:06,540
In this new version
of JavaScript

102
00:05:06,540 --> 00:05:11,590
we can make this code
shorter and easier to read.

103
00:05:11,590 --> 00:05:15,230
Here's how I can assign the same
function using a new shorthand

104
00:05:15,230 --> 00:05:17,410
notation.

105
00:05:17,410 --> 00:05:20,390
The function keyword
is no longer necessary.

106
00:05:20,390 --> 00:05:24,510
All we need is the name of the
property followed by parenths

107
00:05:24,510 --> 00:05:26,510
and then curly braces.

108
00:05:26,510 --> 00:05:31,220
That's it, less characters
and easier to read.

109
00:05:31,220 --> 00:05:33,510
One last thing that we can
change in our buildUser

110
00:05:33,510 --> 00:05:36,670
function is how we create
the fullName string.

111
00:05:36,670 --> 00:05:38,290
There's a new
feature in JavaScript

112
00:05:38,290 --> 00:05:39,930
called <i>template strings</i>

113
00:05:39,930 --> 00:05:42,440
which are string
literals with support

114
00:05:42,440 --> 00:05:44,490
for string interpolation.

115
00:05:44,490 --> 00:05:47,290
Instead of appending
strings using the plus sign,

116
00:05:47,290 --> 00:05:52,600
we can wrap the entire text with
backticks, not single quotes.

117
00:05:52,600 --> 00:05:56,100
Any JavaScript that needs to be
evaluated inside of that text

118
00:05:56,100 --> 00:06:00,760
is wrapped in dollar
sign and curly braces.

119
00:06:00,760 --> 00:06:02,760
Template strings
can also be used

120
00:06:02,760 --> 00:06:05,820
to make multi-line text
easier to work with.

121
00:06:05,820 --> 00:06:08,230
Here, this very
long text can all

122
00:06:08,230 --> 00:06:11,000
be placed between two backticks.

123
00:06:11,000 --> 00:06:14,490
Any new line characters
will be preserved.

124
00:06:14,490 --> 00:06:16,520
If we print this
to the console, we

125
00:06:16,520 --> 00:06:20,095
can see that it outputs the
text and preserves the newline

126
00:06:20,095 --> 00:06:20,595
characters.

127
00:06:24,300 --> 00:06:26,720
Now it's your turn to head
over to the challenge section,

128
00:06:26,720 --> 00:06:29,180
and practice some of the things
we've learned about objects

129
00:06:29,180 --> 00:06:31,200
and template strings.

