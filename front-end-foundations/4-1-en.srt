1
00:00:00,540 --> 00:00:03,160
[SINGING] In 1980 Tim
wrote ENQUIRE at CERN,

2
00:00:03,160 --> 00:00:05,230
invented the idea of
hyperlinks in turn.

3
00:00:05,230 --> 00:00:07,820
In 1990 Robert joined,
a document they charted.

4
00:00:07,820 --> 00:00:10,320
And that's pretty much how the
whole world wide web started.

5
00:00:10,320 --> 00:00:11,820
They defined some
markup code called

6
00:00:11,820 --> 00:00:14,650
HTML, which paved the way for
stylesheets to decorate, as

7
00:00:14,650 --> 00:00:15,500
well.

8
00:00:15,500 --> 00:00:17,660
Navigate through URLs
to internet locations.

9
00:00:17,660 --> 00:00:20,240
And you can learn it all,
Front-End Foundations.

10
00:00:20,240 --> 00:00:24,696
You can learn it all,
Front-End Foundations.

11
00:00:28,620 --> 00:00:30,800
Welcome back to
Front-End Foundations.

12
00:00:30,800 --> 00:00:32,890
In this section, we're
going to be adding images

13
00:00:32,890 --> 00:00:34,709
to our web page.

14
00:00:34,709 --> 00:00:36,750
Now, when you're working
with content on the web,

15
00:00:36,750 --> 00:00:39,335
there's really three
different types of images

16
00:00:39,335 --> 00:00:44,320
that you encounter-- content
images, layout images, and user

17
00:00:44,320 --> 00:00:46,760
interface images.

18
00:00:46,760 --> 00:00:48,560
Content images are
images that are just

19
00:00:48,560 --> 00:00:52,700
as necessary to the page as all
the text that appears on it.

20
00:00:52,700 --> 00:00:56,740
An example of that are the
product images on amazon.com.

21
00:00:56,740 --> 00:00:59,580
These images are actual
content on the site.

22
00:00:59,580 --> 00:01:04,360
And they help you decide what
content you want to look at.

23
00:01:04,360 --> 00:01:06,020
Layout images, on
the other hand,

24
00:01:06,020 --> 00:01:08,890
are images that appear in the
background of the web page.

25
00:01:08,890 --> 00:01:10,820
And they're not
necessary to understand

26
00:01:10,820 --> 00:01:12,690
the content of the page.

27
00:01:12,690 --> 00:01:15,250
Take this Adobe
page, for example.

28
00:01:15,250 --> 00:01:17,350
If this little star at
the bottom right corner

29
00:01:17,350 --> 00:01:19,130
was not part of
the background, you

30
00:01:19,130 --> 00:01:21,950
would still be able to
consume and understand all

31
00:01:21,950 --> 00:01:24,050
of this content on the page.

32
00:01:24,050 --> 00:01:27,400
So it's a layout image.

33
00:01:27,400 --> 00:01:29,692
Another type are user
interface images.

34
00:01:29,692 --> 00:01:31,150
And these are images
that will help

35
00:01:31,150 --> 00:01:33,120
you understand
how to move around

36
00:01:33,120 --> 00:01:36,150
or navigate through the
different sections on the site.

37
00:01:36,150 --> 00:01:37,520
These are helpful images.

38
00:01:37,520 --> 00:01:39,280
But they're not
in the background.

39
00:01:39,280 --> 00:01:41,427
And they're not actual content.

40
00:01:41,427 --> 00:01:43,010
So they're sort of
their own category.

41
00:01:45,970 --> 00:01:48,980
Let's start by learning how
to create content images.

42
00:01:48,980 --> 00:01:52,140
Images are created
with the img tag.

43
00:01:52,140 --> 00:01:55,300
And like link, img
is an empty tag,

44
00:01:55,300 --> 00:01:59,560
which means you don't have an
opening and a closing version.

45
00:01:59,560 --> 00:02:03,500
The place where you tell the
img tag which image to display

46
00:02:03,500 --> 00:02:05,780
is with the src attribute.

47
00:02:05,780 --> 00:02:10,990
You set that src attribute
equal to a path to an image.

48
00:02:10,990 --> 00:02:13,300
So if we look at the
contents of our server,

49
00:02:13,300 --> 00:02:17,140
we might have our
magic-cake.html file.

50
00:02:17,140 --> 00:02:20,530
And in the same folder
we might have cake.png,

51
00:02:20,530 --> 00:02:21,670
which is an image file.

52
00:02:24,980 --> 00:02:26,470
It might make more
sense, though,

53
00:02:26,470 --> 00:02:29,180
to put all of our images
in their own folder,

54
00:02:29,180 --> 00:02:32,090
so they're not cluttering up
our main folder that contains

55
00:02:32,090 --> 00:02:34,590
all of our HTML and CSS.

56
00:02:34,590 --> 00:02:35,920
Setting that up is really easy.

57
00:02:35,920 --> 00:02:39,340
We just create a folder and
put the images inside of it.

58
00:02:39,340 --> 00:02:42,840
But that means that we also
need to update our relative path

59
00:02:42,840 --> 00:02:44,900
that's linking to the image.

60
00:02:44,900 --> 00:02:48,195
So instead of just
linking to cake.png,

61
00:02:48,195 --> 00:02:49,820
we now have to link
to images/cake.png.

62
00:02:52,531 --> 00:02:54,030
And that's going
to tell the browser

63
00:02:54,030 --> 00:02:57,460
to look for an images
folder with that image file

64
00:02:57,460 --> 00:02:59,620
inside of it and
display it on the page.

65
00:03:02,530 --> 00:03:04,030
Let's look at how
images are loaded

66
00:03:04,030 --> 00:03:06,040
in a little bit of
a different way.

67
00:03:06,040 --> 00:03:09,450
So first, the browser
requests an HTML file,

68
00:03:09,450 --> 00:03:11,790
like magic-cake.html.

69
00:03:11,790 --> 00:03:15,180
Then magic-cake.html is
returned to the browser,

70
00:03:15,180 --> 00:03:17,170
and the HTML is loaded.

71
00:03:17,170 --> 00:03:22,070
In that HTML, there's an img
tag with an src attribute.

72
00:03:22,070 --> 00:03:26,390
The file in that src is then
requested from the server,

73
00:03:26,390 --> 00:03:29,960
in this case in images/cake.png.

74
00:03:29,960 --> 00:03:32,920
And then that image file is
returned back to the browser

75
00:03:32,920 --> 00:03:34,450
and displayed.

76
00:03:34,450 --> 00:03:36,850
So there's two requests
happening here.

77
00:03:36,850 --> 00:03:39,540
The first time, we're
requesting the HTML.

78
00:03:39,540 --> 00:03:42,920
And then that HTML is making
another request for an image.

79
00:03:45,550 --> 00:03:47,950
Another attribute that
all img tags should

80
00:03:47,950 --> 00:03:50,350
have is the Alt attribute.

81
00:03:50,350 --> 00:03:52,070
And inside of that
Alt attribute,

82
00:03:52,070 --> 00:03:56,692
you should put a description
of the content of the image.

83
00:03:56,692 --> 00:03:58,150
You might be asking,
well, why do I

84
00:03:58,150 --> 00:04:00,540
need a description of my image?

85
00:04:00,540 --> 00:04:03,760
And in short, it's for
accessibility reasons.

86
00:04:03,760 --> 00:04:05,780
Not all visitors to
your site are going

87
00:04:05,780 --> 00:04:07,580
to be able to view the images.

88
00:04:07,580 --> 00:04:10,940
And visually-impaired users
rely on screen readers

89
00:04:10,940 --> 00:04:14,560
to describe the text
and the images to them.

90
00:04:14,560 --> 00:04:16,980
And adding an Alt
attribute is an easy way

91
00:04:16,980 --> 00:04:20,610
to let screen readers do that.

92
00:04:20,610 --> 00:04:23,580
Img is an inline-level tag.

93
00:04:23,580 --> 00:04:26,710
So like anchor tags, which
are also inline level,

94
00:04:26,710 --> 00:04:28,170
they're usually
going to go inside

95
00:04:28,170 --> 00:04:30,830
of another block-level tag.

96
00:04:30,830 --> 00:04:34,330
So here on magic-cake.html,
we've added another section

97
00:04:34,330 --> 00:04:36,280
called Your Photos.

98
00:04:36,280 --> 00:04:40,100
And that contains an unordered
list with a class of Photos

99
00:04:40,100 --> 00:04:45,040
and some list items that
contain image files.

100
00:04:45,040 --> 00:04:46,820
So when we view
that in the browser,

101
00:04:46,820 --> 00:04:49,690
things don't look exactly
the way we want them to.

102
00:04:49,690 --> 00:04:51,940
Each one of these
photos is displaying

103
00:04:51,940 --> 00:04:55,220
on top of each other, as
opposed to side by side.

104
00:04:55,220 --> 00:04:57,850
So we'll need to jump into
CSS to fix that problem.

105
00:05:02,940 --> 00:05:04,970
We can first take
off the bullet points

106
00:05:04,970 --> 00:05:09,110
and remove the padding from
our unordered list of photos.

107
00:05:09,110 --> 00:05:10,850
And then we can
adjust that photos

108
00:05:10,850 --> 00:05:13,907
list items to display
inline and have

109
00:05:13,907 --> 00:05:15,490
a little bit of a
padding on the left,

110
00:05:15,490 --> 00:05:17,810
so all three photos
aren't just pushed right

111
00:05:17,810 --> 00:05:18,930
against each other.

112
00:05:18,930 --> 00:05:19,930
And this is what we see.

113
00:05:22,600 --> 00:05:24,790
Another place where
content images are commonly

114
00:05:24,790 --> 00:05:27,180
used it to display
the logo for a site

115
00:05:27,180 --> 00:05:29,390
or some other kind of site mark.

116
00:05:29,390 --> 00:05:33,740
So here we're going to replace
our site's h1 with an img

117
00:05:33,740 --> 00:05:37,590
tag that contains an
image version of our logo,

118
00:05:37,590 --> 00:05:38,450
as you can see here.

119
00:05:41,680 --> 00:05:44,100
Just like the h1 text
that we replaced,

120
00:05:44,100 --> 00:05:47,820
we want our image to be
centered inside of the header.

121
00:05:47,820 --> 00:05:50,650
But img is an inline-level tag.

122
00:05:50,650 --> 00:05:52,290
And therefore it
can't be centered

123
00:05:52,290 --> 00:05:54,430
with the text-align property.

124
00:05:54,430 --> 00:05:56,560
Instead, we can just
change the image

125
00:05:56,560 --> 00:06:00,620
to display as a block-level tag
and use Margin Auto to center

126
00:06:00,620 --> 00:06:01,820
it.

127
00:06:01,820 --> 00:06:03,780
When we write the
CSS, we'll want

128
00:06:03,780 --> 00:06:06,760
to make sure to only select
images that are children

129
00:06:06,760 --> 00:06:09,640
of the tag that has
a class of Header

130
00:06:09,640 --> 00:06:11,200
so that all images
aren't affected.

131
00:06:15,484 --> 00:06:17,400
And now it's time for
you to work with content

132
00:06:17,400 --> 00:06:19,710
images in the challenges.

