1
00:00:02,820 --> 00:00:03,630
Welcome back.

2
00:00:03,630 --> 00:00:06,730
This is Level 4, Section
2, Withholding Widths,

3
00:00:06,730 --> 00:00:08,980
where we're going to be
talking about the new property

4
00:00:08,980 --> 00:00:10,316
for setting width values.

5
00:00:14,690 --> 00:00:17,020
So far we've learned
how to have items wrap,

6
00:00:17,020 --> 00:00:18,700
and grow, and shrink.

7
00:00:18,700 --> 00:00:21,550
But in order to create a
two-column layout like this,

8
00:00:21,550 --> 00:00:23,810
we need to be able to
set consistent widths.

9
00:00:28,360 --> 00:00:32,310
The flex-basis property is used
to specify the initial size

10
00:00:32,310 --> 00:00:33,610
of a flex item.

11
00:00:33,610 --> 00:00:36,960
It defaults to auto and
currently supports CSS units

12
00:00:36,960 --> 00:00:39,730
like percentage, pixels,
ems, rems, and more.

13
00:00:42,310 --> 00:00:45,640
We've seen flex-basis in action
so far as elements adjust

14
00:00:45,640 --> 00:00:47,510
to the size of their content.

15
00:00:47,510 --> 00:00:50,600
Here, we're going to override
that with flex-basis.

16
00:00:50,600 --> 00:00:53,010
On our containing
element, we're going

17
00:00:53,010 --> 00:00:56,810
to set a flex-basis of 47.5%.

18
00:00:56,810 --> 00:00:59,050
That's going to
have two containers

19
00:00:59,050 --> 00:01:00,870
right next to each other.

20
00:01:00,870 --> 00:01:04,640
We're using justify-content
to add the space in between.

21
00:01:04,640 --> 00:01:09,270
For our images, we're using
a flex-basis of 140 pixels.

22
00:01:09,270 --> 00:01:11,770
That's going to get a
consistent image container

23
00:01:11,770 --> 00:01:13,893
size on all of our clues.

24
00:01:17,620 --> 00:01:19,480
Here, we can see how
flex-basis works

25
00:01:19,480 --> 00:01:21,730
when we have a
specific pixel value

26
00:01:21,730 --> 00:01:25,520
and allow the other item
to adjust to the space.

27
00:01:25,520 --> 00:01:28,250
As the screen size
shrinks, the text area

28
00:01:28,250 --> 00:01:29,970
is going to
continually get smaller

29
00:01:29,970 --> 00:01:31,940
until we have all
of the items wrap.

30
00:01:36,430 --> 00:01:39,530
We can use absolute
units in flex-basis.

31
00:01:39,530 --> 00:01:42,900
So here, with four divs
in a flex container,

32
00:01:42,900 --> 00:01:47,040
we're setting each
div to 250 pixels.

33
00:01:47,040 --> 00:01:51,670
By default, they won't grow any
larger than the 250 pixels.

34
00:01:51,670 --> 00:01:54,980
So even though our flex
container has more space,

35
00:01:54,980 --> 00:01:58,786
those four divs are only going
to take up the 250 pixels each.

36
00:02:02,690 --> 00:02:06,500
Alternatively, we can use
percentages as a relative unit,

37
00:02:06,500 --> 00:02:11,100
or combine a pixel width
with a flex-grow of 1,

38
00:02:11,100 --> 00:02:14,910
so that the items will grow
beyond their 250 pixels

39
00:02:14,910 --> 00:02:19,640
when the container grows
larger than that as well.

40
00:02:19,640 --> 00:02:21,849
We may be getting more
content-based values

41
00:02:21,849 --> 00:02:24,223
in the future, so you'll want
to keep an eye on the spec.

42
00:02:28,600 --> 00:02:31,880
Now it's your turn to use
flex-basis to control widths

43
00:02:31,880 --> 00:02:33,610
in the challenges.

