1
00:00:02,040 --> 00:00:03,720
In this section,
we'll learn about one

2
00:00:03,720 --> 00:00:07,880
of the most talked about
features of Go-- goroutines.

3
00:00:07,880 --> 00:00:09,830
But before we talk
about goroutines,

4
00:00:09,830 --> 00:00:15,270
let's take a step back so we can
understand why they even exist.

5
00:00:15,270 --> 00:00:18,550
Consider the following
search engine, "Big Search."

6
00:00:18,550 --> 00:00:21,640
Big Search allows us
to type in a keyword

7
00:00:21,640 --> 00:00:24,630
and it will search the
web for three things--

8
00:00:24,630 --> 00:00:27,880
websites, images, and videos.

9
00:00:27,880 --> 00:00:30,400
Depending on how Big
Search is implemented,

10
00:00:30,400 --> 00:00:34,300
there are a couple different
ways this search can happen.

11
00:00:34,300 --> 00:00:37,980
We could implement Big Search
as a sequential program.

12
00:00:37,980 --> 00:00:41,760
In sequential programs,
before a new task starts,

13
00:00:41,760 --> 00:00:44,400
the previous one must finish.

14
00:00:44,400 --> 00:00:46,620
If Big Search was
coded this way,

15
00:00:46,620 --> 00:00:48,260
here's how it could behave.

16
00:00:48,260 --> 00:00:51,380
It would start with the
first search, say, website.

17
00:00:51,380 --> 00:00:53,650
Only when that
search was finished,

18
00:00:53,650 --> 00:00:57,180
it would move on to the
next search, images.

19
00:00:57,180 --> 00:00:59,560
Then when that was
complete, it would move

20
00:00:59,560 --> 00:01:01,970
on to the last one, videos.

21
00:01:01,970 --> 00:01:04,110
The total time in
sequential programs

22
00:01:04,110 --> 00:01:06,870
is the sum of all the tasks.

23
00:01:06,870 --> 00:01:10,450
So if the search for website
took 2 seconds, the search

24
00:01:10,450 --> 00:01:13,730
for images took 3 seconds,
and the search for videos

25
00:01:13,730 --> 00:01:16,060
took 4 seconds,
then the total time

26
00:01:16,060 --> 00:01:19,585
would be 2 plus 3 plus
for 4-- 9 seconds.

27
00:01:22,330 --> 00:01:25,490
Now in concurrent
programs, multiple tasks

28
00:01:25,490 --> 00:01:31,150
can be executed independently
and may appear simultaneous.

29
00:01:31,150 --> 00:01:33,300
If Big Search was
programmed this way,

30
00:01:33,300 --> 00:01:37,470
we would see results from
websites, images, and videos

31
00:01:37,470 --> 00:01:41,380
showing up in what would
appear to be the same time.

32
00:01:41,380 --> 00:01:43,800
Under the hood,
each search would

33
00:01:43,800 --> 00:01:47,060
be split into small
chunks and those chunks

34
00:01:47,060 --> 00:01:49,630
would alternate execution.

35
00:01:49,630 --> 00:01:54,190
The total time would still be
the sum of all the tasks, 9

36
00:01:54,190 --> 00:01:58,060
seconds, but tasks would
alternate time slices,

37
00:01:58,060 --> 00:02:02,330
giving the impression
they're running together.

38
00:02:02,330 --> 00:02:06,080
Finally, in parallel
programs, multiple tasks

39
00:02:06,080 --> 00:02:10,470
can be executed at the same
time in multi-core machines,

40
00:02:10,470 --> 00:02:14,060
or machines with multiple CPUs.

41
00:02:14,060 --> 00:02:18,040
If Big Search was programmed
and run as a parallel program,

42
00:02:18,040 --> 00:02:21,020
then website, image,
and video searches

43
00:02:21,020 --> 00:02:24,250
would all be performing
at the same time

44
00:02:24,250 --> 00:02:26,210
and the total time
for search would be

45
00:02:26,210 --> 00:02:29,070
the time for the slowest task.

46
00:02:29,070 --> 00:02:32,860
Videos is the slowest task, so
the total time of the search

47
00:02:32,860 --> 00:02:36,300
would be 4 seconds.

48
00:02:36,300 --> 00:02:38,830
I know this might sound
a little bit confusing

49
00:02:38,830 --> 00:02:41,110
if it's the first time
you're hearing about it,

50
00:02:41,110 --> 00:02:43,160
but the important
thing to remember

51
00:02:43,160 --> 00:02:46,740
is that concurrency
is not parallelism.

52
00:02:46,740 --> 00:02:49,380
Concurrency means
independent, which

53
00:02:49,380 --> 00:02:52,480
is a necessary step
towards parallelism,

54
00:02:52,480 --> 00:02:54,710
which means simultaneous.

55
00:02:54,710 --> 00:02:57,180
Go's concurrency
model and goroutines

56
00:02:57,180 --> 00:03:00,200
make it simple to build
parallel programs that

57
00:03:00,200 --> 00:03:04,260
take advantage of machines
with multiple processors, most

58
00:03:04,260 --> 00:03:07,290
machines today.

59
00:03:07,290 --> 00:03:10,420
A goroutine is a
special function in Go

60
00:03:10,420 --> 00:03:13,710
that executes concurrently
with other functions.

61
00:03:13,710 --> 00:03:16,680
We can create them
with the go keyword.

62
00:03:16,680 --> 00:03:17,560
Yes.

63
00:03:17,560 --> 00:03:20,240
Go is also a keyword.

64
00:03:20,240 --> 00:03:24,320
In this first example, we
have functions f and g.

65
00:03:24,320 --> 00:03:27,660
This is a sequential
program, so function g

66
00:03:27,660 --> 00:03:32,940
must wait until f is finished in
order to run, like we see here.

67
00:03:32,940 --> 00:03:38,540
In this other example, we create
a goroutine and run f on it.

68
00:03:38,540 --> 00:03:41,530
Because our main program
also runs in a goroutine

69
00:03:41,530 --> 00:03:47,000
by default, then both f and g
will be executed concurrently

70
00:03:47,000 --> 00:03:48,510
like we see here.

71
00:03:48,510 --> 00:03:51,640
This is the first step into
writing concurrent programs,

72
00:03:51,640 --> 00:03:54,860
but it's worth noting that
on single-core machines,

73
00:03:54,860 --> 00:03:59,060
concurrent code is unlikely
to perform any better

74
00:03:59,060 --> 00:04:00,020
than sequential code.

75
00:04:02,630 --> 00:04:04,730
Now let's write a new
program to demonstrate

76
00:04:04,730 --> 00:04:06,930
concurrency and parallelism.

77
00:04:06,930 --> 00:04:09,360
This new program creates
a slice of strings

78
00:04:09,360 --> 00:04:12,200
using a slice literal
with initial values

79
00:04:12,200 --> 00:04:15,250
Phil, Noodles, and Barbaro.

80
00:04:15,250 --> 00:04:17,589
Then, we'll loop
through each element

81
00:04:17,589 --> 00:04:20,240
and invoke a function,
printName, which

82
00:04:20,240 --> 00:04:21,858
takes a single string argument.

83
00:04:24,670 --> 00:04:27,170
The printName function
takes this string argument

84
00:04:27,170 --> 00:04:29,540
and simply prints
it to the console.

85
00:04:29,540 --> 00:04:31,860
We'll run our
program with go run

86
00:04:31,860 --> 00:04:34,540
and use the Unix
time command to track

87
00:04:34,540 --> 00:04:36,830
the duration of the execution.

88
00:04:36,830 --> 00:04:41,760
As we can see, it takes 321
milliseconds, less than half

89
00:04:41,760 --> 00:04:44,318
a second, to run and
print each name.

90
00:04:47,250 --> 00:04:50,130
Now let's simulate a
time-consuming task

91
00:04:50,130 --> 00:04:53,100
on printName and we'll
do this by adding

92
00:04:53,100 --> 00:04:56,640
a very costly mathematical
operation using the math

93
00:04:56,640 --> 00:04:59,550
package from Go's
standard library.

94
00:04:59,550 --> 00:05:02,240
Inside the printName method,
we'll create a for loop

95
00:05:02,240 --> 00:05:06,870
and execute a time-consuming
computation 100 million times

96
00:05:06,870 --> 00:05:08,940
before printing the name.

97
00:05:08,940 --> 00:05:11,570
This computation will keep
the processor very busy.

98
00:05:15,170 --> 00:05:17,570
When we add heavy
processing to printName,

99
00:05:17,570 --> 00:05:20,920
we can see a big increase
in execution time.

100
00:05:20,920 --> 00:05:22,520
When we run our
code again, we can

101
00:05:22,520 --> 00:05:28,750
see it went from 321
milliseconds to 11.6 seconds.

102
00:05:28,750 --> 00:05:31,440
It's running each call to
printName sequentially,

103
00:05:31,440 --> 00:05:35,040
so before one starts, the
previous one needs to finish

104
00:05:35,040 --> 00:05:37,150
and it completely
blocks the processor

105
00:05:37,150 --> 00:05:38,962
while it's doing
the math operation.

106
00:05:42,740 --> 00:05:45,430
The first step into making
this code concurrent

107
00:05:45,430 --> 00:05:49,000
is to use the go keyword
to create a goroutine

108
00:05:49,000 --> 00:05:51,530
for each call to printName.

109
00:05:51,530 --> 00:05:54,200
However, Go programs
are not automatically

110
00:05:54,200 --> 00:05:57,070
aware of newly
created goroutines.

111
00:05:57,070 --> 00:06:00,210
So if we run this program,
the main function exits

112
00:06:00,210 --> 00:06:02,700
before the goroutines
are finished.

113
00:06:02,700 --> 00:06:05,440
That's why we'll see it takes
less than a second to run

114
00:06:05,440 --> 00:06:08,560
the program, but it does
not print any names.

115
00:06:08,560 --> 00:06:09,210
Don't worry.

116
00:06:09,210 --> 00:06:11,320
There's a built-in
solution in Go for this.

117
00:06:15,880 --> 00:06:18,550
We'll synchronize our code
using the sync package

118
00:06:18,550 --> 00:06:20,710
from Go's standard library.

119
00:06:20,710 --> 00:06:23,420
From that package, we'll use
the WaitGroup data type

120
00:06:23,420 --> 00:06:26,220
to make our program wait for
our newly created goroutines

121
00:06:26,220 --> 00:06:27,680
to finish.

122
00:06:27,680 --> 00:06:32,700
So we import the sync package
and declare a new variable, wg,

123
00:06:32,700 --> 00:06:35,030
from the sync.WaitGroup
data type.

124
00:06:38,290 --> 00:06:40,985
We'll use the Add method to
set the number of goroutines

125
00:06:40,985 --> 00:06:42,570
to wait for.

126
00:06:42,570 --> 00:06:45,150
Instead of hard coding
the number of goroutines,

127
00:06:45,150 --> 00:06:48,870
we'll use the len function
to return that number for us

128
00:06:48,870 --> 00:06:52,440
based on the number of
elements from the names slice.

129
00:06:52,440 --> 00:06:55,810
Then, we'll use the Wait
method to prevent the program

130
00:06:55,810 --> 00:06:58,400
from exiting before
all goroutines being

131
00:06:58,400 --> 00:07:00,820
tracked by our WaitGroup
are finished executing.

132
00:07:04,360 --> 00:07:07,110
Lastly, the Done
method from WaitGroup

133
00:07:07,110 --> 00:07:10,290
must be called at the end
of each function that's

134
00:07:10,290 --> 00:07:11,990
running on a goroutine.

135
00:07:11,990 --> 00:07:15,700
To do that, the printName
method must be given a reference

136
00:07:15,700 --> 00:07:18,070
to the original
WaitGroup so that we

137
00:07:18,070 --> 00:07:22,160
call Done on the original
value and not on a copy.

138
00:07:22,160 --> 00:07:24,880
We use the ampersand symbol
here to pass a reference.

139
00:07:24,880 --> 00:07:25,880
Remember that?

140
00:07:25,880 --> 00:07:29,000
Calling the Done method from
the printName function running

141
00:07:29,000 --> 00:07:31,435
inside a goroutine--
it's kind of like saying

142
00:07:31,435 --> 00:07:34,510
to the WaitGroup-- hey,
there's one less goroutine

143
00:07:34,510 --> 00:07:35,480
you need to wait for.

144
00:07:35,480 --> 00:07:36,513
Just letting you know.

145
00:07:39,231 --> 00:07:40,930
Our code is done.

146
00:07:40,930 --> 00:07:43,750
Let's run the program
now, but let's specify

147
00:07:43,750 --> 00:07:46,380
we want to use
one processor.

148
00:07:46,380 --> 00:07:50,080
We do this by setting the
GOMAXPROCS environment

149
00:07:50,080 --> 00:07:51,500
 variable to 1.

150
00:07:51,500 --> 00:07:54,620
The Go runtime reads
this environment variable

151
00:07:54,620 --> 00:07:57,920
and runs our program
on a single CPU.

152
00:07:57,920 --> 00:08:01,090
This will run a concurrent
version of our program,

153
00:08:01,090 --> 00:08:02,450
not parallel.

154
00:08:02,450 --> 00:08:04,650
We can notice that
with a single processor

155
00:08:04,650 --> 00:08:07,220
there is no noticeable
performance improvements.

156
00:08:07,220 --> 00:08:09,800
Still taking around 11 seconds.

157
00:08:09,800 --> 00:08:10,500
Still slow.

158
00:08:18,870 --> 00:08:21,650
The good news is that
the Go runtime defaults

159
00:08:21,650 --> 00:08:24,990
to using all processors
available on the machine,

160
00:08:24,990 --> 00:08:28,240
and most machines today have
more than one processor.

161
00:08:28,240 --> 00:08:31,230
This means that in most
cases, our concurrent Go code

162
00:08:31,230 --> 00:08:34,909
automatically run in
parallel with no changes.

163
00:08:34,909 --> 00:08:37,270
Running the program
without GOMAXPROCS

164
00:08:37,270 --> 00:08:42,590
on a machine with four CPUs
will use all four CPUs.

165
00:08:42,590 --> 00:08:44,730
And we can see that
now, our program

166
00:08:44,730 --> 00:08:50,410
runs much faster, from 11
seconds down to 4.1 seconds.

167
00:08:50,410 --> 00:08:52,950
It's running the goroutines
with the printName functions

168
00:08:52,950 --> 00:08:53,697
in parallel.

169
00:08:56,620 --> 00:08:59,040
Congratulations on reaching
the end of this level

170
00:08:59,040 --> 00:09:01,130
and the end of this course.

171
00:09:01,130 --> 00:09:03,140
There are still some
challenges left,

172
00:09:03,140 --> 00:09:06,010
so head over and practice
writing some goroutines.

173
00:09:06,010 --> 00:09:08,876
And don't forget to check
out the wrap-up page.

174
00:09:08,876 --> 00:09:10,310
[BEEPING]

175
00:09:10,310 --> 00:09:11,380
Op-- bleh.

176
00:09:11,380 --> 00:09:12,120
[BEEPING]

177
00:09:12,120 --> 00:09:15,500
Zero value is the default
value assigned to variables

178
00:09:15,500 --> 00:09:17,404
without an explicit
initial value.

179
00:09:17,404 --> 00:09:18,320
That's a lot of value.

180
00:09:18,320 --> 00:09:18,819
[BEEPING]

181
00:09:18,819 --> 00:09:22,160
--max number of elements
can help the-- pffft.

182
00:09:22,160 --> 00:09:23,060
Read it.

183
00:09:23,060 --> 00:09:24,301
Ah--

