1
00:00:02,050 --> 00:00:02,970
Welcome back.

2
00:00:02,970 --> 00:00:05,760
In this section, we'll learn
about writing conditionals,

3
00:00:05,760 --> 00:00:08,720
reading user-supplied arguments
from the command line,

4
00:00:08,720 --> 00:00:11,870
and package imports.

5
00:00:11,870 --> 00:00:13,460
Let's write a new program.

6
00:00:13,460 --> 00:00:15,310
And here's how
it's going to work.

7
00:00:15,310 --> 00:00:17,540
It's going to read a
user-supplied argument

8
00:00:17,540 --> 00:00:21,050
from the command line and
print it back to the console.

9
00:00:21,050 --> 00:00:25,255
For example, when run go
run main.go, and give it

10
00:00:25,255 --> 00:00:27,770
the string argument
"Into the tunnel,"

11
00:00:27,770 --> 00:00:31,160
we want to see that argument
printed back to the console.

12
00:00:31,160 --> 00:00:33,370
If we run the program
with no argument,

13
00:00:33,370 --> 00:00:35,670
like we see here
below, then we'll

14
00:00:35,670 --> 00:00:41,210
print the default message
"Hello, I am Gopher."

15
00:00:41,210 --> 00:00:44,260
We'll use the same main.go
source file for this,

16
00:00:44,260 --> 00:00:47,190
with the main package
definition up at the top,

17
00:00:47,190 --> 00:00:50,490
and the package fmt
import right below.

18
00:00:50,490 --> 00:00:52,640
Then, from inside
the main function,

19
00:00:52,640 --> 00:00:55,690
the first thing we'll do
is add an if statement.

20
00:00:55,690 --> 00:00:58,370
Unlike other languages,
if statements in Go

21
00:00:58,370 --> 00:01:02,230
require no parentheses,
but the if and else blocks

22
00:01:02,230 --> 00:01:06,290
must be enclosed
in curly braces.

23
00:01:06,290 --> 00:01:08,890
Next, we'll use the
len function built

24
00:01:08,890 --> 00:01:11,080
into Go, which
takes one argument

25
00:01:11,080 --> 00:01:13,020
and returns its length.

26
00:01:13,020 --> 00:01:15,750
We'll talk about this
argument in just a second.

27
00:01:15,750 --> 00:01:18,600
But for now, we'll check
if the return from len

28
00:01:18,600 --> 00:01:20,300
is greater than 1.

29
00:01:20,300 --> 00:01:23,690
If len is less
than or equal to 1,

30
00:01:23,690 --> 00:01:26,130
then the program flows
into the else block.

31
00:01:26,130 --> 00:01:29,060
Being a built-in
function means that len

32
00:01:29,060 --> 00:01:31,840
can be invoked directly
without us having

33
00:01:31,840 --> 00:01:33,840
to import any specific package.

34
00:01:36,920 --> 00:01:39,820
Now the next step is
to pass an argument

35
00:01:39,820 --> 00:01:43,540
to len, which will be os.Args.

36
00:01:43,540 --> 00:01:47,450
Os.Args is an array containing
all arguments passed

37
00:01:47,450 --> 00:01:49,590
to the running
program, including

38
00:01:49,590 --> 00:01:51,970
the name of the
program itself along

39
00:01:51,970 --> 00:01:55,650
with any user-supplied
arguments from the command line.

40
00:01:55,650 --> 00:01:58,670
Next, the os package
from the standard library

41
00:01:58,670 --> 00:02:02,180
must be added to the
import list in order for us

42
00:02:02,180 --> 00:02:04,430
to access its args property.

43
00:02:04,430 --> 00:02:06,370
Our program is still unfinished.

44
00:02:06,370 --> 00:02:10,180
But let's see what it would look
like if we run this right now.

45
00:02:10,180 --> 00:02:14,460
We'll type go run, give it the
name of the program, name.go,

46
00:02:14,460 --> 00:02:17,230
and the argument
"Into the tunnel."

47
00:02:17,230 --> 00:02:21,130
When running this, the
element at index 0 on Args

48
00:02:21,130 --> 00:02:24,650
is the name of the
temporary executable created

49
00:02:24,650 --> 00:02:26,550
by the go run command.

50
00:02:26,550 --> 00:02:29,050
And the element
at index 1 on Args

51
00:02:29,050 --> 00:02:31,650
would be the string
"Into the tunnel."

52
00:02:31,650 --> 00:02:36,750
But we're not done yet with our
program, so let's finish it.

53
00:02:36,750 --> 00:02:40,330
From inside the if block, we'll
call the print line function

54
00:02:40,330 --> 00:02:44,930
and give it the element on index
1 of the os.Args array, which

55
00:02:44,930 --> 00:02:48,440
is the argument supplied by
the user from the command line.

56
00:02:48,440 --> 00:02:51,870
From the else block, which will
be executed when no argument is

57
00:02:51,870 --> 00:02:53,360
passed from the
command line, we'll

58
00:02:53,360 --> 00:02:55,390
print the default
message, "Hello.

59
00:02:55,390 --> 00:02:58,600
I am Gopher."

60
00:02:58,600 --> 00:03:00,590
Now our program is complete.

61
00:03:00,590 --> 00:03:03,300
Let's run it again and
give it that same argument,

62
00:03:03,300 --> 00:03:04,560
"Into the tunnel."

63
00:03:04,560 --> 00:03:07,610
Again, index 0 will be
the name of the program

64
00:03:07,610 --> 00:03:10,030
and index 1 will
be the argument.

65
00:03:10,030 --> 00:03:14,530
Since we have two elements in
os.Args, the return from len

66
00:03:14,530 --> 00:03:18,380
is 2 and the if statement
evaluates to true.

67
00:03:18,380 --> 00:03:22,130
The if block is run and we
see "Into the tunnel" printed

68
00:03:22,130 --> 00:03:22,801
to the console.

69
00:03:25,690 --> 00:03:28,400
Now when we run the
program with no arguments,

70
00:03:28,400 --> 00:03:32,090
only index 0 on os.Args
is assigned a value

71
00:03:32,090 --> 00:03:35,760
and the call to the
len function returns 1.

72
00:03:35,760 --> 00:03:40,370
The if statement evaluates to
false so the else block is run

73
00:03:40,370 --> 00:03:42,567
and the default message is
printed to the console--

74
00:03:42,567 --> 00:03:43,067
"Hello.

75
00:03:43,067 --> 00:03:43,650
I am Gopher."

76
00:03:47,140 --> 00:03:48,730
Now let's pause
here for a moment

77
00:03:48,730 --> 00:03:51,840
and take a look at what would
happen if we'd forgotten

78
00:03:51,840 --> 00:03:54,010
to import the os package.

79
00:03:54,010 --> 00:03:55,950
If you try to run
your code like this,

80
00:03:55,950 --> 00:03:58,280
then the Go compiler
will raise an error

81
00:03:58,280 --> 00:04:00,580
during the build process,
looking something

82
00:04:00,580 --> 00:04:04,670
like this-- undefined--
os in os.Args.

83
00:04:04,670 --> 00:04:07,650
We'll see this message repeated
for every line in our program

84
00:04:07,650 --> 00:04:09,940
that's referencing
the os package.

85
00:04:09,940 --> 00:04:12,400
The compiler is basically
saying, "I don't

86
00:04:12,400 --> 00:04:19,620
know where os is coming from."

87
00:04:19,620 --> 00:04:22,320
We could just add the os
package to the import list

88
00:04:22,320 --> 00:04:24,790
like we did before,
but let's take a look

89
00:04:24,790 --> 00:04:26,920
at another tool
that's shipped with Go

90
00:04:26,920 --> 00:04:28,690
and can help us with that.

91
00:04:28,690 --> 00:04:32,280
Goimports automatically
detects missing packages

92
00:04:32,280 --> 00:04:35,580
and updates import statements
in the source code.

93
00:04:35,580 --> 00:04:38,760
So on our source code file
with the missing os package,

94
00:04:38,760 --> 00:04:43,640
we can run goimports and give
it that same -w flag, which

95
00:04:43,640 --> 00:04:45,490
means we want to
write the results back

96
00:04:45,490 --> 00:04:48,320
to the original file and give
it the name of the file we

97
00:04:48,320 --> 00:04:50,780
want to fix, main.go.

98
00:04:50,780 --> 00:04:53,370
Goimports will
detect all references

99
00:04:53,370 --> 00:04:56,140
to packages not
imported in this file

100
00:04:56,140 --> 00:04:59,280
and will automatically import
those packages for us--

101
00:04:59,280 --> 00:05:02,400
in this example, the os package.

102
00:05:02,400 --> 00:05:05,920
As a bonus, goimports
also formats code

103
00:05:05,920 --> 00:05:07,940
according to go fmt.

104
00:05:07,940 --> 00:05:10,200
As we can see here with
the parens and line

105
00:05:10,200 --> 00:05:12,030
breaks after each package name.

106
00:05:15,750 --> 00:05:18,960
Our file is now fixed so
we can safely build and run

107
00:05:18,960 --> 00:05:20,330
our program again.

108
00:05:20,330 --> 00:05:22,830
Just like before, running
it with no arguments,

109
00:05:22,830 --> 00:05:24,860
we get the default message.

110
00:05:24,860 --> 00:05:27,710
And running it with an
argument prints that argument

111
00:05:27,710 --> 00:05:28,340
to the console.

112
00:05:33,380 --> 00:05:35,310
And that's it for
this first level.

113
00:05:35,310 --> 00:05:37,500
Have fun in the challenges.

