1
00:00:02,040 --> 00:00:05,350
In this section, we'll learn
what to do when things go south

2
00:00:05,350 --> 00:00:08,660
and how to work
with errors in Go.

3
00:00:08,660 --> 00:00:11,020
Our rodent friends
have a problem.

4
00:00:11,020 --> 00:00:14,430
Turns out some people have
been running this program way

5
00:00:14,430 --> 00:00:17,650
too early and waking up the
gophers from their sleep.

6
00:00:17,650 --> 00:00:20,090
Let's change our program
so that it is not

7
00:00:20,090 --> 00:00:22,860
allowed to be run before 7 a.m.

8
00:00:22,860 --> 00:00:26,620
If that happens, it should exit
immediately with an error code.

9
00:00:29,960 --> 00:00:32,009
The way we communicate
errors in Go

10
00:00:32,009 --> 00:00:34,920
is via a separate return value.

11
00:00:34,920 --> 00:00:37,890
Any function that can
potentially generate an error

12
00:00:37,890 --> 00:00:41,740
should declare an error data
type as part of its signature.

13
00:00:41,740 --> 00:00:44,980
Back to our example, we'll
update the getGreeting function

14
00:00:44,980 --> 00:00:47,950
to return two values
instead of one.

15
00:00:47,950 --> 00:00:53,030
We'll keep our string and add
a second return type of error.

16
00:00:53,030 --> 00:00:55,080
Then, from the
function body, we'll

17
00:00:55,080 --> 00:00:59,640
add an if statement to check
whether hour is less than 7.

18
00:00:59,640 --> 00:01:01,850
In other words,
whether this function

19
00:01:01,850 --> 00:01:03,740
is being invoked before 7 a.m.

20
00:01:06,790 --> 00:01:09,310
Remember when we talked
about the two different ways

21
00:01:09,310 --> 00:01:12,820
to declare variables, one being
manually declaring the data

22
00:01:12,820 --> 00:01:15,190
type before we
assign it a value?

23
00:01:15,190 --> 00:01:18,520
Well, this is what we'll use
for the message variable.

24
00:01:18,520 --> 00:01:20,730
We'll declare the message
variable first thing

25
00:01:20,730 --> 00:01:23,180
in the function
outside the if block.

26
00:01:23,180 --> 00:01:27,190
We use the var keyword followed
by the variable name message

27
00:01:27,190 --> 00:01:29,150
and its data type, string.

28
00:01:29,150 --> 00:01:31,600
Then, from inside
the block, we'll

29
00:01:31,600 --> 00:01:33,480
return the newly
declared message

30
00:01:33,480 --> 00:01:36,620
variable along with the
new error we create,

31
00:01:36,620 --> 00:01:38,400
separated by a comma.

32
00:01:38,400 --> 00:01:41,600
To create an error, we'll need
to import the errors package

33
00:01:41,600 --> 00:01:43,260
from the standard library.

34
00:01:43,260 --> 00:01:46,500
Notice that message has not
been assigned an initial value

35
00:01:46,500 --> 00:01:48,610
and this is totally fine.

36
00:01:48,610 --> 00:01:51,620
When we declare variables
in Go, they're automatically

37
00:01:51,620 --> 00:01:55,190
assigned an initial value.

38
00:01:55,190 --> 00:01:58,950
A zero value is what's assigned
by default to variables

39
00:01:58,950 --> 00:02:01,950
without an explicit
initial value.

40
00:02:01,950 --> 00:02:05,490
Each data type is assigned
a different zero value.

41
00:02:05,490 --> 00:02:08,710
String types are
assigned an empty string.

42
00:02:08,710 --> 00:02:13,190
Integers are assigned zero,
and booleans are assigned false.

43
00:02:13,190 --> 00:02:16,210
We won't be covering all
data types in this course,

44
00:02:16,210 --> 00:02:18,360
but here's a list with
some more data types

45
00:02:18,360 --> 00:02:20,520
and their respective
zero values.

46
00:02:20,520 --> 00:02:23,400
The complete list of zero
values for each data type

47
00:02:23,400 --> 00:02:25,270
can be found in
the official docs.

48
00:02:27,870 --> 00:02:30,090
Now let's update the rest
of the getGreeting function

49
00:02:30,090 --> 00:02:32,020
to reflect the latest changes.

50
00:02:32,020 --> 00:02:34,390
Instead of straight up
returning the greeting message

51
00:02:34,390 --> 00:02:36,560
like we were doing before,
we'll now assign it

52
00:02:36,560 --> 00:02:37,940
to the message variable.

53
00:02:37,940 --> 00:02:40,120
Since we've previously
declared this variable,

54
00:02:40,120 --> 00:02:43,190
we'll use the = to
assign the proper message

55
00:02:43,190 --> 00:02:47,460
depending on what time it is.

56
00:02:47,460 --> 00:02:49,570
Finally, we'll return
the message variable

57
00:02:49,570 --> 00:02:51,760
with whatever value was
assigned to it depending

58
00:02:51,760 --> 00:02:55,120
on the hour of the day
and an explicit nil.

59
00:02:55,120 --> 00:02:57,580
The nil value for
error indicates

60
00:02:57,580 --> 00:03:01,150
that no errors occurred during
the execution of this function.

61
00:03:04,150 --> 00:03:05,780
Now let's go back
to the main function

62
00:03:05,780 --> 00:03:07,900
and see how we can
call getGreeting.

63
00:03:07,900 --> 00:03:11,030
The getGreeting function
now returns two values--

64
00:03:11,030 --> 00:03:13,180
the message and an error.

65
00:03:13,180 --> 00:03:16,000
In Go, we can assign
multiple values at once

66
00:03:16,000 --> 00:03:18,790
by separating the
variables using a comma,

67
00:03:18,790 --> 00:03:22,450
like we're doing here--
getGreeting, comma, error.

68
00:03:25,490 --> 00:03:28,320
Whenever dealing with a
function that returns an error,

69
00:03:28,320 --> 00:03:31,550
it's a common practice to
always check for that error

70
00:03:31,550 --> 00:03:34,150
before proceeding
with the execution.

71
00:03:34,150 --> 00:03:37,370
We do that with an if
statement, checking if the error

72
00:03:37,370 --> 00:03:39,710
variable is different than nil.

73
00:03:39,710 --> 00:03:43,010
If it is, then we know
some error occurred,

74
00:03:43,010 --> 00:03:45,674
and we'll deal with that
inside this if block.

75
00:03:48,340 --> 00:03:50,380
The way we'll deal
with this error for now

76
00:03:50,380 --> 00:03:52,390
is by printing it
to the console.

77
00:03:52,390 --> 00:03:54,460
This is a nice way
to help whoever's

78
00:03:54,460 --> 00:03:56,820
running this program
figure out what caused

79
00:03:56,820 --> 00:03:58,540
the error in the first place.

80
00:03:58,540 --> 00:04:02,080
Then, we'll want to terminate
this program immediately

81
00:04:02,080 --> 00:04:05,420
and inform the caller
that an error occurred.

82
00:04:05,420 --> 00:04:07,170
One way we can
do that is by using

83
00:04:07,170 --> 00:04:09,220
what's called an exit code.

84
00:04:09,220 --> 00:04:13,160
Exit codes are a POSIX standard
that many operating systems

85
00:04:13,160 --> 00:04:14,630
comply to.

86
00:04:14,630 --> 00:04:18,279
An exit code of 1 means
the program has finished,

87
00:04:18,279 --> 00:04:20,060
but errors have occurred.

88
00:04:20,060 --> 00:04:24,150
To exit with an error, we'll use
our old friend, the os package,

89
00:04:24,150 --> 00:04:27,680
in the exit function,
passing it the number 1.

90
00:04:27,680 --> 00:04:29,020
That's it for our program.

91
00:04:29,020 --> 00:04:33,240
Let's go back and see
how it's working now.

92
00:04:33,240 --> 00:04:35,020
If we run the
code now, it still

93
00:04:35,020 --> 00:04:38,680
prints the proper greeting
messages after 7 a.m.,

94
00:04:38,680 --> 00:04:41,780
but if we run it
before 7 a.m., it

95
00:04:41,780 --> 00:04:44,720
prints the error message
"Too early for greetings!"

96
00:04:44,720 --> 00:04:49,330
The exit code 1 is also returned
so that other programs using

97
00:04:49,330 --> 00:04:52,340
our program are informed
that an error occurred

98
00:04:52,340 --> 00:04:53,452
and can act accordingly.

99
00:04:56,050 --> 00:04:57,440
It's the end of this level.

100
00:04:57,440 --> 00:05:01,490
Now it's your turn to work with
some errors in the challenges.

