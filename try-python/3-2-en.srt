1
00:00:02,050 --> 00:00:05,180
Getting back to our rules
of engagement problem,

2
00:00:05,180 --> 00:00:08,140
num_knights is now equal to 10.

3
00:00:08,140 --> 00:00:11,850
And if you remember, if we
have at least 10 knights,

4
00:00:11,850 --> 00:00:14,110
we want to cue
the Trojan Rabbit.

5
00:00:14,110 --> 00:00:17,010
So we want to add
another conditional here

6
00:00:17,010 --> 00:00:19,950
that says if there are
at least 10 knights, cue

7
00:00:19,950 --> 00:00:21,400
the Trojan Rabbit.

8
00:00:21,400 --> 00:00:24,330
It allows you to keep
checking more conditions

9
00:00:24,330 --> 00:00:30,760
after the if statement is false
and before the else statement.

10
00:00:30,760 --> 00:00:34,960
Here, if num_knights is less
than 3, we print('Retreat!)

11
00:00:34,960 --> 00:00:37,600
Otherwise, if we have
at least 10 knights,

12
00:00:37,600 --> 00:00:39,640
print('Trojan Rabbit')

13
00:00:39,640 --> 00:00:43,170
Otherwise, if it's
Tuesday, print('Taco Night'),

14
00:00:43,170 --> 00:00:47,190
and if all three of these things
are False, we'll print('Truce?').

15
00:00:47,190 --> 00:00:51,020
Another thing to note is as soon
as one of those ifs or elifs

16
00:00:51,020 --> 00:00:53,550
are true, we'll run
that block of code

17
00:00:53,550 --> 00:00:54,805
and then exit the conditional.

18
00:00:57,590 --> 00:01:00,690
We can combine conditionals
with Boolean operators

19
00:01:00,690 --> 00:01:05,220
<i>and</i> and <i>or</i>, which will come in
handy because King Arthur has

20
00:01:05,220 --> 00:01:08,380
complicated our rules of
engagement a little bit.

21
00:01:08,380 --> 00:01:12,080
He's declared that on
Mondays, we always retreat,

22
00:01:12,080 --> 00:01:15,350
and we can only use the
Trojan Rabbit on Wednesdays

23
00:01:15,350 --> 00:01:17,590
because we have to
rent it out for parties

24
00:01:17,590 --> 00:01:19,080
on the other days of the week.

25
00:01:21,630 --> 00:01:24,570
Let's start out by handling
the new Monday rule.

26
00:01:24,570 --> 00:01:29,810
If num_knights is less than 3,
we retreat, or if it's a Monday

27
00:01:29,810 --> 00:01:31,090
we retreat.

28
00:01:31,090 --> 00:01:33,680
In conditionals, we can
have multiple comparisons

29
00:01:33,680 --> 00:01:35,500
separated by the <i>or</i> operator.

30
00:01:38,160 --> 00:01:41,440
Here, we'll handle
the Trojan Rabbit rule

31
00:01:41,440 --> 00:01:43,980
by checking if we have
at least 10 knights

32
00:01:43,980 --> 00:01:45,650
and the day of the
week is Wednesday.

33
00:01:48,770 --> 00:01:52,750
<i>and</i> and <i>or</i> make it possible
to combine Booleans.

34
00:01:52,750 --> 00:01:57,490
A True and a True
result in a True.

35
00:01:57,490 --> 00:02:01,820
A True and a False
result in a False.

36
00:02:01,820 --> 00:02:05,480
Basically, if there's one
False in an <i>and</i> statement,

37
00:02:05,480 --> 00:02:08,070
the result will always be False.

38
00:02:08,070 --> 00:02:11,720
For <i>or</i>, one value
only has to be True

39
00:02:11,720 --> 00:02:14,350
and this statement
will result in a True.

40
00:02:14,350 --> 00:02:18,480
For example, True or
False results in True.

41
00:02:23,950 --> 00:02:26,130
Here's our program
after we incorporated

42
00:02:26,130 --> 00:02:28,960
King Arthur's request
for the day of the week.

43
00:02:32,390 --> 00:02:34,690
Instead of assigning
hard coded values

44
00:02:34,690 --> 00:02:36,880
to our variables
in our script, we

45
00:02:36,880 --> 00:02:40,340
can ask the user to
input their own values.

46
00:02:40,340 --> 00:02:44,190
<i>input</i> is a built in function
in Python, like <i>print</i>.

47
00:02:44,190 --> 00:02:47,650
It will print out this
statement to the user

48
00:02:47,650 --> 00:02:51,480
and then wait for the
user to enter their answer

49
00:02:51,480 --> 00:02:53,770
and then save that value.

50
00:02:53,770 --> 00:03:00,360
For example, we have
input('Enter the day of the week')

51
00:03:00,360 --> 00:03:01,790
We run the program.

52
00:03:01,790 --> 00:03:05,510
It asks the user for the day
of the week, they enter Monday,

53
00:03:05,510 --> 00:03:07,940
we save that into
the day variable

54
00:03:07,940 --> 00:03:09,630
and then we print it back out:

55
00:03:09,630 --> 00:03:10,730
'You entered: Monday'

56
00:03:13,980 --> 00:03:16,040
Since input comes
in as a string,

57
00:03:16,040 --> 00:03:18,460
if we want the user
to enter a number,

58
00:03:18,460 --> 00:03:22,100
we have to convert their
text input to a number.

59
00:03:22,100 --> 00:03:25,520
We can do this with
the int function.

60
00:03:25,520 --> 00:03:27,970
Now that num_knights
is a number,

61
00:03:27,970 --> 00:03:30,390
we can print it
out to the console

62
00:03:30,390 --> 00:03:34,830
and then check if it's less
than 10 or the day is Monday.

63
00:03:34,830 --> 00:03:38,075
Since neither of those are
True, we don't print('Retreat!')

64
00:03:45,740 --> 00:03:48,960
Let's look at how different
user input changes

65
00:03:48,960 --> 00:03:50,920
the outcome of our program.

66
00:03:50,920 --> 00:03:54,490
Here, if the user enters 2
for the number of knights

67
00:03:54,490 --> 00:03:59,410
and Tuesday for the day of
the week, 'Retreat!' is printed.

68
00:03:59,410 --> 00:04:02,600
If the user enters 12
for the number of knights

69
00:04:02,600 --> 00:04:06,980
and Wednesday for the day,
'Trojan Rabbit' is printed.

70
00:04:09,530 --> 00:04:11,590
We've encountered a
new enemy that has

71
00:04:11,590 --> 00:04:13,440
thrown a wrench in our plans.

72
00:04:13,440 --> 00:04:15,760
If we see a Killer
Bunny, we have

73
00:04:15,760 --> 00:04:17,910
to throw the Holy Hand Grenade.

74
00:04:17,910 --> 00:04:21,930
Otherwise, we'll use our
original rules of engagement.

75
00:04:21,930 --> 00:04:23,700
This kind of
situation will come up

76
00:04:23,700 --> 00:04:26,230
a lot in your
programs, where you'll

77
00:04:26,230 --> 00:04:30,170
need to follow one decision
with a series of decisions.

78
00:04:30,170 --> 00:04:34,110
That's called a
nested conditional.

79
00:04:34,110 --> 00:04:36,910
Here, we check if there
is a Killer Bunny.

80
00:04:36,910 --> 00:04:39,940
If so, we use the
Holy Hand Grenade.

81
00:04:39,940 --> 00:04:44,420
Otherwise, we nest in
our original battle rules

82
00:04:44,420 --> 00:04:45,800
into the else block.

83
00:04:50,010 --> 00:04:53,380
Here, you can see our final
rules of engagement program,

84
00:04:53,380 --> 00:04:55,355
complete with a
nested conditional.

85
00:04:57,930 --> 00:05:00,530
Now it's time for you to
play with some more complex

86
00:05:00,530 --> 00:05:02,890
conditionals in the challenges.

87
00:05:02,890 --> 00:05:07,730
Good luck, and I'll see
you in the wrap-up video.

88
00:05:07,730 --> 00:05:10,366
I feel like I'm like shouting.

89
00:05:10,366 --> 00:05:13,370
I'm a little a
shy about smiling.

90
00:05:13,370 --> 00:05:15,572
I know, it's weird.

91
00:05:15,572 --> 00:05:17,170
Dang it.

92
00:05:17,170 --> 00:05:20,220
Here, we can-- concatenated.

93
00:05:20,220 --> 00:05:22,030
It's a hard word.

94
00:05:22,030 --> 00:05:26,510
Characters where each-- I'm
sorry, I'm like losing my mind.

95
00:05:26,510 --> 00:05:29,250
We use the Holy Hand
Grenade-- grand-enade.

96
00:05:32,200 --> 00:05:32,700
[LAUGHTER]

97
00:05:32,700 --> 00:05:34,000
That was good.

98
00:05:34,000 --> 00:05:34,500
[LAUGHTER]

99
00:05:34,500 --> 00:05:36,350
All right.

